package com.webnowbr.siscoat.cobranca.service;

import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.faces.context.FacesContext;
import javax.imageio.ImageIO;

import org.apache.commons.io.IOUtils;
import org.apache.poi.util.Units;
import org.apache.poi.xwpf.model.XWPFHeaderFooterPolicy;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
import org.apache.poi.xwpf.usermodel.XWPFAbstractNum;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFFooter;
import org.apache.poi.xwpf.usermodel.XWPFHeader;
import org.apache.poi.xwpf.usermodel.XWPFNumbering;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.hibernate.JDBCException;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTAbstractNum;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTDrawing;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFonts;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTHMerge;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTJc;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTNumbering;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblBorders;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTcBorders;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STBorder;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STJc;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STMerge;
import org.primefaces.model.UploadedFile;

import com.webnowbr.siscoat.cobranca.auxiliar.NumeroPorExtenso;
import com.webnowbr.siscoat.cobranca.auxiliar.PorcentagemPorExtenso;
import com.webnowbr.siscoat.cobranca.auxiliar.ValorPorExtenso;
import com.webnowbr.siscoat.cobranca.db.model.Averbacao;
import com.webnowbr.siscoat.cobranca.db.model.CcbContrato;
import com.webnowbr.siscoat.cobranca.db.model.CcbParticipantes;
import com.webnowbr.siscoat.cobranca.db.model.CcbProcessosJudiciais;
import com.webnowbr.siscoat.cobranca.db.model.ContasPagar;
import com.webnowbr.siscoat.cobranca.db.model.ContratoCobranca;
import com.webnowbr.siscoat.cobranca.db.model.PagadorRecebedor;
import com.webnowbr.siscoat.cobranca.db.model.Segurado;
import com.webnowbr.siscoat.cobranca.db.op.CcbParticipantesDao;
import com.webnowbr.siscoat.cobranca.db.op.PagadorRecebedorDao;
import com.webnowbr.siscoat.cobranca.db.op.SeguradoDAO;
import com.webnowbr.siscoat.cobranca.mb.ImpressoesPDFMB;
import com.webnowbr.siscoat.common.CommonsUtil;
import com.webnowbr.siscoat.common.DateUtil;
import com.webnowbr.siscoat.common.GeradorRelatorioDownloadCliente;
import com.webnowbr.siscoat.common.SiscoatConstants;
import com.webnowbr.siscoat.simulador.SimulacaoDetalheVO;
import com.webnowbr.siscoat.simulador.SimulacaoVO;

import net.sf.jasperreports.engine.JRException;

@SuppressWarnings("deprecation")
public class CcbService {
	ValorPorExtenso valorPorExtenso = new ValorPorExtenso();
	NumeroPorExtenso numeroPorExtenso = new NumeroPorExtenso();
	PorcentagemPorExtenso porcentagemPorExtenso = new PorcentagemPorExtenso();
	private char[] alphabet = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
	public UploadedFile uploadedFile;
    public String fileName;
    public String fileType;
    public int fileTypeInt;
    ByteArrayInputStream bis = null;
    
	private ArrayList<UploadedFile> filesList = new ArrayList<UploadedFile>();   
    CcbContrato objetoCcb;
    SimulacaoVO simulador;
    
	public CcbService(ArrayList<UploadedFile> filesList, CcbContrato objetoCcb, SimulacaoVO simulador) {
		super();
		this.filesList = filesList;
		this.objetoCcb = objetoCcb;
		this.simulador = simulador;
	}

	public byte[] geraCci() throws IOException{
		try {
			XWPFDocument document;	
			XWPFRun run;
			XWPFRun run2;
			XWPFRun run3;
			List<CcbParticipantes> segurados = new ArrayList<CcbParticipantes>();
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")
						|| CommonsUtil.mesmoValor(participante.getTipoParticipante(), "DEVEDOR FIDUCIANTE") ) {
					participante.setTipoParticipante("DEVEDOR FIDUCIANTE");
					segurados.add(participante);
				} else if(CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")){
					segurados.add(participante);
				}  else if(CommonsUtil.mesmoValor(participante.getTipoParticipante(), "COMPRADOR")){
					segurados.add(participante);
				}
			}
			if(objetoCcb.isTerceiroGarantidor()) {
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/CciTg.docx"));
			} else {
				if ( CommonsUtil.semValor( objetoCcb.getProcessosJucidiais() ) )
					document = new XWPFDocument(getClass().getResourceAsStream("/resource/Cci.docx"));
				else
					document = new XWPFDocument(getClass().getResourceAsStream("/resource/CciComProcesso.docx"));
			}		
			
			String numerosProcessos = "";
			BigDecimal totalProcessos = BigDecimal.ZERO;
			if (!CommonsUtil.semValor(objetoCcb.getProcessosJucidiais())) {
				for (CcbProcessosJudiciais processo : objetoCcb.getProcessosJucidiais()) {
					if (CommonsUtil.semValor(processo.getValorAtualizado())) {
						continue;
					}
					numerosProcessos = numerosProcessos + ((!CommonsUtil.semValor(numerosProcessos)) ? ", " : "")
							+ "NÂº " + CommonsUtil.stringValueVazio(processo.getNumero()) + " ";
					totalProcessos = totalProcessos.add(processo.getValorAtualizado());
				}
				numerosProcessos = numerosProcessos.trim();
			}

			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			organizaSegurados(segurados);
		
			int indexSegurados = 41;
			
			for(Segurado segurado : objetoCcb.getListSegurados()) {
				XWPFTable table = document.getTables().get(0);
				table.insertNewTableRow(indexSegurados);
				XWPFTableRow tableRow1 = table.getRow(indexSegurados);
				XWPFParagraph paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.LEFT);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph);
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				CTTcBorders border = tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewRight().setVal(STBorder.SINGLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);		
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.setFontFamily("Calibri");
				run.setText("Nome:");
				tableRow1.createCell();////////////////////////////////////////////////////////////////////////
				tableRow1.getCell(1).setParagraph(paragraph);
				tableRow1.getCell(1).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				border = tableRow1.getCell(1).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewRight().setVal(STBorder.SINGLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);
				run = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.setFontFamily("Calibri");
				run.setText(segurado.getPessoa().getNome());
				indexSegurados++;////////////////////////////////////////////////////////////////////////////////
				table.insertNewTableRow(indexSegurados);
				XWPFTableRow tableRow2 = table.getRow(indexSegurados);				
				tableRow2.createCell();
				tableRow2.getCell(0).setParagraph(paragraph);
				tableRow2.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow2.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				border = tableRow2.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewRight().setVal(STBorder.SINGLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);	
				run = tableRow2.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.setFontFamily("Calibri");
				run.setText("Percentual:");
				tableRow2.createCell();//////////////////////////////////////////////////////////////////////////
				tableRow2.getCell(1).setParagraph(paragraph);
				tableRow2.getCell(1).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow2.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				border = tableRow2.getCell(1).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewRight().setVal(STBorder.SINGLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);			
				run = tableRow2.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetario(segurado.getPorcentagemSegurador()) + "%");
				indexSegurados++;
			}
			
			
		
			
			XWPFTable table = document.getTables().get(0);
			XWPFTableRow tableRow1 = table.getRow(3);
			XWPFParagraph paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			int iParticipante = 0;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {										
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();	
				run.setFontSize(12);
				run.setText(alphabet[iParticipante] + ") ");
				run.setBold(true);
				run2 = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
				//run2.setFontFamily("Calibri");
				if (!participante.isEmpresa()) {
					geraParagrafoPF(run2, participante);
					run2.addCarriageReturn();
				} else {
					run2.setFontSize(12);
					PagadorRecebedor pessoa = participante.getPessoa();
					String socios = "";
					if (participante.getSocios().size() > 1) {
						socios = "pelos seus sÃ³cios, ";
					} else if(participante.getSocios().size() > 0){
						if (participante.getSocios().iterator().next().isFeminino()) {
							socios = "pela sua Ãºnica sÃ³cia, ";
						} else {
							socios = "pelo seu Ãºnico sÃ³cio, ";
						}
					} else {
						socios = "";
					}
					run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
							+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
							+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
							+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
							+ "; neste ato representada " + socios);
					for (CcbParticipantes sociosParticipante : participante.getSocios()) {
						XWPFRun runSocios = tableRow1.getCell(0).getParagraphArray(0).createRun();
						runSocios.setFontSize(12);
						runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
						runSocios.setBold(true);
						XWPFRun runSociosNome = tableRow1.getCell(0).getParagraphArray(0).createRun();
						geraParagrafoPF(runSociosNome, sociosParticipante);
						runSociosNome.addCarriageReturn();
					}
				}									
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
					if(CommonsUtil.semValor(objetoCcb.getTipoPessoaEmitente())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setTipoPessoaEmitente("PF");
						} else {
							objetoCcb.setTipoPessoaEmitente("PJ");
						}
					}
					
					participante.setTipoParticipante("DEVEDOR FIDUCIANTE");
					objetoCcb.setTipoParticipanteEmitente("DEVEDOR FIDUCIANTE");
				}
				run3 = tableRow1.getCell(0).getParagraphArray(0).createRun();	
				run3.setFontSize(12);
				run3.setText(" (â" + participante.getTipoParticipante() + "â)");
				run3.setBold(true);
				run3.addBreak();
				iParticipante++;
			}
			
			for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			            
			            text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	 		
			            text = trocaValoresXWPF(text, r, "porcentagemImovel", CommonsUtil.formataValorMonetarioCci(objetoCcb.getPorcentagemImovel(), ""));	 		
			            text = trocaValoresTaxaExtensoXWPF(text, r, "PorcentagemImovel", objetoCcb.getPorcentagemImovel());
						text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
						
						text = trocaValoresXWPF(text, r, "numerosProcessos",numerosProcessos);
						text = trocaValoresXWPF(text, r, "totalProcessos", CommonsUtil.formataValorMonetario(totalProcessos));
						
			        }
			    }
			}	
			
			
			
			BigDecimal taxaAdm = SiscoatConstants.TAXA_ADM;
			if(!CommonsUtil.semValor(objetoCcb.getPrazo()) && !CommonsUtil.semValor(objetoCcb.getNumeroParcelasPagamento())) {
				taxaAdm = taxaAdm.multiply(BigDecimal.valueOf( Long.parseLong(CommonsUtil.somenteNumeros(objetoCcb.getPrazo())) - Long.parseLong(CommonsUtil.somenteNumeros(objetoCcb.getNumeroParcelasPagamento())) + 1));
			} 
			BigDecimal totalPrimeiraParcela = BigDecimal.ZERO;

			if (!CommonsUtil.semValor(objetoCcb.getValorMipParcela()))
				totalPrimeiraParcela = objetoCcb.getValorMipParcela();
			if (!CommonsUtil.semValor(objetoCcb.getValorDfiParcela()))
				totalPrimeiraParcela = totalPrimeiraParcela.add(objetoCcb.getValorDfiParcela());
			if (!CommonsUtil.semValor(objetoCcb.getValorParcela()))
				totalPrimeiraParcela = totalPrimeiraParcela.add(objetoCcb.getValorParcela());
			totalPrimeiraParcela = totalPrimeiraParcela.add(taxaAdm);
						
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
								String text = r.getText(0);										
								
								text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());									
								text = trocaValoresXWPFCci(text, r, "valorLiquidoCredito", objetoCcb.getValorLiquidoCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorLiquidoCredito", objetoCcb.getValorLiquidoCredito());								
								text = trocaValoresXWPFCci(text, r, "custoEmissao", objetoCcb.getCustoEmissao(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "CustoEmissao", objetoCcb.getCustoEmissao());	
								text = trocaValoresXWPFCci(text, r, "valorIOF", objetoCcb.getValorIOF(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorIOF", objetoCcb.getValorIOF());	
								text = trocaValoresXWPFCci(text, r, "valorDespesas", objetoCcb.getValorDespesas(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDespesas", objetoCcb.getValorDespesas());	
								
								text = trocaValoresXWPF(text, r, "titularConta", objetoCcb.getTitularConta());
								text = trocaValoresXWPF(text, r, "agencia", objetoCcb.getAgencia());
								text = trocaValoresXWPF(text, r, "contaCorrente", objetoCcb.getContaCorrente());					
								text = trocaValoresXWPF(text, r, "nomeBanco", objetoCcb.getNomeBanco());
								text = trocaValoresXWPF(text, r, "pixBanco", objetoCcb.getPixBanco());
								
								text = trocaValoresXWPF(text, r, "prazoContrato", objetoCcb.getPrazo());
								text = trocaValoresXWPF(text, r, "numeroParcelasPagamento", objetoCcb.getNumeroParcelasPagamento());
								text = trocaValoresXWPF(text, r, "vencimentoPrimeiraParcelaPagamento", objetoCcb.getVencimentoPrimeiraParcelaPagamento());
								text = trocaValoresXWPF(text, r, "taxaDeJurosMes", objetoCcb.getTaxaDeJurosMes());
								text = trocaValoresXWPF(text, r, "taxaDeJurosAno", objetoCcb.getTaxaDeJurosAno());
								text = trocaValoresXWPF(text, r, "cetMes", objetoCcb.getCetMes());
								text = trocaValoresXWPF(text, r, "cetAno", objetoCcb.getCetAno());
								
								text = trocaValoresXWPFCci(text, r, "totalPrimeiraParcela", totalPrimeiraParcela, "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "TotalPrimeiraParcela", totalPrimeiraParcela);	
								text = trocaValoresXWPFCci(text, r, "valorMipParcela", objetoCcb.getValorMipParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorMipParcela", objetoCcb.getValorMipParcela());			
								text = trocaValoresXWPFCci(text, r, "valorDfiParcela", objetoCcb.getValorDfiParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDfiParcela", objetoCcb.getValorDfiParcela());
								text = trocaValoresXWPFCci(text, r, "valorParcela", objetoCcb.getValorParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorParcela", objetoCcb.getValorParcela());		
								
								text = trocaValoresXWPF(text, r, "serieCcb", objetoCcb.getSerieCcb());
								text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());
								text = trocaValoresXWPF(text, r, "numeroCCB", objetoCcb.getNumeroCcb());
								
								text = trocaValoresXWPF(text, r, "numeroRegistroMatricula", objetoCcb.getNumeroRegistroMatricula());
								
								text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
								text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
								text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
								text = trocaValoresXWPF(text, r, "numeroImovel", objetoCcb.getNumeroImovel());
								text = trocaValoresXWPF(text, r, "inscricaoMunicipal", objetoCcb.getInscricaoMunicipal());
								text = trocaValoresXWPFCci(text, r, "vendaLeilao", objetoCcb.getVendaLeilao(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "VendaLeilao", objetoCcb.getVendaLeilao());	
								
								text = trocaValoresXWPF(text, r, "vencimentoUltimaParcelaPagamento", objetoCcb.getVencimentoUltimaParcelaPagamento());
								
								text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
								text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
								text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
								
								text = trocaValoresXWPF(text, r, "tipoParticipanteEmitente", objetoCcb.getTipoParticipanteEmitente());	 		
								text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	 		
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());								
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
						
								
								if (text != null && text.contains("sistemaAmortizacao")) {
									if(CommonsUtil.mesmoValor(objetoCcb.getSistemaAmortizacao(), "Price")) {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "Tabela Price");
									} else if(CommonsUtil.mesmoValor(objetoCcb.getSistemaAmortizacao(), "SAC")) {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "SAC - Sistema de AmortizaÃ§Ã£o Constante");
									} else {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "");
									}
								}
								
								if (text != null && text.contains("participantesCci")) {
									text = text.replace("participantesCci", "");
									r.setText(text, 0);			
								}
								
								if (text != null && text.contains("ImagemImovel") && filesList.size() > 0) {
									int iImagem = 0;
									int idImage = 50;
									for(iImagem = 0; iImagem < filesList.size(); iImagem++) {
										r.addBreak();
										populateFiles(iImagem);
										r.addPicture(bis, fileTypeInt, fileName.toLowerCase(), Units.toEMU(400), Units.toEMU(300));
										r.addBreak();	
									}
									for (int i = 0; i < r.getCTR().getDrawingList().size(); i++) {
										CTDrawing drawing = r.getCTR().getDrawingList().get(i);
										drawing.getInlineList().get(0).getDocPr().setId(idImage);
										idImage++;
									}
									text = trocaValoresXWPF(text, r, "ImagemImovel", "");						
									adicionarEnter(text, r);
								} else if(text != null && text.contains("ImagemImovel") && filesList.size() == 0) {
									text = trocaValoresXWPF(text, r, "ImagemImovel", "");
								}
							}
						}
					}
				}
			}
		    
		    
		    
		    XWPFTableRow tableRow2 = document.getTableArray(1).getRow(1);

		    paragraph = document.createParagraph();
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			paragraph.setAlignment(ParagraphAlignment.LEFT);
			
			if (objetoCcb.getListaParticipantes().size() > 1) {
				tableRow2.getCell(0).setParagraph(paragraph);
				tableRow2.getCell(1).setParagraph(paragraph);
				@SuppressWarnings("unused")
				int qtdePessoasEsquerdo = 0;
				for (int iPartTab = 0; iPartTab < objetoCcb.getListaParticipantes().size(); iPartTab++) {

					CcbParticipantes participante = objetoCcb.getListaParticipantes().get(iPartTab);
					if (iPartTab != 0) {
						if (iPartTab % 2 != 0) {

							run = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run.addBreak();
							run.setFontSize(12);
							run.setText("____________________________________   ");
							run.setBold(false);
							run.addBreak();

							run2 = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run2.setFontSize(12);
							run2.setText(participante.getPessoa().getNome());
							run2.setBold(true);
							run2.addBreak();

							run3 = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run3.setFontSize(12);
							run3.setText(participante.getTipoParticipante());
							run3.setBold(false);
							run3.addBreak();

							qtdePessoasEsquerdo++;
						} else {
							run = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run.addBreak();
							run.setFontSize(12);
							run.setText("____________________________________   ");
							run.setBold(false);
							run.addBreak();

							run2 = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run2.setFontSize(12);
							run2.setText(participante.getPessoa().getNome());
							run2.setBold(true);
							run2.addBreak();

							run3 = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run3.setFontSize(12);
							run3.setText(participante.getTipoParticipante());
							run3.setBold(false);
							run3.addBreak();
							qtdePessoasEsquerdo--;
						}
					}
				}
			}
			
			int indexParcela = 1;
			

			XWPFParagraph paragraph1 = document.createParagraph();
			paragraph1.setAlignment(ParagraphAlignment.CENTER);
			paragraph1.setSpacingBefore(0);
			paragraph1.setSpacingAfter(0);
			
			XWPFParagraph paragraph2 = document.createParagraph();
			paragraph2.setAlignment(ParagraphAlignment.RIGHT);
			paragraph2.setSpacingBefore(0);
			paragraph2.setSpacingAfter(0);
			
			int fontSize = 7;
			for(SimulacaoDetalheVO p : simulador.getParcelas()) {
				table = document.getTableArray(3);
				table.insertNewTableRow(indexParcela);
				tableRow1 = table.getRow(indexParcela);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph1);
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(p.getNumeroParcela().toString());
				tableRow1.createCell();
				tableRow1.getCell(1).setParagraph(paragraph2);
				tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataData(DateUtil.adicionarPeriodo(simulador.getDataSimulacao(), p.getNumeroParcela().intValue(), Calendar.MONTH), "dd/MM/yyyy"));
				tableRow1.createCell();
				tableRow1.getCell(2).setParagraph(paragraph2);
				tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(2).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSaldoDevedorInicial(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(3).setParagraph(paragraph2);
				tableRow1.getCell(3).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(3).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getAmortizacao(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(4).setParagraph(paragraph2);
				tableRow1.getCell(4).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(4).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(5).setParagraph(paragraph2);
				tableRow1.getCell(5).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(5).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros().add(p.getAmortizacao()), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(6).setParagraph(paragraph2);
				tableRow1.getCell(6).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(6).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getTxAdm(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(7).setParagraph(paragraph2);
				tableRow1.getCell(7).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(7).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCciArredondado(p.getSeguroMIP(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(8).setParagraph(paragraph2);
				tableRow1.getCell(8).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(8).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCciArredondado(p.getSeguroDFI(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(9).setParagraph(paragraph2);
				tableRow1.getCell(9).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(9).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCciArredondado(p.getValorParcela(), "R$ ") + " + IPCA");
				indexParcela++;////////////////////////////////////////////////////////////////////////////////
			}
			
			geraPaginaContratoII(document, "9DC83E", false);

			table = document.getTableArray(2);			
			CabecalhoAnexo1(table, 0, 1, CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy"));
			CabecalhoAnexo1(table, 1, 1, CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy"));	
			CabecalhoAnexo1(table, 2, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorCredito(), "R$ "));
			CabecalhoAnexo1(table, 2, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosMes(),"") + "%");
			
			CabecalhoAnexo1(table, 3, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorIOF(), "R$ "));
			CabecalhoAnexo1(table, 3, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosAno(),"") + "%");
			
			CabecalhoAnexo1(table, 4, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCustoEmissao(), "R$ "));
			CabecalhoAnexo1(table, 4, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetMes(),"") + "%");
			CabecalhoAnexo1(table, 4, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getVlrImovel(), "R$ "));
			
			CabecalhoAnexo1(table, 5, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorDespesas(), "R$ "));
			CabecalhoAnexo1(table, 5, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetAno(),"") + "%");
			CabecalhoAnexo1(table, 5, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteMIP(), "R$ "));
			
			CabecalhoAnexo1(table, 6, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorLiquidoCredito(), "R$ "));
			CabecalhoAnexo1(table, 6, 4, CommonsUtil.stringValue(
					CommonsUtil.formataValorInteiro(
							DateUtil.getDaysBetweenDates(objetoCcb.getDataDeEmissao(), objetoCcb.getVencimentoUltimaParcelaPagamento()))));
			CabecalhoAnexo1(table, 6, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteDFI(), "R$ "));
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
		
	public byte[] geraCciAquisicao() throws IOException{
		try {
			XWPFDocument document;	
			XWPFRun run;
			XWPFRun run2;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")) {
					objetoCcb.setTerceiroGarantidor(true);
					participante.setTipoParticipante("DEVEDOR FIDUCIANTE");
				}
			}
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/AquisicaoCCI_Novo.docx"));
				
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Times New Roman");
			fonts.setAscii("Times New Roman");
			fonts.setEastAsia("Times New Roman");
			fonts.setCs("Times New Roman");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			
			XWPFParagraph paragraph;
			
			XWPFTable table = document.getTables().get(0);
			setTableAlignment(table, STJc.CENTER);
			XWPFTableRow tableRow1 = table.getRow(2);
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.LEFT);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			XWPFTableRow tableRowAux = tableRow1.getCell(0).getTableArray(0).getRow(0);
			int iParticipante = 0;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {		
				
				if(CommonsUtil.mesmoValor(participante.getTipoOriginal(), "TERCEIRO GARANTIDOR") 
						|| CommonsUtil.mesmoValor(participante.getTipoOriginal(), "Vendedor")) {
					participante.setTipoParticipante("Vendedor");
				
					run = tableRowAux.getCell(0).getParagraphArray(0).createRun();	
					run.setFontSize(12);
					run.setText(participante.getTipoParticipante() + " " + (iParticipante + 1));
					run.setBold(true);
					run2 = tableRowAux.getCell(0).getParagraphArray(0).createRun();
					run2.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
					//run2.setFontFamily("Times New Roman");
					if (!participante.isEmpresa()) {
						geraParagrafoPF(run2, participante);
						run2.addBreak();
					} else {
						run2.setFontSize(12);
						PagadorRecebedor pessoa = participante.getPessoa();
						String socios = "";
						if (participante.getSocios().size() > 1) {
							socios = "pelos seus sÃ³cios, ";
						} else if(participante.getSocios().size() > 0){
							if (participante.getSocios().iterator().next().isFeminino()) {
								socios = "pela sua Ãºnica sÃ³cia, ";
							} else {
								socios = "pelo seu Ãºnico sÃ³cio, ";
							}
						} else {
							socios = "";
						}
						run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
								+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
								+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
								+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
								+ "; neste ato representada " + socios);
						for (CcbParticipantes sociosParticipante : participante.getSocios()) {
							XWPFRun runSocios = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							runSocios.setFontSize(12);
							runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
							runSocios.setBold(true);
							XWPFRun runSociosNome = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							geraParagrafoPF(runSociosNome, sociosParticipante);
							runSociosNome.addBreak();
						}
					}									
					iParticipante++;
				}
			}
			
			tableRow1 = table.getRow(4);
			tableRowAux = tableRow1.getCell(0).getTableArray(0).getRow(0);
			iParticipante = 0;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {		
				
				if (CommonsUtil.mesmoValor(participante.getTipoOriginal(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
					participante.setTipoParticipante("Devedor");
								
					run = tableRowAux.getCell(0).getParagraphArray(0).createRun();	
					run.setFontSize(12);
					run.setText(participante.getTipoParticipante() + " " + (iParticipante + 1));
					run.setBold(true);
					run2 = tableRowAux.getCell(0).getParagraphArray(0).createRun();
					run2.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
					//run2.setFontFamily("Times New Roman");
					if (!participante.isEmpresa()) {
						geraParagrafoPF(run2, participante);
						run2.addBreak();
					} else {
						run2.setFontSize(12);
						PagadorRecebedor pessoa = participante.getPessoa();
						String socios = "";
						if (participante.getSocios().size() > 1) {
							socios = "pelos seus sÃ³cios, ";
						} else if(participante.getSocios().size() > 0){
							if (participante.getSocios().iterator().next().isFeminino()) {
								socios = "pela sua Ãºnica sÃ³cia, ";
							} else {
								socios = "pelo seu Ãºnico sÃ³cio, ";
							}
						} else {
							socios = "";
						}
						run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
								+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
								+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
								+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
								+ "; neste ato representada " + socios);
						for (CcbParticipantes sociosParticipante : participante.getSocios()) {
							XWPFRun runSocios = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							runSocios.setFontSize(12);
							runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
							runSocios.setBold(true);
							XWPFRun runSociosNome = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							geraParagrafoPF(runSociosNome, sociosParticipante);
							runSociosNome.addBreak();
						}
					}									
					iParticipante++;
				}
			}
			
			for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			            
			            text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	 		
			            text = trocaValoresXWPF(text, r, "porcentagemImovel", CommonsUtil.formataValorMonetarioCci(objetoCcb.getPorcentagemImovel(), ""));	 		
			            text = trocaValoresTaxaExtensoXWPF(text, r, "PorcentagemImovel", objetoCcb.getPorcentagemImovel());
						text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));		

						text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
						text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
						text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());								
						text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
						text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());
						text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
						
						if(CommonsUtil.mesmoValor(text, "aaaaaaaaaaa")){
							text = trocaValoresXWPF(text, r, "aaaaaaaaaaa", "");	 	
							
							for(CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
							
								r.setText("____________________________________________________________________");
								r.setBold(true);
								r.setFontSize(12);
								r.setFontFamily("Times New Roman");
								r.addCarriageReturn();
								r.setText(participante.getTipoParticipante().toUpperCase() + ": " + participante.getPessoa().getNome());
								r.addCarriageReturn();
								r.addCarriageReturn();
								r.addCarriageReturn();
							}
						}
			        }
			    }
			}	
		
			int indexSegurados = 47;
			
			for(Segurado segurado : objetoCcb.getListSegurados()) {
				table = document.getTables().get(0);
				table.insertNewTableRow(indexSegurados);
				tableRow1 = table.getRow(indexSegurados);
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.LEFT);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph);
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				CTTcBorders border = tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();	
				border.addNewRight().setVal(STBorder.SINGLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.TRIPLE);	
				border.getRight().setColor("808080");
				border.getBottom().setColor("808080");
				border.getTop().setColor("808080");
				border.getLeft().setColor("808080");
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.setFontFamily("Times New Roman");
				run.setText("Nome: " + segurado.getPessoa().getNome());
				tableRow1.createCell();////////////////////////////////////////////////////////////////////////
				tableRow1.getCell(1).setParagraph(paragraph);
				tableRow1.getCell(1).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);			
				run = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.setFontFamily("Times New Roman");
				run.setText("Percentual: ");
				run2 = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run2.setFontSize(12);
				run2.setFontFamily("Times New Roman");
				run2.setBold(true);
				run2.setText(CommonsUtil.formataValorMonetario(segurado.getPorcentagemSegurador()) + "%");
				tableRow1.createCell();
				tableRow1.getCell(2).getCTTc().addNewTcPr();
				CTHMerge hMerge = CTHMerge.Factory.newInstance();
				table = document.getTables().get(0);
				hMerge.setVal(STMerge.RESTART);
				table.getRow(indexSegurados).getCell(1).getCTTc().getTcPr().setHMerge(hMerge);
				CTHMerge hMerge1 = CTHMerge.Factory.newInstance();
				hMerge.setVal(STMerge.CONTINUE);
				table.getRow(indexSegurados).getCell(2).getCTTc().getTcPr().setHMerge(hMerge1);
				border = tableRow1.getCell(2).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewRight().setVal(STBorder.TRIPLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);
				border.getRight().setColor("808080");
				border.getBottom().setColor("808080");
				border.getTop().setColor("808080");
				border.getLeft().setColor("808080");
				indexSegurados++;
			}
			// First Row
						
			BigDecimal taxaAdm = SiscoatConstants.TAXA_ADM;
			BigDecimal totalPrimeiraParcela = BigDecimal.ZERO;
			if (!CommonsUtil.semValor(objetoCcb.getValorMipParcela()))
				totalPrimeiraParcela = objetoCcb.getValorMipParcela();
			if (!CommonsUtil.semValor(objetoCcb.getValorDfiParcela()))
			totalPrimeiraParcela = totalPrimeiraParcela.add(objetoCcb.getValorDfiParcela());
			if (!CommonsUtil.semValor(objetoCcb.getValorParcela()))
			totalPrimeiraParcela = totalPrimeiraParcela.add(objetoCcb.getValorParcela());
			if (!CommonsUtil.semValor(taxaAdm))
			totalPrimeiraParcela = totalPrimeiraParcela.add(taxaAdm);
			
			BigDecimal despesas = objetoCcb.getValorDespesas();
			BigDecimal custasCartorarias = BigDecimal.ZERO;
			BigDecimal itbi =  BigDecimal.ZERO;
			
			if(!objetoCcb.getDespesasAnexo2().isEmpty()) {
				for(ContasPagar cartorioItbi : objetoCcb.getDespesasAnexo2()) {
					if(!CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "CartÃ³rio")
							&& !CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "ITBI")) {
						continue;
					}
					
					if(CommonsUtil.semValor(cartorioItbi.getValor())) {
						continue;
					}
					
					if(CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "CartÃ³rio")) {
						custasCartorarias = custasCartorarias.add(cartorioItbi.getValor());
					}
					if(CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "ITBI")) {
						itbi = itbi.add(cartorioItbi.getValor());
					}
					despesas = despesas.subtract(cartorioItbi.getValor());
				}
			}
			
			objetoCcb.setCustasCartorariasValor(custasCartorarias);
			objetoCcb.setItbiValor(itbi);
			
			
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
								String text = r.getText(0);		 
								
								text = trocaValoresXWPFCci(text, r, "precoVendaCompra", objetoCcb.getPrecoVendaCompra(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "PrecoVendaCompra", objetoCcb.getPrecoVendaCompra());	
								
								text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());									
								text = trocaValoresXWPFCci(text, r, "valorLiquidoCredito", objetoCcb.getValorLiquidoCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorLiquidoCredito", objetoCcb.getValorLiquidoCredito());								
								text = trocaValoresXWPFCci(text, r, "custoEmissao", objetoCcb.getCustoEmissao(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "CustoEmissao", objetoCcb.getCustoEmissao());	
								text = trocaValoresXWPFCci(text, r, "valorIOF", objetoCcb.getValorIOF(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorIOF", objetoCcb.getValorIOF());	
								text = trocaValoresXWPFCci(text, r, "valorDespesas", despesas, "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDespesas", despesas);	
								
								text = trocaValoresXWPFCci(text, r, "custasCartorariasValor", objetoCcb.getCustasCartorariasValor(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "CustasCartorariasValor", objetoCcb.getCustasCartorariasValor());
								
								text = trocaValoresXWPFCci(text, r, "itbiValor", objetoCcb.getItbiValor(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ItbiValor", objetoCcb.getItbiValor());
								
								text = trocaValoresXWPF(text, r, "titularConta", objetoCcb.getTitularConta());
								text = trocaValoresXWPF(text, r, "agencia", objetoCcb.getAgencia());
								text = trocaValoresXWPF(text, r, "contaCorrente", objetoCcb.getContaCorrente());					
								text = trocaValoresXWPF(text, r, "nomeBanco", objetoCcb.getNomeBanco());		
				
								text = trocaValoresXWPF(text, r, "prazoContrato", objetoCcb.getPrazo());
								text = trocaValoresXWPF(text, r, "numeroParcelasPagamento", objetoCcb.getNumeroParcelasPagamento());
								text = trocaValoresXWPF(text, r, "vencimentoPrimeiraParcelaPagamento", objetoCcb.getVencimentoPrimeiraParcelaPagamento());
								text = trocaValoresXWPF(text, r, "taxaDeJurosMes", objetoCcb.getTaxaDeJurosMes());
								text = trocaValoresXWPF(text, r, "taxaDeJurosAno", objetoCcb.getTaxaDeJurosAno());
								text = trocaValoresXWPF(text, r, "cetMes", objetoCcb.getCetMes());
								text = trocaValoresXWPF(text, r, "cetAno", objetoCcb.getCetAno());
								
								text = trocaValoresXWPFCci(text, r, "totalPrimeiraParcela", totalPrimeiraParcela, "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "TotalPrimeiraParcela", totalPrimeiraParcela);	
								text = trocaValoresXWPFCci(text, r, "valorMipParcela", objetoCcb.getValorMipParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorMipParcela", objetoCcb.getValorMipParcela());			
								text = trocaValoresXWPFCci(text, r, "valorDfiParcela", objetoCcb.getValorDfiParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDfiParcela", objetoCcb.getValorDfiParcela());
								text = trocaValoresXWPFCci(text, r, "valorParcela", objetoCcb.getValorParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorParcela", objetoCcb.getValorParcela());		
								
								text = trocaValoresXWPF(text, r, "numeroCCB", objetoCcb.getNumeroCcb());
								text = trocaValoresXWPF(text, r, "serieCcb", objetoCcb.getSerieCcb());
								
								text = trocaValoresXWPF(text, r, "numeroRegistroMatricula", objetoCcb.getNumeroRegistroMatricula());
								
								text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
								text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
								text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
								text = trocaValoresXWPF(text, r, "numeroImovel", objetoCcb.getNumeroImovel());
								text = trocaValoresXWPF(text, r, "inscricaoMunicipal", objetoCcb.getInscricaoMunicipal());
								text = trocaValoresXWPFCci(text, r, "vendaLeilao", objetoCcb.getVendaLeilao(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "VendaLeilao", objetoCcb.getVendaLeilao());	
								
								text = trocaValoresXWPF(text, r, "vencimentoUltimaParcelaPagamento", objetoCcb.getVencimentoUltimaParcelaPagamento());
								
								text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
								text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
								text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
								
								text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	 		
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());								
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
								

								text = trocaValoresXWPF(text, r, "elaboradorNome", objetoCcb.getElaboradorNome());								
								text = trocaValoresXWPF(text, r, "elaboradorCrea", objetoCcb.getElaboradorCrea());
								text = trocaValoresXWPF(text, r, "responsavelNome", objetoCcb.getResponsavelNome());
								text = trocaValoresXWPF(text, r, "responsavelCrea", objetoCcb.getResponsavelCrea());
								
								
								
								
								if (text != null && text.contains("sistemaAmortizacao")) {
									if(CommonsUtil.mesmoValor(objetoCcb.getSistemaAmortizacao(), "Price")) {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "Tabela Price");
									} else if(CommonsUtil.mesmoValor(objetoCcb.getSistemaAmortizacao(), "SAC")) {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "SAC - Sistema de AmortizaÃ§Ã£o Constante");
									} else {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "");
									}
								}
								
								if (text != null && text.contains("participantesCci")) {
									text = text.replace("participantesCci", "");
									r.setText(text, 0);			
								}
								
								if (text != null && text.contains("ImagemImovel") && filesList.size() > 0) {
									int iImagem = 0;
									for(iImagem = 0; iImagem < filesList.size(); iImagem++) {
										r.addBreak();
										populateFiles(iImagem);
										r.addPicture(bis, fileTypeInt, fileName.toLowerCase(), Units.toEMU(400), Units.toEMU(300));
										r.addBreak();	
									}
									text = trocaValoresXWPF(text, r, "ImagemImovel", "");						
									adicionarEnter(text, r);
								} else if(text != null && text.contains("ImagemImovel") && filesList.size() == 0) {
									text = trocaValoresXWPF(text, r, "ImagemImovel", "");
								}
							}
						}
						
						for (XWPFTable t : cell.getTables()) {
							for (XWPFTableRow row2 : t.getRows()) {
								for (XWPFTableCell cell2 : row2.getTableCells()) {
									for (XWPFParagraph p2 : cell2.getParagraphs()) {
										for (XWPFRun r2 : p2.getRuns()) {
											String text = r2.getText(0);
											text = trocaValoresXWPF(text, r2, "cartorioImovel", objetoCcb.getCartorioImovel());
											text = trocaValoresXWPF(text, r2, "cidadeImovel", objetoCcb.getCidadeImovel());
											text = trocaValoresXWPF(text, r2, "ufImovel", objetoCcb.getUfImovel());		
											text = trocaValoresXWPF(text, r2, "numeroImovel", objetoCcb.getNumeroImovel());
											text = trocaValoresXWPF(text, r2, "inscricaoMunicipal", objetoCcb.getInscricaoMunicipal());
											text = trocaValoresXWPFCci(text, r2, "vendaLeilao", objetoCcb.getVendaLeilao(), "R$ ");
											text = trocaValoresDinheiroExtensoXWPF(text, r2, "VendaLeilao", objetoCcb.getVendaLeilao());	
											
										}
									}
								}
							}
						}
					}
				}
			}
		    
		    int indexParcela = 1;
			
			//calcularSimulador();

			XWPFParagraph paragraph1 = document.createParagraph();
			paragraph1.setAlignment(ParagraphAlignment.CENTER);
			paragraph1.setSpacingBefore(0);
			paragraph1.setSpacingAfter(0);
			
			XWPFParagraph paragraph2 = document.createParagraph();
			paragraph2.setAlignment(ParagraphAlignment.RIGHT);
			paragraph2.setSpacingBefore(0);
			paragraph2.setSpacingAfter(0);
			
			int fontSize = 7;
			for(SimulacaoDetalheVO p : simulador.getParcelas()) {
				table = document.getTableArray(2);
				table.insertNewTableRow(indexParcela);
				tableRow1 = table.getRow(indexParcela);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph1);
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(p.getNumeroParcela().toString());
				tableRow1.createCell();
				tableRow1.getCell(1).setParagraph(paragraph2);
				tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataData(DateUtil.adicionarPeriodo(simulador.getDataSimulacao(), p.getNumeroParcela().intValue(), Calendar.MONTH), "dd/MM/yyyy"));
				tableRow1.createCell();
				tableRow1.getCell(2).setParagraph(paragraph2);
				tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(2).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSaldoDevedorInicial(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(3).setParagraph(paragraph2);
				tableRow1.getCell(3).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(3).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getAmortizacao(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(4).setParagraph(paragraph2);
				tableRow1.getCell(4).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(4).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(5).setParagraph(paragraph2);
				tableRow1.getCell(5).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(5).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros().add(p.getAmortizacao()), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(6).setParagraph(paragraph2);
				tableRow1.getCell(6).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(6).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getTxAdm(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(7).setParagraph(paragraph2);
				tableRow1.getCell(7).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(7).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSeguroMIP(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(8).setParagraph(paragraph2);
				tableRow1.getCell(8).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(8).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSeguroDFI(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(9).setParagraph(paragraph2);
				tableRow1.getCell(9).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(9).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getValorParcela(), "R$ ") + " + IPCA");
				indexParcela++;////////////////////////////////////////////////////////////////////////////////
			}
			
			table = document.getTableArray(1);			
			CabecalhoAnexo1(table, 0, 1, CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy"));
			CabecalhoAnexo1(table, 1, 1, CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy"));	
			CabecalhoAnexo1(table, 2, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorCredito(), "R$ "));
			CabecalhoAnexo1(table, 2, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosMes(),"") + "%");
			
			CabecalhoAnexo1(table, 3, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorIOF(), "R$ "));
			CabecalhoAnexo1(table, 3, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosAno(),"") + "%");
			
			CabecalhoAnexo1(table, 4, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCustoEmissao(), "R$ "));
			CabecalhoAnexo1(table, 4, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetMes(),"") + "%");
			CabecalhoAnexo1(table, 4, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getVlrImovel(), "R$ "));
			
			CabecalhoAnexo1(table, 5, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorDespesas(), "R$ "));
			CabecalhoAnexo1(table, 5, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetAno(),"") + "%");
			CabecalhoAnexo1(table, 5, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteMIP(), "R$ "));
			
			CabecalhoAnexo1(table, 6, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorLiquidoCredito(), "R$ "));
			CabecalhoAnexo1(table, 6, 4, CommonsUtil.stringValue(
					CommonsUtil.formataValorInteiro(
							DateUtil.getDaysBetweenDates(objetoCcb.getDataDeEmissao(), objetoCcb.getVencimentoUltimaParcelaPagamento()))));
			CabecalhoAnexo1(table, 6, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteDFI(), "R$ "));
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraCciFinanciamento() throws IOException{
		try {
			XWPFDocument document;	
			XWPFRun run;
			XWPFRun run2;
			List<CcbParticipantes> segurados = new ArrayList<CcbParticipantes>();
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")) {
					objetoCcb.setTerceiroGarantidor(true);
					participante.setTipoParticipante("DEVEDOR FIDUCIANTE");
					segurados.add(participante);
				}
				 else if(CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")){
					segurados.add(participante);
				}  else if(CommonsUtil.mesmoValor(participante.getTipoParticipante(), "COMPRADOR")){
					segurados.add(participante);
				}
			}
			
			
			if ( CommonsUtil.semValor( objetoCcb.getProcessosJucidiais() ) )
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/CCI - Financiamento202310SemProcesso.docx"));
			else
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/CCI - Financiamento202310ComProcesso.docx"));
			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Times New Roman");
			fonts.setAscii("Times New Roman");
			fonts.setEastAsia("Times New Roman");
			fonts.setCs("Times New Roman");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
					
			XWPFParagraph paragraph;
			
			XWPFTable table = document.getTables().get(0);
			setTableAlignment(table, STJc.CENTER);
			XWPFTableRow tableRow1 = table.getRow(2);
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.LEFT);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			XWPFTableRow tableRowAux = tableRow1.getCell(0).getTableArray(0).getRow(0);
			int iParticipante = 0;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {		
				
				if(CommonsUtil.mesmoValor(participante.getTipoOriginal(), "TERCEIRO GARANTIDOR") 
						|| CommonsUtil.mesmoValor(participante.getTipoOriginal(), "Vendedor")) {
					participante.setTipoParticipante("Vendedor");
				
					run = tableRowAux.getCell(0).getParagraphArray(0).createRun();	
					run.setFontSize(12);
					run.setText(participante.getTipoParticipante() + " - " + (iParticipante + 1));
					run.setBold(true);
					run2 = tableRowAux.getCell(0).getParagraphArray(0).createRun();
					run2.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
					//run2.setFontFamily("Times New Roman");
					if (!participante.isEmpresa()) {
						geraParagrafoPF(run2, participante);
						run2.addBreak();
					} else {
						run2.setFontSize(12);
						PagadorRecebedor pessoa = participante.getPessoa();
						String socios = "";
						if (participante.getSocios().size() > 1) {
							socios = "pelos seus sÃ³cios, ";
						} else if(participante.getSocios().size() > 0){
							if (participante.getSocios().iterator().next().isFeminino()) {
								socios = "pela sua Ãºnica sÃ³cia, ";
							} else {
								socios = "pelo seu Ãºnico sÃ³cio, ";
							}
						} else {
							socios = "";
						}
						run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
								+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
								+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
								+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
								+ "; neste ato representada " + socios);
						for (CcbParticipantes sociosParticipante : participante.getSocios()) {
							XWPFRun runSocios = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							runSocios.setFontSize(12);
							runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
							runSocios.setBold(true);
							XWPFRun runSociosNome = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							geraParagrafoPF(runSociosNome, sociosParticipante);
							runSociosNome.addBreak();
						}
					}									
					iParticipante++;
				}
			}
			
			tableRow1 = table.getRow(4);
			tableRowAux = tableRow1.getCell(0).getTableArray(0).getRow(0);
			iParticipante = 0;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {		
				
				if (CommonsUtil.mesmoValor(participante.getTipoOriginal(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
					participante.setTipoParticipante("Comprador");
								
					run = tableRowAux.getCell(0).getParagraphArray(0).createRun();	
					run.setFontSize(12);
					run.setText(participante.getTipoParticipante() + " " + (iParticipante + 1));
					run.setBold(true);
					run2 = tableRowAux.getCell(0).getParagraphArray(0).createRun();
					run2.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
					//run2.setFontFamily("Times New Roman");
					if (!participante.isEmpresa()) {
						geraParagrafoPF(run2, participante);
						run2.addBreak();
					} else {
						run2.setFontSize(12);
						PagadorRecebedor pessoa = participante.getPessoa();
						String socios = "";
						if (participante.getSocios().size() > 1) {
							socios = "pelos seus sÃ³cios, ";
						} else if(participante.getSocios().size() > 0){
							if (participante.getSocios().iterator().next().isFeminino()) {
								socios = "pela sua Ãºnica sÃ³cia, ";
							} else {
								socios = "pelo seu Ãºnico sÃ³cio, ";
							}
						} else {
							socios = "";
						}
						run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
								+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
								+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
								+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
								+ "; neste ato representada " + socios);
						for (CcbParticipantes sociosParticipante : participante.getSocios()) {
							XWPFRun runSocios = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							runSocios.setFontSize(12);
							runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
							runSocios.setBold(true);
							XWPFRun runSociosNome = tableRowAux.getCell(0).getParagraphArray(0).createRun();
							geraParagrafoPF(runSociosNome, sociosParticipante);
							runSociosNome.addBreak();
						}
					}									
					iParticipante++;
				}
			}
			
			String numerosProcessos = "";
			String totalProcessosFormatado = "";
			BigDecimal totalProcessos = BigDecimal.ZERO;
			if (!CommonsUtil.semValor(objetoCcb.getProcessosJucidiais())) {
				for (CcbProcessosJudiciais processo : objetoCcb.getProcessosJucidiais()) {
					if (CommonsUtil.semValor(processo.getValorAtualizado())) {
						continue;
					}
					numerosProcessos = numerosProcessos + ((!CommonsUtil.semValor(numerosProcessos)) ? ", " : "")
							+ "NÂº " + CommonsUtil.stringValueVazio(processo.getNumero());
					totalProcessos = totalProcessos.add(processo.getValorAtualizado());
				}
				numerosProcessos = numerosProcessos.trim();
			}
			if (totalProcessos.compareTo(BigDecimal.ZERO) > 0) {
				int ultimaVirgula = numerosProcessos.lastIndexOf(", ");
				if (ultimaVirgula > -1) {
					numerosProcessos = numerosProcessos.substring(0, ultimaVirgula) + " e "
							+ numerosProcessos.substring(ultimaVirgula + 2);
				}
				valorPorExtenso.setNumber(totalProcessos);
				totalProcessosFormatado = CommonsUtil.formataValorMonetarioCci(totalProcessos, "") + " ("
						+ valorPorExtenso.toString() + ")";
			}
			XWPFRun runAssinatura = null;
			for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			            
			            text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	 		
			            text = trocaValoresXWPF(text, r, "porcentagemImovel", CommonsUtil.formataValorMonetarioCci(objetoCcb.getPorcentagemImovel(), ""));	 		
			            text = trocaValoresTaxaExtensoXWPF(text, r, "PorcentagemImovel", objetoCcb.getPorcentagemImovel());
						text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));		

						text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
						text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
						text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());								
						text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
						text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());
						text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
						
						text = trocaValoresXWPF(text, r, "elaboradorNome", objetoCcb.getElaboradorNome());								
						text = trocaValoresXWPF(text, r, "elaboradorCrea", objetoCcb.getElaboradorCrea());
						text = trocaValoresXWPF(text, r, "responsavelNome", objetoCcb.getResponsavelNome());
						text = trocaValoresXWPF(text, r, "responsavelCrea", objetoCcb.getResponsavelCrea());
						
						text = trocaValoresXWPF(text, r, "numerosProcessos",numerosProcessos);
						text = trocaValoresXWPF(text, r, "totalProcessos",totalProcessosFormatado);
						
						if(CommonsUtil.mesmoValor(text, "aaaaaaaaaaa")){
							text = trocaValoresXWPF(text, r, "aaaaaaaaaaa", "");	 	
							
							for(CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
							
								r.setText("____________________________________________________________________");
								r.setBold(true);
								r.setFontSize(12);
								r.setFontFamily("Times New Roman");
								r.addCarriageReturn();
								r.setText(participante.getTipoParticipante().toUpperCase() + ": " + participante.getPessoa().getNome());
								r.addCarriageReturn();
								r.addCarriageReturn();
								r.addCarriageReturn();
							}
						}
						
						if(CommonsUtil.mesmoValor(text, "TextoAssinatura")){
							text = trocaValoresXWPF(text, r, "TextoAssinatura", "");	 	
							runAssinatura = r;
							
						}
			        }
			    }
			}
			if(!CommonsUtil.semValor(runAssinatura)) {
				XWPFRun r = runAssinatura;
				for(CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
					r = r.getParagraph().createRun();
					r.setText("______________________________________");
					r.setBold(false);
					r.setFontSize(12);
					r.setFontFamily("Calibri");
					r.addCarriageReturn();
					XWPFRun r2 = r.getParagraph().createRun();
					r2.setBold(true);
					r2.setFontSize(12);
					r2.setFontFamily("Calibri");
					r2.setText(participante.getPessoa().getNome());
					r2.addCarriageReturn();
					r = r.getParagraph().createRun();
					r.setFontSize(12);
					r.setFontFamily("Calibri");
					r.setText(participante.getTipoParticipante().toUpperCase());
					r.addCarriageReturn();
					r.addCarriageReturn();
				}
			}
			
			
			organizaSegurados(segurados);
			int indexSegurados = 61;
			
			for(Segurado segurado : objetoCcb.getListSegurados()) {
				table = document.getTables().get(0);
				table.insertNewTableRow(indexSegurados);
				tableRow1 = table.getRow(indexSegurados);
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.LEFT);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph);		
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setText("");
				tableRow1.getCell(0).getCTTc().addNewTcPr();				
				tableRow1.createCell();
				tableRow1.getCell(1).getCTTc().addNewTcPr();				
				tableRow1.createCell();
				tableRow1.getCell(2).getCTTc().addNewTcPr();				
				tableRow1.createCell();
				tableRow1.getCell(3).getCTTc().addNewTcPr();
				tableRow1.createCell();
				tableRow1.getCell(4).getCTTc().addNewTcPr();			
				tableRow1.createCell();
				tableRow1.getCell(5).setParagraph(paragraph);		
				run = tableRow1.getCell(5).getParagraphArray(0).createRun();
				run.setText("");
				tableRow1.getCell(5).getCTTc().addNewTcPr();				
				tableRow1.createCell();
				tableRow1.getCell(6).getCTTc().addNewTcPr();				
				//tableRow1.createCell();
				//tableRow1.getCell(7).getCTTc().addNewTcPr();				
				CTHMerge hMerge = CTHMerge.Factory.newInstance();
				table = document.getTables().get(0);
				hMerge.setVal(STMerge.RESTART);
				table.getRow(indexSegurados).getCell(0).getCTTc().getTcPr().setHMerge(hMerge);				
				CTHMerge hMerge1 = CTHMerge.Factory.newInstance();
				hMerge1.setVal(STMerge.CONTINUE);
				table.getRow(indexSegurados).getCell(1).getCTTc().getTcPr().setHMerge(hMerge1);
				table.getRow(indexSegurados).getCell(2).getCTTc().getTcPr().setHMerge(hMerge1);				
				table.getRow(indexSegurados).getCell(3).getCTTc().getTcPr().setHMerge(hMerge1);
				table.getRow(indexSegurados).getCell(4).getCTTc().getTcPr().setHMerge(hMerge1);				
				CTHMerge hMerge2 = CTHMerge.Factory.newInstance();
				table = document.getTables().get(0);
				hMerge2.setVal(STMerge.RESTART);
				table.getRow(indexSegurados).getCell(5).getCTTc().getTcPr().setHMerge(hMerge2);
				table.getRow(indexSegurados).getCell(6).getCTTc().getTcPr().setHMerge(hMerge1);
				//table.getRow(indexSegurados).getCell(7).getCTTc().getTcPr().setHMerge(hMerge1);
				
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				CTTcBorders border = tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();	
				border.addNewRight().setVal(STBorder.SINGLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.TRIPLE);	
				border.getRight().setColor("808080");
				border.getBottom().setColor("808080");
				border.getTop().setColor("808080");
				border.getLeft().setColor("808080");
				run = tableRow1.getCell(0).getParagraphArray(0).getRuns().get(0);
				run.setFontSize(12);
				run.setFontFamily("Times New Roman");
				run.setText("Nome: " + segurado.getPessoa().getNome());
				
				tableRow1.getCell(5).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(5).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);	
				border = tableRow1.getCell(5).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);	
				border.getBottom().setColor("808080");
				border.getTop().setColor("808080");
				border.getLeft().setColor("808080");
				border = tableRow1.getCell(6).getCTTc().addNewTcPr().addNewTcBorders();
				border.addNewRight().setVal(STBorder.TRIPLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);	
				border.getBottom().setColor("808080");
				border.getTop().setColor("808080");
				border.getRight().setColor("808080");
				border.getLeft().setColor("808080");
				/*border = tableRow1.getCell(7).getCTTc().addNewTcPr().addNewTcBorders();	
				border.addNewRight().setVal(STBorder.TRIPLE);
				border.addNewBottom().setVal(STBorder.SINGLE);
				border.addNewTop().setVal(STBorder.SINGLE);
				border.addNewLeft().setVal(STBorder.SINGLE);	
				border.getRight().setColor("808080");
				border.getBottom().setColor("808080");
				border.getTop().setColor("808080");
				border.getLeft().setColor("808080");*/
				run = tableRow1.getCell(5).getParagraphArray(0).getRuns().get(0);
				run.setFontSize(12);
				run.setFontFamily("Times New Roman");
				run.setText("Percentual: ");
				run2 = tableRow1.getCell(5).getParagraphArray(0).createRun();
				run2.setFontSize(12);
				run2.setFontFamily("Times New Roman");
				run2.setBold(true);
				run2.setText(CommonsUtil.formataValorMonetario(segurado.getPorcentagemSegurador()) + "%");
				indexSegurados++;
			}
			// First Row
						
			BigDecimal taxaAdm = SiscoatConstants.TAXA_ADM;
			BigDecimal totalPrimeiraParcela = BigDecimal.ZERO;
			totalPrimeiraParcela = objetoCcb.getValorMipParcela();
			totalPrimeiraParcela = totalPrimeiraParcela.add(objetoCcb.getValorDfiParcela());
			totalPrimeiraParcela = totalPrimeiraParcela.add(objetoCcb.getValorParcela());
			totalPrimeiraParcela = totalPrimeiraParcela.add(taxaAdm);
			
			BigDecimal despesas = objetoCcb.getValorDespesas();
			BigDecimal custasCartorarias = BigDecimal.ZERO;
			BigDecimal itbi =  BigDecimal.ZERO;
			
			if(!objetoCcb.getDespesasAnexo2().isEmpty()) {
				for(ContasPagar cartorioItbi : objetoCcb.getDespesasAnexo2()) {
					if(!CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "CartÃ³rio")
							&& !CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "ITBI")) {
						continue;
					}
					
					if(CommonsUtil.semValor(cartorioItbi.getValor())) {
						continue;
					}
					
					if(CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "CartÃ³rio")) {
						custasCartorarias = custasCartorarias.add(cartorioItbi.getValor());
					}
					if(CommonsUtil.mesmoValor(cartorioItbi.getDescricao(), "ITBI")) {
						itbi = itbi.add(cartorioItbi.getValor());
					}
					despesas = despesas.subtract(cartorioItbi.getValor());
				}
			}
			
			objetoCcb.setCustasCartorariasValor(custasCartorarias);
			objetoCcb.setItbiValor(itbi);
			
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
								String text = r.getText(0);		 
								
								text = trocaValoresXWPFCci(text, r, "precoVendaCompra", objetoCcb.getPrecoVendaCompra(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "PrecoVendaCompra", objetoCcb.getPrecoVendaCompra());	
								
								text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());									
								text = trocaValoresXWPFCci(text, r, "valorLiquidoCredito", objetoCcb.getValorLiquidoCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorLiquidoCredito", objetoCcb.getValorLiquidoCredito());								
								text = trocaValoresXWPFCci(text, r, "custoEmissao", objetoCcb.getCustoEmissao(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "CustoEmissao", objetoCcb.getCustoEmissao());	
								text = trocaValoresXWPFCci(text, r, "valorIOF", objetoCcb.getValorIOF(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorIOF", objetoCcb.getValorIOF());	
								text = trocaValoresXWPFCci(text, r, "valorDespesas", despesas, "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDespesas", despesas);	
								
								text = trocaValoresXWPFCci(text, r, "custasCartorariasValor", objetoCcb.getCustasCartorariasValor(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "CustasCartorariasValor", objetoCcb.getCustasCartorariasValor());
								
								text = trocaValoresXWPFCci(text, r, "itbiValor", objetoCcb.getItbiValor(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ItbiValor", objetoCcb.getItbiValor());
								
								text = trocaValoresXWPFCci(text, r, "recursosProprios", objetoCcb.getRecursosProprios(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "RecursosProprios", objetoCcb.getRecursosProprios());							
								text = trocaValoresXWPFCci(text, r, "recursosFinanciamento", objetoCcb.getRecursosFinanciamento(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "RecursosFinanciamento", objetoCcb.getRecursosFinanciamento());
								
								text = trocaValoresXWPF(text, r, "titularContaVendedor", objetoCcb.getTitularContaVendedor());
								text = trocaValoresXWPF(text, r, "agenciaVendedor", objetoCcb.getAgenciaVendedor());
								text = trocaValoresXWPF(text, r, "contaCorrenteVendedor", objetoCcb.getContaCorrenteVendedor());					
								text = trocaValoresXWPF(text, r, "nomeBancoVendedor", objetoCcb.getNomeBancoVendedor() + " - " + objetoCcb.getNumeroBancoVendedor() );		
								text = trocaValoresXWPF(text, r, "digitoBancoVendedor", objetoCcb.getDigitoBancoVendedor());	
								text = trocaValoresXWPF(text, r, "tipoContaBancoVendedor", objetoCcb.getTipoContaBancoVendedor());	
								
								text = trocaValoresXWPF(text, r, "titularConta", objetoCcb.getTitularConta());
								text = trocaValoresXWPF(text, r, "agencia", objetoCcb.getAgencia());
								text = trocaValoresXWPF(text, r, "contaCorrente", objetoCcb.getContaCorrente());					
								text = trocaValoresXWPF(text, r, "nomeBanco", objetoCcb.getNomeBanco() + " - " + objetoCcb.getNumeroBanco() );		
								text = trocaValoresXWPF(text, r, "digitoBanco", objetoCcb.getDigitoBanco());	
								text = trocaValoresXWPF(text, r, "tipoContaBanco", objetoCcb.getTipoContaBanco());	
				
								text = trocaValoresXWPF(text, r, "prazoContrato", objetoCcb.getPrazo());
								text = trocaValoresXWPF(text, r, "numeroParcelasPagamento", objetoCcb.getNumeroParcelasPagamento());
								text = trocaValoresXWPF(text, r, "vencimentoPrimeiraParcelaPagamento", objetoCcb.getVencimentoPrimeiraParcelaPagamento());
								text = trocaValoresXWPF(text, r, "taxaDeJurosMes", objetoCcb.getTaxaDeJurosMes());
								text = trocaValoresXWPF(text, r, "taxaDeJurosAno", objetoCcb.getTaxaDeJurosAno());
								text = trocaValoresXWPF(text, r, "cetMes", objetoCcb.getCetMes());
								text = trocaValoresXWPF(text, r, "cetAno", objetoCcb.getCetAno());
								
								text = trocaValoresXWPFCci(text, r, "totalPrimeiraParcela", totalPrimeiraParcela, "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "TotalPrimeiraParcela", totalPrimeiraParcela);	
								text = trocaValoresXWPFCci(text, r, "valorMipParcela", objetoCcb.getValorMipParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorMipParcela", objetoCcb.getValorMipParcela());			
								text = trocaValoresXWPFCci(text, r, "valorDfiParcela", objetoCcb.getValorDfiParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDfiParcela", objetoCcb.getValorDfiParcela());
								text = trocaValoresXWPFCci(text, r, "valorParcela", objetoCcb.getValorParcela(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorParcela", objetoCcb.getValorParcela());		
								
								text = trocaValoresXWPF(text, r, "numeroCCB", objetoCcb.getNumeroCcb());
								text = trocaValoresXWPF(text, r, "serieCCB", objetoCcb.getSerieCcb());
								text = trocaValoresXWPF(text, r, "numeroRegistroMatricula", objetoCcb.getNumeroRegistroMatricula());
								
								text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
								text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
								text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
								text = trocaValoresXWPF(text, r, "numeroImovel", objetoCcb.getNumeroImovel());
								text = trocaValoresXWPF(text, r, "inscricaoMunicipal", objetoCcb.getInscricaoMunicipal());
								text = trocaValoresXWPFCci(text, r, "vendaLeilao", objetoCcb.getVendaLeilao(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "VendaLeilao", objetoCcb.getVendaLeilao());	
								
								text = trocaValoresXWPF(text, r, "vencimentoUltimaParcelaPagamento", objetoCcb.getVencimentoUltimaParcelaPagamento());
								
								text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
								text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
								text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
								
								text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	 		
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());								
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
								
								if (text != null && text.contains("sistemaAmortizacao")) {
									if(CommonsUtil.mesmoValor(objetoCcb.getSistemaAmortizacao(), "Price")) {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "Tabela Price");
									} else if(CommonsUtil.mesmoValor(objetoCcb.getSistemaAmortizacao(), "SAC")) {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "SAC - Sistema de AmortizaÃ§Ã£o Constante");
									} else {
										text = trocaValoresXWPF(text, r, "sistemaAmortizacao", "");
									}
								}
								
								if (text != null && text.contains("participantesCci")) {
									text = text.replace("participantesCci", "");
									r.setText(text, 0);			
								}
								
								if (text != null && text.contains("ImagemImovel") && filesList.size() > 0) {
									int iImagem = 0;
									for(iImagem = 0; iImagem < filesList.size(); iImagem++) {
										r.addBreak();
										populateFiles(iImagem);
										r.addPicture(bis, fileTypeInt, fileName.toLowerCase(), Units.toEMU(400), Units.toEMU(300));
										r.addBreak();	
									}
									text = trocaValoresXWPF(text, r, "ImagemImovel", "");						
									adicionarEnter(text, r);
								} else if(text != null && text.contains("ImagemImovel") && filesList.size() == 0) {
									text = trocaValoresXWPF(text, r, "ImagemImovel", "");
								}
							}
						}
						
						for (XWPFTable t : cell.getTables()) {
							for (XWPFTableRow row2 : t.getRows()) {
								for (XWPFTableCell cell2 : row2.getTableCells()) {
									for (XWPFParagraph p2 : cell2.getParagraphs()) {
										for (XWPFRun r2 : p2.getRuns()) {
											String text = r2.getText(0);
											text = trocaValoresXWPF(text, r2, "cartorioImovel", objetoCcb.getCartorioImovel());
											text = trocaValoresXWPF(text, r2, "cidadeImovel", objetoCcb.getCidadeImovel());
											text = trocaValoresXWPF(text, r2, "ufImovel", objetoCcb.getUfImovel());		
											text = trocaValoresXWPF(text, r2, "numeroImovel", objetoCcb.getNumeroImovel());
											text = trocaValoresXWPF(text, r2, "inscricaoMunicipal", objetoCcb.getInscricaoMunicipal());
											text = trocaValoresXWPFCci(text, r2, "vendaLeilao", objetoCcb.getVendaLeilao(), "R$ ");
											text = trocaValoresDinheiroExtensoXWPF(text, r2, "VendaLeilao", objetoCcb.getVendaLeilao());	
											
										}
									}
								}
							}
						}
					}
				}
			}
		    
		    int indexParcela = 1;
		    
			XWPFParagraph paragraph1 = document.createParagraph();
			paragraph1.setAlignment(ParagraphAlignment.CENTER);
			paragraph1.setSpacingBefore(0);
			paragraph1.setSpacingAfter(0);
			
			XWPFParagraph paragraph2 = document.createParagraph();
			paragraph2.setAlignment(ParagraphAlignment.RIGHT);
			paragraph2.setSpacingBefore(0);
			paragraph2.setSpacingAfter(0);
			
			int fontSize = 7;
//			calcularSimulador();
			
			for(SimulacaoDetalheVO p : simulador.getParcelas()) {
				table = document.getTableArray(2);
				table.insertNewTableRow(indexParcela);
				tableRow1 = table.getRow(indexParcela);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph1);
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(p.getNumeroParcela().toString());
				tableRow1.createCell();
				tableRow1.getCell(1).setParagraph(paragraph2);
				tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataData(DateUtil.adicionarPeriodo(simulador.getDataSimulacao(), p.getNumeroParcela().intValue(), Calendar.MONTH), "dd/MM/yyyy"));
				tableRow1.createCell();
				tableRow1.getCell(2).setParagraph(paragraph2);
				tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(2).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSaldoDevedorInicial(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(3).setParagraph(paragraph2);
				tableRow1.getCell(3).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(3).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getAmortizacao(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(4).setParagraph(paragraph2);
				tableRow1.getCell(4).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(4).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(5).setParagraph(paragraph2);
				tableRow1.getCell(5).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(5).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros().add(p.getAmortizacao()), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(6).setParagraph(paragraph2);
				tableRow1.getCell(6).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(6).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getTxAdm(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(7).setParagraph(paragraph2);
				tableRow1.getCell(7).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(7).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSeguroMIP(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(8).setParagraph(paragraph2);
				tableRow1.getCell(8).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(8).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSeguroDFI(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(9).setParagraph(paragraph2);
				tableRow1.getCell(9).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(9).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getValorParcela(), "R$ ") + " + IPCA");
				indexParcela++;////////////////////////////////////////////////////////////////////////////////
			}
		    
		    geraPaginaContratoII(document, "9DC83E", false);
			table = document.getTableArray(1);			
			CabecalhoAnexo1(table, 0, 1, CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy"));
			CabecalhoAnexo1(table, 1, 1, CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy"));	
			CabecalhoAnexo1(table, 2, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorCredito(), "R$ "));
			CabecalhoAnexo1(table, 2, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosMes(),"") + "%");
			
			CabecalhoAnexo1(table, 3, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorIOF(), "R$ "));
			CabecalhoAnexo1(table, 3, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosAno(),"") + "%");
			
			CabecalhoAnexo1(table, 4, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCustoEmissao(), "R$ "));
			CabecalhoAnexo1(table, 4, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetMes(),"") + "%");
			CabecalhoAnexo1(table, 4, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getVlrImovel(), "R$ "));
			
			CabecalhoAnexo1(table, 5, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorDespesas(), "R$ "));
			CabecalhoAnexo1(table, 5, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetAno(),"") + "%");
			CabecalhoAnexo1(table, 5, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteMIP(), "R$ "));
			
			CabecalhoAnexo1(table, 6, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorLiquidoCredito(), "R$ "));
			CabecalhoAnexo1(table, 6, 4, CommonsUtil.stringValue(
					CommonsUtil.formataValorInteiro(
							DateUtil.getDaysBetweenDates(objetoCcb.getDataDeEmissao(), objetoCcb.getVencimentoUltimaParcelaPagamento()))));
			CabecalhoAnexo1(table, 6, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteDFI(), "R$ "));
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraInstrumentoEmissaoCCI() throws IOException{
		try {
			XWPFDocument document;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")) {
					objetoCcb.setTerceiroGarantidor(true);
				}
			}
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/Instrumento_Emissao_CCI_BMP.docx"));
					
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
				}
			}
			
			int prazoAno = CommonsUtil.intValue(objetoCcb.getPrazo()) / 12;
			String prazoAnoStr = CommonsUtil.stringValue(prazoAno);
			String estado = estadoPorExtenso(objetoCcb.getUfImovel());
						
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);
					            
					            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
								text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
								text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
								
								text = trocaValoresXWPF(text, r, "numeroCCB", objetoCcb.getNumeroCcb());
					            
								text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	
								text = trocaValoresXWPF(text, r, "cpfEmitente", objetoCcb.getCpfEmitente());								
								text = trocaValoresXWPF(text, r, "logradouroEmitente", objetoCcb.getEmitentePrincipal().getPessoa().getEndereco());	
								text = trocaValoresXWPF(text, r, "numeroEmitente", objetoCcb.getEmitentePrincipal().getPessoa().getNumero());	
								text = trocaValoresXWPF(text, r, "complementoEmitente", objetoCcb.getEmitentePrincipal().getPessoa().getComplemento());								
								text = trocaValoresXWPF(text, r, "cepEmitente", objetoCcb.getEmitentePrincipal().getPessoa().getCep());
								text = trocaValoresXWPF(text, r, "cidadeEmitente",objetoCcb.getEmitentePrincipal().getPessoa().getCidade());			
								text = trocaValoresXWPF(text, r, "ufEmitente", objetoCcb.getEmitentePrincipal().getPessoa().getEstado());							
									
								text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());								
				
								text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
								text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
								text = trocaValoresXWPF(text, r, "ufImovel", estado);
								text = trocaValoresXWPF(text, r, "estadoImovel", objetoCcb.getUfImovel());			
								text = trocaValoresXWPF(text, r, "numeroImovel", objetoCcb.getNumeroImovel());
								text = trocaValoresXWPF(text, r, "logradouroRuaImovel", objetoCcb.getLogradouroRuaImovel());
								text = trocaValoresXWPF(text, r, "logradouroNumeroImovel", objetoCcb.getLogradouroNumeroImovel());
								text = trocaValoresXWPF(text, r, "bairroImovel", objetoCcb.getBairroImovel());
								text = trocaValoresXWPF(text, r, "cepImovel", objetoCcb.getCepImovel());

								text = trocaValoresXWPF(text, r, "parcelaDia", objetoCcb.getVencimentoPrimeiraParcelaPagamento().getDate());
								text = trocaValoresXWPF(text, r, "parcelaMes", CommonsUtil.formataMesExtenso(objetoCcb.getVencimentoPrimeiraParcelaPagamento()).toLowerCase());
								text = trocaValoresXWPF(text, r, "parcelaAno", (objetoCcb.getVencimentoPrimeiraParcelaPagamento().getYear() + 1900));
								
								text = trocaValoresXWPF(text, r, "vencimentoDia", objetoCcb.getVencimentoUltimaParcelaPagamento().getDate());
								text = trocaValoresXWPF(text, r, "vencimentoMes", CommonsUtil.formataMesExtenso(objetoCcb.getVencimentoUltimaParcelaPagamento()).toLowerCase());
								text = trocaValoresXWPF(text, r, "vencimentoAno", (objetoCcb.getVencimentoUltimaParcelaPagamento().getYear() + 1900));
								
								text = trocaValoresXWPF(text, r, "prazoAno", prazoAnoStr);
								text = trocaValoresNumeroExtensoXWPF(text, r, "Prazo", prazoAnoStr);
								
								text = trocaValoresXWPF(text, r, "taxaDeJurosMes", objetoCcb.getTaxaDeJurosMes());
								
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());
								
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
							}
						}
					}
				}
			}
		    
		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			            
			            text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
						text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());								
						text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
					}
			    }
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}

	public byte[] geraAnexoII() throws IOException {
		try {
			XWPFDocument document = new XWPFDocument();
			XWPFHeaderFooterPolicy headerFooterPolicy = document.getHeaderFooterPolicy();
			if (headerFooterPolicy == null)
				headerFooterPolicy = document.createHeaderFooterPolicy();

			XWPFHeader header = headerFooterPolicy.createHeader(XWPFHeaderFooterPolicy.DEFAULT);
			XWPFParagraph paragraphHeader = header.createParagraph();
			paragraphHeader.setAlignment(ParagraphAlignment.CENTER);
			XWPFRun runHeader = paragraphHeader.createRun();
			runHeader.addPicture(getClass().getResourceAsStream("/resource/GalleriaBank.png"), 6, "Galleria Bank",
					Units.toEMU(130), Units.toEMU(72));

			geraPaginaContratoII(document, "8880F4", true);

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (JDBCException jdbce) {
		    jdbce.getSQLException().getNextException().printStackTrace();
		} catch (Throwable e) {
			e.printStackTrace();
			e.getCause().printStackTrace();
		} 
		return null;
	}

	public byte[] geraCessao() throws IOException{
		try {
			XWPFDocument document;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")) {
					objetoCcb.setTerceiroGarantidor(true);
				}
			}
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/CESSAO.docx"));
					
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
					participante.setTipoParticipante("DEVEDOR");
				}
			}
			
			for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			            
			            text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
						text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());	
						text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());
						text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());				
						text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
						
						if (text != null && text.contains("ImagemImovel") && filesList.size() > 0) {
							int iImagem = 0;
							for(iImagem = 0; iImagem < filesList.size(); iImagem++) {
								r.addBreak();
								populateFiles(iImagem);
								r.addPicture(bis, fileTypeInt, fileName.toLowerCase(), Units.toEMU(400), Units.toEMU(300));
								r.addBreak();	
							}
							text = trocaValoresXWPF(text, r, "ImagemImovel", "");						
							adicionarEnter(text, r);
						} else if(text != null && text.contains("ImagemImovel") && filesList.size() == 0) {
							text = trocaValoresXWPF(text, r, "ImagemImovel", "");
						}
						
						text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
						text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
						text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
						text = trocaValoresXWPF(text, r, "numeroImovel", objetoCcb.getNumeroImovel());
						
						text = trocaValoresXWPF(text, r, "numeroParcelasPagamento", objetoCcb.getNumeroParcelasPagamento());
						text = trocaValoresNumeroExtensoXWPF(text, r, "NumeroParcelasPagamento", objetoCcb.getNumeroParcelasPagamento());
						text = trocaValoresXWPF(text, r, "vencimentoPrimeiraParcelaPagamento", objetoCcb.getVencimentoPrimeiraParcelaPagamento());
						text = trocaValoresXWPF(text, r, "vencimentoUltimaParcelaPagamento", objetoCcb.getVencimentoUltimaParcelaPagamento());
						
						text = trocaValoresXWPF(text, r, "taxaDeJurosMes", objetoCcb.getTaxaDeJurosMes());
						text = trocaValoresXWPF(text, r, "taxaDeJurosAno", objetoCcb.getTaxaDeJurosAno());
						
						text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
						text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
						text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
						text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());			       
					}
			    }
			}	
								
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraEndossosEmPretoGalleria() throws IOException{
		try {
			XWPFDocument document;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")) {
					objetoCcb.setTerceiroGarantidor(true);
				}
			}	
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/EndossosEmPretoGalleria.docx"));			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}				
				}
			}

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			            text = trocaValoresXWPF(text, r, "emissaoData", objetoCcb.getDataDeEmissao());								
						text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());		            
						text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente().toUpperCase());	
						text = trocaValoresXWPF(text, r, "cpfEmitente", objetoCcb.getCpfEmitente()); 
					}
			    }
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraCartaSplitDinamica() throws IOException{
		try {
			XWPFDocument document = new XWPFDocument();
			XWPFRun run;
			XWPFParagraph paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(100);
			run = paragraph.createRun();
			run.setText("Votorantim/SP, " + objetoCcb.getDataDeEmissao().getDate() + " de "
							+ CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase() + " de "
							+ (objetoCcb.getDataDeEmissao().getYear() + 1900) + ".");
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			XWPFRun run2 = paragraph.createRun();
			XWPFRun run3 = paragraph.createRun();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Ã");
			run.setFontSize(11);
			run.setBold(false);
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getCpfEmitente())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						}
					}
					if(CommonsUtil.semValor(objetoCcb.getCpfEmitente())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCnpj())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
				}
			}
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Galleria Sociedade de CrÃ©dito Direto S.A.");
			run.setFontSize(11);
			run.setBold(true);
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Autorizamos a efetivaÃ§Ã£o de transferÃªncia no valor de ");
			run.setFontSize(11);
			run.setBold(false);
			BigDecimal valorCartaSplit =   objetoCcb.getValorLiquidoCredito().add(objetoCcb.getValorDespesas());
			valorPorExtenso.setNumber(valorCartaSplit);
			run2 = paragraph.createRun();
			run2.setText(CommonsUtil.formataValorMonetario(valorCartaSplit, "R$ ") + " (" + valorPorExtenso.toString() + ")," );
			run2.setFontSize(11);
			run2.setBold(true);
			run = paragraph.createRun();
			run.setText(" conforme dados abaixo, crÃ©dito oriundo da CCI nÂ° " + objetoCcb.getNumeroCcb() + ", datada de " + objetoCcb.getDataDeEmissao().getDate() + " de "
					+ CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase() + " de "
					+ (objetoCcb.getDataDeEmissao().getYear() + 1900) + ".");
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(100);
			run = paragraph.createRun();
			run.setText("Contas a serem creditadas");
			run.setFontSize(11);
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Nome: Galleria Correspondente BancÃ¡rio Eireli");
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			run.setText("CPF/CNPJ: 34.787.885/0001-32");
			run.addCarriageReturn();
			run.setText("Banco: ");
			run2 = paragraph.createRun();
			run2.setText("Banco do Brasil");
			run2.setFontSize(11);
			run2.setBold(true);
			run2.addCarriageReturn();
			run = paragraph.createRun();
			run.setText("AgÃªncia: 1515-6");
			run.addCarriageReturn();
			run.setText("C/C: 131094-1");
			run.addCarriageReturn();
			run.setText("Valor: ");
			run2 = paragraph.createRun();
			if(objetoCcb.getCCBValor().compareTo(BigDecimal.ZERO) > 0) {
				valorPorExtenso.setNumber(valorCartaSplit);
				run2.setText(CommonsUtil.formataValorMonetario(valorCartaSplit, "R$ ")  + " (" + valorPorExtenso.toString() + ") " );
			} else {
				valorPorExtenso.setNumber(objetoCcb.getValorDespesas());
				run2.setText(CommonsUtil.formataValorMonetario(objetoCcb.getValorDespesas(), "R$ ")  + " (" + valorPorExtenso.toString() + ") " );
			}
			run2.setFontSize(11);
			run2.setBold(true);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(100);
			run = paragraph.createRun();
			run.setText("Contas a serem creditadas (conta cliente no contrato Money)");
			run.setFontSize(11);
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Nome: " + objetoCcb.getNomeEmitente().toUpperCase());
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			run.setText("CPF/CNPJ: " + objetoCcb.getCpfEmitente());
			run.addCarriageReturn();
			run.setText("Banco: ");
			run2 = paragraph.createRun();
			run2.setText(objetoCcb.getNomeBanco() + "");
			run2.setFontSize(11);
			run2.setBold(true);
			run2.addCarriageReturn();
			run = paragraph.createRun();
			run.setText("AgÃªncia: " + objetoCcb.getAgencia());
			run.addCarriageReturn();
			run.setText("C/C: " + objetoCcb.getContaCorrente() + " Pix: " + objetoCcb.getPixBanco());
			run.addCarriageReturn();
			run.setText("Valor: ");
			valorPorExtenso.setNumber(objetoCcb.getValorLiquidoCredito());
			run2 = paragraph.createRun();
			if(objetoCcb.getCCBValor().compareTo(BigDecimal.ZERO) > 0) {
				run2.setText("R$ 0,00" + " (Zero reais) " );
			} else {
				run2.setText(CommonsUtil.formataValorMonetario(objetoCcb.getValorLiquidoCredito(), "R$ ")  + " (" + valorPorExtenso.toString() + ") " );
			}
			
			run2.setFontSize(11);
			run2.setBold(true);
			run3 = paragraph.createRun();
			run3.setText("* Credito serÃ¡ efetuado somente no registro da alienaÃ§Ã£o FiduciÃ¡ria da CCI "
					+ objetoCcb.getNumeroCcb() + " da matricula " 
					+ objetoCcb.getNumeroImovel()  + " do " 
					+ objetoCcb.getCartorioImovel() + "Â° RI de " 
					+ objetoCcb.getCidadeImovel()  + " - " 
					+ objetoCcb.getUfImovel() );
			run3.setFontSize(11);
			run3.setColor("ff0000");
			run3.setBold(true);		
			run3.addCarriageReturn();
			run3.addCarriageReturn();			
			run3.addCarriageReturn();			
			run3.addCarriageReturn();			
			run3.addCarriageReturn();			
			run3.addCarriageReturn();			
			run3.addCarriageReturn();
		
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.CENTER);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("_____________________________________________________________________________");
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			run = paragraph.createRun();
			run.setText("NOME/RAZÃO SOCIAL: " + objetoCcb.getNomeEmitente().toUpperCase());
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			run = paragraph.createRun();
			run.setText("CPF/CNPJ: " + objetoCcb.getCpfEmitente());
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			run = paragraph.createRun();
			run.setText("(EMITENTE)");
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();
			
			if(!CommonsUtil.semValor(objetoCcb.getObjetoContratoCobranca())) {
				ContratoCobranca contrato = objetoCcb.getObjetoContratoCobranca();
				//this.objetoContratoCobranca = cDao.findById(objetoCcb.getObjetoContratoCobranca().getId());
				
				contrato.setValorCartaSplit(objetoCcb.getValorLiquidoCredito());
				contrato.setNomeBancarioCartaSplit(objetoCcb.getNomeEmitente());
				contrato.setCpfCnpjBancarioCartaSplit(objetoCcb.getCpfEmitente());
				contrato.setBancoBancarioCartaSplit(objetoCcb.getNomeBanco());
				contrato.setAgenciaBancarioCartaSplit(objetoCcb.getAgencia());
				contrato.setContaBancarioCartaSplit(objetoCcb.getContaCorrente());		
				
				//cDao.merge(contrato);
				//objetoCcb.setObjetoContratoCobranca(contrato);	
			}
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraDeclaracaoNaoUniaoEstavel(CcbParticipantes participante) throws IOException{
		try {
			//PagadorRecebedor pagador
			XWPFDocument document;
			XWPFRun run;
			XWPFRun run2;
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/DeclaracaoNaoUniaoEstavel.docx"));			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			run = document.getParagraphs().get(1).getRuns().get(1);
			document.getParagraphs().get(1).setAlignment(ParagraphAlignment.BOTH);
			//run.setFontSize(12);
			run.setText(participante.getPessoa().getNome().toUpperCase() + ", ");
			run.setBold(true);
			run.setCharacterSpacing(1*10);
			run2 = document.getParagraphs().get(1).insertNewRun(2);
			//run2.setFontFamily("Calibri");
			geraParagrafoPF(run2, participante);
			//run2.addCarriageReturn();

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            }				            
			            text = trocaValoresXWPF(text, r, "cidadeEmitente", (participante.getPessoa().getCidade()));    
			            text = trocaValoresXWPF(text, r, "ufEmitente", (participante.getPessoa().getEstado()));			            
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
						text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
			            text = trocaValoresXWPF(text, r, "cpfEmitente", (participante.getPessoa().getCpf()));
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());						
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
							}
						}
					}
				}
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraDeclaracaoUniaoEstavel(CcbParticipantes participante) throws IOException{
		try {
			//PagadorRecebedor pagador
			XWPFDocument document;
			XWPFRun run;
			XWPFRun run2;
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/DeclaracaoUniaoEstavel.docx"));			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			int paragraph = 4;
			run = document.getParagraphs().get(paragraph).insertNewRun(1);
			document.getParagraphs().get(paragraph).setAlignment(ParagraphAlignment.BOTH);
			//run.setFontSize(12);
			run.setText(participante.getPessoa().getNome().toUpperCase() + ", ");
			run.setBold(true);
			run.setCharacterSpacing(1*10);
			run2 = document.getParagraphs().get(paragraph).insertNewRun(2);
			run2.setFontSize(11);
			String filho;
			String nacionalidade = participante.getNacionalidade();
			String estadoCivilStr = "";
			PagadorRecebedor pessoa = participante.getPessoa();

			if (participante.isFeminino()) {
				if (CommonsUtil.mesmoValor(participante.getNacionalidade(), "brasileiro")) {
					nacionalidade = "brasileira";
				}
				filho = "filha";
				if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SOLTEIRO")) {
					estadoCivilStr = "solteira";
				} else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "VIÃVO")) {
					estadoCivilStr = "viÃºva";
				} else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "DIVORCIADO")) {
					estadoCivilStr = "divorciada";
				} else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SEPARADO")) {
					estadoCivilStr = "separada";
				} else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SEPARADO JUDICIALMENTE")) {
					estadoCivilStr = "separada judicialmente";
				} 
			} else {
				estadoCivilStr = pessoa.getEstadocivil().toLowerCase();
				filho = "filho";
			}
			estadoCivilStr = estadoCivilStr + " convivente em uniÃ£o estÃ¡vel";
			
			PagadorRecebedorDao pagadorDao = new PagadorRecebedorDao();
			PagadorRecebedor conjuge = pagadorDao.findByFilter("cpf", participante.getPessoa().getCpfConjuge()).get(0);
			CcbParticipantesDao partDao = new CcbParticipantesDao();
			CcbParticipantes participanteConjuge = partDao.findByFilter("pessoa", conjuge).get(0);
			String filhoConjuge;
			String nacionalidadeConjuge = participanteConjuge.getNacionalidade();
			String estadoCivilStrConjuge = "";
			if (participanteConjuge.isFeminino()) {
				if (CommonsUtil.mesmoValor(participanteConjuge.getNacionalidade(), "brasileiro")) {
					nacionalidadeConjuge = "brasileira";
				}
				filhoConjuge = "filha";
				if (CommonsUtil.mesmoValor(conjuge.getEstadocivil(), "SOLTEIRO")) {
					estadoCivilStrConjuge = "solteira";
				} else if (CommonsUtil.mesmoValor(conjuge.getEstadocivil(), "VIÃVO")) {
					estadoCivilStrConjuge = "viÃºva";
				} else if (CommonsUtil.mesmoValor(conjuge.getEstadocivil(), "DIVORCIADO")) {
					estadoCivilStrConjuge = "divorciada";
				} else if (CommonsUtil.mesmoValor(conjuge.getEstadocivil(), "SEPARADO")) {
					estadoCivilStrConjuge = "separada";
				} else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SEPARADO JUDICIALMENTE")) {
					estadoCivilStrConjuge = "separada judicialmente";
				} 
			} else {
				estadoCivilStrConjuge = conjuge.getEstadocivil().toLowerCase();
				filhoConjuge = "filho";
			}
			estadoCivilStrConjuge = estadoCivilStrConjuge + " convivente em uniÃ£o estÃ¡vel";
			
			
			run2.setText( filho + " de " + pessoa.getNomeMae() + " e " + pessoa.getNomePai() + ", "
					+ nacionalidade + ", "+ pessoa.getAtividade() + ", "+ estadoCivilStr + ","
					+ " portador(a) da CÃ©dula de Identidade RG nÂº "+ pessoa.getRg() + " " + pessoa.getOrgaoEmissorRG() + ","
					+ " inscrito(a) no CPF/MF sob o nÂº "+ pessoa.getCpf() +", endereÃ§o eletrÃ´nico: "+ pessoa.getEmail() +" e ");	
			
			run = document.getParagraphs().get(paragraph).insertNewRun(3);
			run.setFontSize(11);
			run.setText(conjuge.getNome().toUpperCase() + ", ");
			run.setBold(true);
			run.setCharacterSpacing(1*10);
			
			run2 = document.getParagraphs().get(paragraph).insertNewRun(4);
			run2.setFontSize(11);
			run2.setText( filhoConjuge + " de " + conjuge.getNomeMae() + " e " + conjuge.getNomePai() + ", "
					+ nacionalidadeConjuge + ", "+ conjuge.getAtividade() + ", "+ estadoCivilStrConjuge + ","
					+ " portador(a) da CÃ©dula de Identidade RG nÂº "+ conjuge.getRg() + " " + conjuge.getOrgaoEmissorRG() + ","
					+ " inscrito(a) no CPF/MF sob o nÂº "+ conjuge.getCpf() +", endereÃ§o eletrÃ´nico: "+ conjuge.getEmail() 
					+ ", residentes e domiciliados Ã  "+ pessoa.getEndereco() +", nÂº "+ pessoa.getNumero() +", "
					+ pessoa.getComplemento() + ", "+ pessoa.getBairro() + ", " 
					+ pessoa.getCidade()+"/"+pessoa.getEstado()+", CEP "+ pessoa.getCep()+"; ");
			
			////
		

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            }			            	            
			            
			            text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
						text = trocaValoresXWPF(text, r, "nomeConjuge", (participante.getPessoa().getNomeConjuge()));
						text = trocaValoresXWPF(text, r, "cpfEmitente", (participante.getPessoa().getCpf()));    
						text = trocaValoresXWPF(text, r, "cpfConjuge", (participante.getPessoa().getCpfConjuge()));
							            
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
			         
			            text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
						text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
						text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());						
						text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
						text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
						text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());						
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
							}
						}
					}
				}
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}

	public byte[] geraDeclaracaoDestinacaoRecursos(CcbParticipantes participante) throws IOException{
		try {
			//PagadorRecebedor pagador
			XWPFDocument document;
			XWPFRun run;
			XWPFRun run2;
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/DeclaracaoDeCienciaDestinacaoDeRecurso.docx"));			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			run = document.getParagraphs().get(5).insertNewRun(0);
			document.getParagraphs().get(5).setAlignment(ParagraphAlignment.BOTH);
			//run.setFontSize(12);
			run.setText(participante.getPessoa().getNome().trim().toUpperCase() + ", ");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.NONE);
			run.setCharacterSpacing(1*10);
			run.setFontSize(11);
			run2 = document.getParagraphs().get(5).insertNewRun(1);
			//run2.setFontFamily("Calibri");
			geraParagrafoPF(run2, participante);
			run2.setUnderline(UnderlinePatterns.NONE);
			run2.setFontSize(11);
			run2.setText(run2.getText(0).replace(';', ','));
			//run2.addCarriageReturn();

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            }			           
			            
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
						text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
			            text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());		          
			            text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
						text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
						text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
						text = trocaValoresXWPF(text, r, "numeroMatricula", objetoCcb.getNumeroImovel());
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
							}
						}
					}
				}
			}
		    
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraTermoResponsabilidadeAnuenciaPaju(CcbParticipantes participante) throws IOException{
		try {
			//PagadorRecebedor pagador
			XWPFDocument document;
			XWPFRun run;
			XWPFRun run2;
			int fontSize = 10;
			
			if(CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "PR") || CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "ParanÃ¡")) {
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/TermoDeResponsabilidadeAnuenciaPajuPR.docx"));
				fontSize = 12;
			} else if(CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "RJ") || CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "Rio de Janeiro")) {
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/TermoDeResponsabilidadeAnuenciaPajuRJ.docx"));
				fontSize = 11;
			} else {
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/TermoDeResponsabilidadeAnuenciaPaju.docx"));
				fontSize = 10;
			}
						
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			int paragraph = 2;
			run = document.getParagraphs().get(paragraph).insertNewRun(0);
			document.getParagraphs().get(paragraph).setAlignment(ParagraphAlignment.BOTH);
			//run.setFontSize(12);
			run.setText(participante.getPessoa().getNome().trim().toUpperCase() + ", ");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.NONE);
			run.setCharacterSpacing(1*10);
			run.setFontSize(fontSize);
			run2 = document.getParagraphs().get(paragraph).insertNewRun(1);
			run = document.getParagraphs().get(paragraph).insertNewRun(2);
			//run2.setFontFamily("Calibri");
			geraParagrafoPF(run2, participante);
			run2.setUnderline(UnderlinePatterns.NONE);
			run2.setFontSize(fontSize);
			run2.setText(run2.getText(0).replace(';', ','));
			//run2.addCarriageReturn();

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            }			           
			            
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
						text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
			            text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());		          
			            text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
						text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
						text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
						text = trocaValoresXWPF(text, r, "numeroMatricula", objetoCcb.getNumeroImovel());
						
						text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
						text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
						text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());						
						text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
						text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
						text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
						
						Date pajuGerado = objetoCcb.getObjetoContratoCobranca().getDataPajuComentado();
						
						text = trocaValoresXWPF(text, r, "pajuDia", pajuGerado.getDate());
						text = trocaValoresXWPF(text, r, "pajuMes", CommonsUtil.formataMesExtenso(pajuGerado).toLowerCase());
						text = trocaValoresXWPF(text, r, "pajuAno", (pajuGerado.getYear() + 1900));
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
							}
						}
					}
				}
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraTermoPajuRJ_PR(CcbParticipantes participante) throws IOException{
		try {
			//PagadorRecebedor pagador
			XWPFDocument document;
			XWPFRun run;
			XWPFRun run2;
			int fontSize = 10;
			
			if(CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "PR") || CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "ParanÃ¡")) {
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/TermoDeResponsabilidadeAnuenciaPajuPR.docx"));
				fontSize = 12;
			} else if(CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "RJ") || CommonsUtil.mesmoValor(objetoCcb.getUfImovel(), "Rio de Janeiro")) {
				document = new XWPFDocument(getClass().getResourceAsStream("/resource/TermoDeResponsabilidadeAnuenciaPajuRJ.docx"));
				fontSize = 11;
			} else {
				return null;
			}
						
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			int paragraph = 2;
			run = document.getParagraphs().get(paragraph).insertNewRun(0);
			document.getParagraphs().get(paragraph).setAlignment(ParagraphAlignment.BOTH);
			//run.setFontSize(12);
			run.setText(participante.getPessoa().getNome().trim().toUpperCase() + ", ");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.NONE);
			run.setCharacterSpacing(1*10);
			run.setFontSize(fontSize);
			run2 = document.getParagraphs().get(paragraph).insertNewRun(1);
			run = document.getParagraphs().get(paragraph).insertNewRun(2);
			//run2.setFontFamily("Calibri");
			geraParagrafoPF(run2, participante);
			run2.setUnderline(UnderlinePatterns.NONE);
			run2.setFontSize(fontSize);
			run2.setText(run2.getText(0).replace(';', ','));
			//run2.addCarriageReturn();

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            }			           
			            
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
						text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
			            text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());		          
			            text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
						text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
						text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
						text = trocaValoresXWPF(text, r, "numeroMatricula", objetoCcb.getNumeroImovel());
						
						text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
						text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
						text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());						
						text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
						text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
						text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
						
						Date pajuGerado = objetoCcb.getObjetoContratoCobranca().getDataPajuComentado();
						
						text = trocaValoresXWPF(text, r, "pajuDia", pajuGerado.getDate());
						text = trocaValoresXWPF(text, r, "pajuMes", CommonsUtil.formataMesExtenso(pajuGerado).toLowerCase());
						text = trocaValoresXWPF(text, r, "pajuAno", (pajuGerado.getYear() + 1900));
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
							}
						}
					}
				}
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraTermoIncomunicabilidadeImovel(CcbParticipantes participante) throws IOException{
		try {
			//PagadorRecebedor pagador
			XWPFDocument document;
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/TermoDeIncomunicabilidadeImovel.docx"));

			String tipoUniao = ""; //sociedade conjugal/uniÃ£o estÃ¡vel 
			String pronome = ""; //minha/meu
			String tipoConjuge = ""; //cÃ´njuge/companheiro
			
			if(CommonsUtil.mesmoValor(participante.getPessoa().getSexoConjuge(), "FEMININO")) {
				pronome = "minha";
				tipoConjuge = "companheira";
			} else {
				pronome = "meu";
				tipoConjuge = "companheiro";
			}
			
			if(participante.isUniaoEstavel()) {
				tipoUniao = "uniÃ£o estÃ¡vel";
			} else {
				tipoUniao = "sociedade conjugal";
				tipoConjuge = "cÃ´njuge";
			}
			
		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            } 						
						text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
						text = trocaValoresXWPF(text, r, "cpfEmitente", (participante.getPessoa().getCpf()));    
			            text = trocaValoresXWPF(text, r, "dataCompraImovel", objetoCcb.getDataCompraImovel());
			            text = trocaValoresXWPF(text, r, "numeroMatricula", objetoCcb.getNumeroImovel());		          
			            text = trocaValoresXWPF(text, r, "cartorioImovel", objetoCcb.getCartorioImovel());
						text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
						text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
						
						text = trocaValoresXWPF(text, r, "tipoUniao", tipoUniao);
						text = trocaValoresXWPF(text, r, "dataCasamento", participante.getPessoa().getDataCasamento());
						text = trocaValoresXWPF(text, r, "pronome", pronome);
						text = trocaValoresXWPF(text, r, "tipoConjuge", tipoConjuge);
						
						text = trocaValoresXWPF(text, r, "nomeConjuge", participante.getPessoa().getNomeConjuge());
						text = trocaValoresXWPF(text, r, "cpfConjuge", participante.getPessoa().getCpfConjuge());
						
						text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
							}
						}
					}
				}
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraFichaPPE() throws IOException{
		try {			
			InputStream is = getClass().getResourceAsStream("/resource/Ficha PPE.pdf");
			byte[] bytes = IOUtils.toByteArray(is);
			return bytes;
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraFichaPLDeFT() throws IOException{
		try {
			InputStream is = getClass().getResourceAsStream("/resource/Ficha PLD e FT.pdf");
			byte[] bytes = IOUtils.toByteArray(is);
			return bytes;
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}

	public byte[] geraFichaCadastroNova(PagadorRecebedor pagador) throws IOException{
		ImpressoesPDFMB impressaoMb = new ImpressoesPDFMB();
		return impressaoMb.geraPdfCadastroPagadorRecebedorNovo(pagador);
	}
	
	public byte[] geraFichaCadastro(PagadorRecebedor pagador) throws IOException{
		ImpressoesPDFMB impressaoMb = new ImpressoesPDFMB();
		return impressaoMb.geraPdfCadastroPagadorRecebedor(pagador);
	}
	
	public byte[] geraAverbacao(CcbParticipantes participante) throws IOException{
		try {
			
			//PagadorRecebedor pagador
			XWPFDocument document;
			XWPFRun run;
			XWPFRun run2;
			List<String> documentos = new ArrayList<String>();
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/Averbacao.docx"));			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			run = document.getParagraphs().get(2).getRuns().get(2);
			document.getParagraphs().get(2).setAlignment(ParagraphAlignment.BOTH);
			run.setFontSize(12);
			String runText = run.getText(0);
			trocaValoresXWPF(runText, run, "paragrafoPF", "");
			run.setText(participante.getPessoa().getNome().toUpperCase() + ", ");
			run.setBold(true);
			run.setCharacterSpacing(1*10);
			run2 = document.getParagraphs().get(2).insertNewRun(3);
			run2.setFontSize(12);
			geraParagrafoPF(run2, participante);
			run2.getText(0).replace("; ", "");
			runText = run2.getText(0);
			trocaValoresXWPF(runText, run2, "; ", "");
			
			int index = 6;
			boolean inicio = true;
			for(Averbacao averbacao : participante.getPessoa().getListAverbacao()) {
				if(!documentos.contains(averbacao.getDocumento())) {
					documentos.add(averbacao.getDocumento());
				}
				run = document.getParagraphs().get(5).insertNewRun(index);
				String informacaoString = "";
				if(CommonsUtil.mesmoValor(averbacao.getInformacao(), "CNH")) {
					informacaoString = "o nÂº da CÃ©dula de Identidade CNH";
				} else if(CommonsUtil.mesmoValor(averbacao.getInformacao(), "RG")) {
					informacaoString = "o nÂº da CÃ©dula de Identidade RG";
				} else if(CommonsUtil.mesmoValor(averbacao.getInformacao(), "Estado Civil")) {
					informacaoString = "o estado civil";
				} else if(CommonsUtil.mesmoValor(averbacao.getInformacao(), "Nome")) {
					informacaoString = "o nome do proprietÃ¡rio";
				}
				if(CommonsUtil.mesmoValor(averbacao.getTipoAverbacao(), "INCLUIR")) {
					informacaoString = informacaoString + " nÂ° ";
				} else if(CommonsUtil.mesmoValor(averbacao.getTipoAverbacao(), "ALTERAR")) {
					informacaoString = informacaoString + ", onde se lia ";
				}
				
				if(!inicio) {
					run2 = document.getParagraphs().get(5).insertNewRun(index);
					run2.setText(" e ");
					index++;
				} else {
					inicio = false;
				}
				run.setText(averbacao.getTipoAverbacao() + " ");
				run.setBold(true);
				index++;
				run2 = document.getParagraphs().get(5).insertNewRun(index);
				run2.setBold(false);
				run2.setText(informacaoString);
				if(CommonsUtil.mesmoValor(averbacao.getTipoAverbacao(), "INCLUIR")) {
					index++;
					run = document.getParagraphs().get(5).insertNewRun(index);
					run.setText(averbacao.getTexto1() + ",");
				} else {
					index++;
					run = document.getParagraphs().get(5).insertNewRun(index);
					run.setText(averbacao.getTexto1() + ", passarÃ¡ a CONSTAR " + averbacao.getTexto2() + ",");
					run.setBold(true);
				}
				index++;
			}
			
			XWPFParagraph paragrafo = document.getParagraphs().get(6);
			for(String documento : documentos) {
				run = paragrafo.createRun();
				if(CommonsUtil.mesmoValor(documento, "RG"))
					run.setText("- CÃ³pia do " + documento);
				else
					run.setText("- CÃ³pia da " + documento);
				run.addCarriageReturn();
			}

		    for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);		            
			            if(CommonsUtil.semValor(text)) {
			            	continue;
			            }			            
			            text = trocaValoresXWPF(text, r, "cidadeEmitente", (participante.getPessoa().getCidade()));    
			            text = trocaValoresXWPF(text, r, "ufEmitente", (participante.getPessoa().getEstado()));			            
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));						
						text = trocaValoresXWPF(text, r, "nomeEmitente", (participante.getPessoa().getNome()));    
			            text = trocaValoresXWPF(text, r, "cpfEmitente", (participante.getPessoa().getCpf()));
			            
			            text = trocaValoresXWPF(text, r, "cidadeImovel", objetoCcb.getCidadeImovel());
						text = trocaValoresXWPF(text, r, "ufImovel", objetoCcb.getUfImovel());
						text = trocaValoresXWPF(text, r, "numeroImovel", objetoCcb.getNumeroImovel());
					}
			    }
			}
		    
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
					            String text = r.getText(0);					            
					            if(CommonsUtil.semValor(text)) {
					            	continue;
					            }				         
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());						
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());		
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
							}
						}
					}
				}
			}
		   
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraAditamentoCartaDeDesconto() throws IOException{
		try {
			XWPFDocument document;	
			XWPFRun run;
			XWPFRun run2;
			XWPFRun run3;
			XWPFTable table;
			XWPFTableRow tableRow1;
			XWPFTableRow tableRow2;
			int quadroResumo = 1;
			int anexo1Cabecalho = 2;
			int anexo1 = 3;
			int anexo2 = 4;
			int assinatura = 5;
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")
						|| CommonsUtil.mesmoValor(participante.getTipoParticipante(), "DEVEDOR FIDUCIANTE") ) {
					participante.setTipoParticipante("DEVEDOR FIDUCIANTE");
				} 
			}
			
			document = new XWPFDocument(getClass().getResourceAsStream("/resource/AditamentoCartaDesconto.DOCX"));
			
			CTFonts fonts = CTFonts.Factory.newInstance();
			fonts.setHAnsi("Calibri");
			fonts.setAscii("Calibri");
			fonts.setEastAsia("Calibri");
			fonts.setCs("Calibri");
			document.getStyles().setDefaultFonts(fonts);
			document.getStyle().getDocDefaults().getRPrDefault().getRPr().setRFonts(fonts);
			
			XWPFRun participantesCci = null;
			XWPFRun criarAnexoII = null;
			XWPFRun paragafo1AnexoII = null;
			XWPFRun paragafo2AnexoII = null;
			
			Date dataAditamento = DateUtil.gerarDataHoje();
			
			for (XWPFParagraph p : document.getParagraphs()) {
				List<XWPFRun> runs = p.getRuns();
			    if (runs != null) {  	
			    	for (XWPFRun r : runs) {
			            String text = r.getText(0);
			             		
			            text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
						text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
						text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
						
						text = trocaValoresXWPF(text, r, "aditamentoDia", dataAditamento.getDate());
						text = trocaValoresXWPF(text, r, "aditamentoMes", CommonsUtil.formataMesExtenso(dataAditamento).toLowerCase());
						text = trocaValoresXWPF(text, r, "aditamentoAno", (dataAditamento.getYear() + 1900));

						text = trocaValoresXWPF(text, r, "numeroCCB", objetoCcb.getNumeroCcb());
						
						text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
						text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());
						
						if (text != null && text.contains("participantesCci")) {
							text = text.replace("participantesCci", "");
							r.setText(text, 0);
							participantesCci = r;
						}
						
						if (text != null && text.contains("criarAnexoII")) {
							text = text.replace("criarAnexoII", "");
							r.setText(text, 0);
							criarAnexoII = r;
						}
						if (text != null && text.contains("paragrafoAnexoII")) {
							text = text.replace("paragrafoAnexoII", "");
							r.setText(text, 0);
							paragafo1AnexoII = r;
						}
						if (text != null && text.contains("paragrafo2AnexoII")) {
							text = text.replace("paragrafo2AnexoII", "");
							r.setText(text, 0);
							paragafo2AnexoII = r;
						}
			        }
			    }
			}	
			
			XWPFParagraph paragraph = participantesCci.getParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			int iParticipante = 0;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {										
				run = paragraph.createRun();	
				run.addBreak();
				run.setFontSize(12);
				run.setText(RomanNumerals(iParticipante + 2) + " - ");
				run.setBold(true);
				run2 = paragraph.createRun();
				run.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
				//run2.setFontFamily("Calibri");
				if (!participante.isEmpresa()) {
					geraParagrafoPF(run2, participante);
					run2.addCarriageReturn();
				} else {
					run2.setFontSize(12);
					PagadorRecebedor pessoa = participante.getPessoa();
					String socios = "";
					if (participante.getSocios().size() > 1) {
						socios = "pelos seus sÃ³cios, ";
					} else if(participante.getSocios().size() > 0){
						if (participante.getSocios().iterator().next().isFeminino()) {
							socios = "pela sua Ãºnica sÃ³cia, ";
						} else {
							socios = "pelo seu Ãºnico sÃ³cio, ";
						}
					} else {
						socios = "";
					}
					run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
							+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
							+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
							+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
							+ "; neste ato representada " + socios);
					for (CcbParticipantes sociosParticipante : participante.getSocios()) {
						XWPFRun runSocios = paragraph.createRun();
						runSocios.setFontSize(12);
						runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
						runSocios.setBold(true);
						XWPFRun runSociosNome = paragraph.createRun();
						geraParagrafoPF(runSociosNome, sociosParticipante);
						runSociosNome.addCarriageReturn();
					}
				}									
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
					if(CommonsUtil.semValor(objetoCcb.getTipoPessoaEmitente())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setTipoPessoaEmitente("PF");
						} else {
							objetoCcb.setTipoPessoaEmitente("PJ");
						}
					}
					
					participante.setTipoParticipante("DEVEDOR FIDUCIANTE");
					objetoCcb.setTipoParticipanteEmitente("DEVEDOR FIDUCIANTE");
				}
				run3 = paragraph.createRun();	
				run3.setFontSize(12);
				run3.setText(" (â" + participante.getTipoParticipante() + "â)");
				run3.setBold(true);
				run3.addBreak();
				iParticipante++;
			}
						
		    for (XWPFTable tbl : document.getTables()) {
				for (XWPFTableRow row : tbl.getRows()) {
					for (XWPFTableCell cell : row.getTableCells()) {
						for (XWPFParagraph p : cell.getParagraphs()) {
							for (XWPFRun r : p.getRuns()) {
								String text = r.getText(0);										
								
								text = trocaValoresXWPFCci(text, r, "valorCredito", objetoCcb.getValorCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorCredito", objetoCcb.getValorCredito());									
								text = trocaValoresXWPFCci(text, r, "valorLiquidoCredito", objetoCcb.getValorLiquidoCredito(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorLiquidoCredito", objetoCcb.getValorLiquidoCredito());							
								text = trocaValoresXWPFCci(text, r, "valorDespesas", objetoCcb.getValorDespesas(), "R$ ");
								text = trocaValoresDinheiroExtensoXWPF(text, r, "ValorDespesas", objetoCcb.getValorDespesas());		
								
								text = trocaValoresXWPF(text, r, "serieCcb", objetoCcb.getSerieCcb());
								text = trocaValoresXWPF(text, r, "numeroCCI", objetoCcb.getNumeroCcb());
								text = trocaValoresXWPF(text, r, "numeroCCB", objetoCcb.getNumeroCcb());
								
								text = trocaValoresXWPF(text, r, "emissaoDia", objetoCcb.getDataDeEmissao().getDate());
								text = trocaValoresXWPF(text, r, "emissaoMes", CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
								text = trocaValoresXWPF(text, r, "emissaoAno", (objetoCcb.getDataDeEmissao().getYear() + 1900));
									 		
								
								text = trocaValoresXWPF(text, r, "nomeEmitente", objetoCcb.getNomeEmitente());
								
								text = trocaValoresXWPF(text, r, "nomeTestemunha1", objetoCcb.getNomeTestemunha1());
								text = trocaValoresXWPF(text, r, "cpfTestemunha1", objetoCcb.getCpfTestemunha1());
								text = trocaValoresXWPF(text, r, "rgTestemunha1", objetoCcb.getRgTestemunha1());								
								text = trocaValoresXWPF(text, r, "nomeTestemunha2", objetoCcb.getNomeTestemunha2());
								text = trocaValoresXWPF(text, r, "cpfTestemunha2", objetoCcb.getCpfTestemunha2());
								text = trocaValoresXWPF(text, r, "rgTestemunha2", objetoCcb.getRgTestemunha2());
							}
						}
					}
				}
			}
		    
		    
		    tableRow2 = document.getTableArray(assinatura).getRow(1);

		    paragraph = document.createParagraph();
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			paragraph.setAlignment(ParagraphAlignment.LEFT);
			if (objetoCcb.getListaParticipantes().size() > 1) {
				tableRow2.getCell(0).setParagraph(paragraph);
				tableRow2.getCell(1).setParagraph(paragraph);
				@SuppressWarnings("unused")
				int qtdePessoasEsquerdo = 0;
				for (int iPartTab = 0; iPartTab < objetoCcb.getListaParticipantes().size(); iPartTab++) {
					CcbParticipantes participante = objetoCcb.getListaParticipantes().get(iPartTab);
					if(CommonsUtil.mesmoValor(participante, objetoCcb.getEmitentePrincipal()))
						continue;
					int cell = 0;
					if (qtdePessoasEsquerdo == 0) {
						cell = 0;
						qtdePessoasEsquerdo++;
					} else {
						cell = 1;
						qtdePessoasEsquerdo--;
					}
					run = tableRow2.getCell(cell).getParagraphArray(0).createRun();
					run.addBreak();
					run.setFontSize(12);
					run.setText("____________________________________   ");
					run.setBold(false);
					run.addBreak();

					run2 = tableRow2.getCell(cell).getParagraphArray(0).createRun();
					run2.setFontSize(12);
					run2.setText(participante.getPessoa().getNome());
					run2.setBold(true);
					run2.addBreak();

					run3 = tableRow2.getCell(cell).getParagraphArray(0).createRun();
					run3.setFontSize(12);
					run3.setText(participante.getTipoParticipante());
					run3.setBold(false);
					run3.addBreak();
				}
			}
			
			int indexParcela = 1;
			XWPFParagraph paragraph1 = document.createParagraph();
			paragraph1.setAlignment(ParagraphAlignment.CENTER);
			paragraph1.setSpacingBefore(0);
			paragraph1.setSpacingAfter(0);
			
			XWPFParagraph paragraph2 = document.createParagraph();
			paragraph2.setAlignment(ParagraphAlignment.RIGHT);
			paragraph2.setSpacingBefore(0);
			paragraph2.setSpacingAfter(0);
			
			int fontSize = 7;
			for(SimulacaoDetalheVO p : simulador.getParcelas()) {
				table = document.getTableArray(anexo1);
				table.insertNewTableRow(indexParcela);
				tableRow1 = table.getRow(indexParcela);
				tableRow1.createCell();
				tableRow1.getCell(0).setParagraph(paragraph1);
				tableRow1.getCell(0).getCTTc().addNewTcPr().addNewTcBorders();
				tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(p.getNumeroParcela().toString());
				tableRow1.createCell();
				tableRow1.getCell(1).setParagraph(paragraph2);
				tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataData(DateUtil.adicionarPeriodo(simulador.getDataSimulacao(), p.getNumeroParcela().intValue(), Calendar.MONTH), "dd/MM/yyyy"));
				tableRow1.createCell();
				tableRow1.getCell(2).setParagraph(paragraph2);
				tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(2).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getSaldoDevedorInicial(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(3).setParagraph(paragraph2);
				tableRow1.getCell(3).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(3).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getAmortizacao(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(4).setParagraph(paragraph2);
				tableRow1.getCell(4).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(4).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(5).setParagraph(paragraph2);
				tableRow1.getCell(5).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(5).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getJuros().add(p.getAmortizacao()), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(6).setParagraph(paragraph2);
				tableRow1.getCell(6).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(6).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCci(p.getTxAdm(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(7).setParagraph(paragraph2);
				tableRow1.getCell(7).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(7).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCciArredondado(p.getSeguroMIP(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(8).setParagraph(paragraph2);
				tableRow1.getCell(8).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(8).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCciArredondado(p.getSeguroDFI(), "R$ "));
				tableRow1.createCell();
				tableRow1.getCell(9).setParagraph(paragraph2);
				tableRow1.getCell(9).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
				run = tableRow1.getCell(9).getParagraphArray(0).createRun();
				run.setFontSize(fontSize);
				run.setFontFamily("Calibri");
				run.setText(CommonsUtil.formataValorMonetarioCciArredondado(p.getValorParcela(), "R$ ") + " + IPCA");
				indexParcela++;////////////////////////////////////////////////////////////////////////////////
			}
			
			table = document.getTableArray(anexo1Cabecalho);			
			CabecalhoAnexo1(table, 0, 1, CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy"));
			CabecalhoAnexo1(table, 1, 1, CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy"));	
			CabecalhoAnexo1(table, 2, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorCredito(), "R$ "));
			CabecalhoAnexo1(table, 2, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosMes(),"") + "%");
			
			CabecalhoAnexo1(table, 3, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorIOF(), "R$ "));
			CabecalhoAnexo1(table, 3, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getTaxaDeJurosAno(),"") + "%");
			
			CabecalhoAnexo1(table, 4, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCustoEmissao(), "R$ "));
			CabecalhoAnexo1(table, 4, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetMes(),"") + "%");
			CabecalhoAnexo1(table, 4, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getVlrImovel(), "R$ "));
			
			CabecalhoAnexo1(table, 5, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorDespesas(), "R$ "));
			CabecalhoAnexo1(table, 5, 4, CommonsUtil.formataValorMonetarioCci(objetoCcb.getCetAno(),"") + "%");
			CabecalhoAnexo1(table, 5, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteMIP(), "R$ "));
			
			CabecalhoAnexo1(table, 6, 1, CommonsUtil.formataValorMonetarioCci(objetoCcb.getValorLiquidoCredito(), "R$ "));
			CabecalhoAnexo1(table, 6, 4, CommonsUtil.stringValue(
					CommonsUtil.formataValorInteiro(
							DateUtil.getDaysBetweenDates(objetoCcb.getDataDeEmissao(), objetoCcb.getVencimentoUltimaParcelaPagamento()))));
			CabecalhoAnexo1(table, 6, 7, CommonsUtil.formataValorMonetarioCci(objetoCcb.getMontanteDFI(), "R$ "));
			
			geraPaginaContratoII(document, "9DC83E", false,
					criarAnexoII.getParagraph(), 
					paragafo1AnexoII.getParagraph(), 
					paragafo2AnexoII.getParagraph());
			
			
			paragraph = document.createParagraph();
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			paragraph.setAlignment(ParagraphAlignment.LEFT);
			
			XWPFTable tableAnexo2 = document.getTableArray(document.getTables().size() - 1);
			document.setTable(anexo2, tableAnexo2);
			for(int i = 0; i < document.getBodyElements().size(); i++) {
				if(CommonsUtil.mesmoValor(document.getBodyElements().get(i), tableAnexo2)) {
					document.removeBodyElement(i);
					break;
				}
			}
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraDownloadByteArray(byte[] file, String fileName) throws JRException, IOException {
		final GeradorRelatorioDownloadCliente gerador = new GeradorRelatorioDownloadCliente(FacesContext.getCurrentInstance());
		String nomeSemvirgula = objetoCcb.getNomeEmitente();
		if(nomeSemvirgula.contains(",")) {
			nomeSemvirgula = nomeSemvirgula.replace(",", "");
	    }
		gerador.open(String.format("Galleria Bank - "+fileName, ""));
		gerador.feed(new ByteArrayInputStream(file));
		gerador.close();
		
		ByteArrayOutputStream bos = new ByteArrayOutputStream();		
		return bos.toByteArray();
	}
		
	
	private void geraPaginaContratoII(XWPFDocument document, String cor, boolean gerarAssinatura) throws IOException {
		geraPaginaContratoII(document, cor, gerarAssinatura, document.createParagraph(), document.createParagraph(), document.createParagraph());
	}

	private void geraPaginaContratoII(XWPFDocument document, String cor, boolean gerarAssinatura,
			XWPFParagraph paragraph, XWPFParagraph paragraph1, XWPFParagraph paragraph2) {
		XWPFRun run;
		paragraph.setAlignment(ParagraphAlignment.CENTER);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(100);
		
		String documento = "";
		
		for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {				
			if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
				if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
					objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
				}
				
				if(CommonsUtil.semValor(objetoCcb.getCpfEmitente())) {
					if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
						objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						documento = "CPF: ";
					} else {
						objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						documento = "CNPJ: ";
					}
				}
			}
		}
		
		run = paragraph.createRun();
		run.setText("ANEXO II");
		run.setFontSize(11);
		run.setBold(true);
		XWPFRun run2 = paragraph.createRun();
		
		paragraph.setAlignment(ParagraphAlignment.CENTER);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		
		run.addCarriageReturn();
		run.setText("CÃDULA DE CRÃDITO IMOBILIÃRIO NÂº " + objetoCcb.getNumeroCcb());
		run.setFontSize(11);
		run.setBold(true);
		run.addCarriageReturn();
		run.setText("DESPESAS ACESSÃRIAS (DEVIDAS A TERCEIROS)");
		run.setFontSize(11);
		run.setBold(true);
		
		paragraph = paragraph1;
		paragraph.setAlignment(ParagraphAlignment.BOTH);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(200);
		
		run = paragraph.createRun();
		run.setText("Para todos os fins e efeitos de direito, conforme previsto na ");
		run.setFontSize(11);
		run.setBold(false);
		
		run2 = paragraph.createRun();
		run2.setFontSize(11);
		run2.setText("clÃ¡usula 3.5 do Quadro Resumo da CÃ©dula de CrÃ©dito ImobiliÃ¡rio nÂ° " + objetoCcb.getNumeroCcb() 
			+ ", datada de " + CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy") );
		run2.setBold(true);
		
		run = paragraph.createRun();
		run.setText(" (CCI), autorizo o pagamento das despesas acessÃ³rias e dos "
				+ "compromissos diversos abaixo relacionados e aprovados por mim previamente no valor total de");
		run.setFontSize(11);
		run.setBold(false);			
		
		calcularValorDespesa();

		valorPorExtenso.setNumber(objetoCcb.getValorDespesas()); 
		run2 = paragraph.createRun();
		run2.setFontSize(11);
		run2.setText(" "+ CommonsUtil.formataValorMonetario(objetoCcb.getValorDespesas(), "R$ ") + " ("+ valorPorExtenso.toString() +"), ");
		run2.setBold(true);
		
		run = paragraph.createRun();
		run.setText("por meio do crÃ©dito oriundo da CCI. O montante total necessÃ¡rio para o pagamento"
				+ " das despesas acessÃ³rias e dos compromissos diversos serÃ¡ transferido para a conta"
				+ " da Galleria Correspondente BancÃ¡rio Sociedade Unipessoal Ltda, CNPJ 34.787.885/0001-32, Banco do Brasil"
				+ " â Ag: 1515-6 C/C: 131094-1, que, na condiÃ§Ã£o de Correspondente BancÃ¡rio da Galleria Sociedade de CrÃ©dito Direto,"
				+ " serÃ¡ a responsÃ¡vel por efetuar todos os pagamentos devidamente especificados na"
				+ " tabela abaixo:");
		run.setFontSize(11);
		run.setBold(false);	
		
		XWPFTable table = document.createTable();
		table.setWidth((int) (6.1 * 1440));
		table.getCTTbl().getTblPr().getTblW().unsetType();
		setTableAlign(table, ParagraphAlignment.CENTER);

		table.getCTTbl().addNewTblGrid().addNewGridCol().setW(BigInteger.valueOf(6000));
		table.getCTTbl().getTblGrid().addNewGridCol().setW(BigInteger.valueOf(2500));
		
		paragraph = document.createParagraph();
		paragraph.setAlignment(ParagraphAlignment.CENTER);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		
		// create first row
		XWPFTableRow tableRow = table.getRow(0);

		tableRow.getCell(0).setParagraph(paragraph);
		tableRow.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
		tableRow.getCell(0).setColor(cor);
		//tableRow.getCell(0).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(3000) ));
		run = tableRow.getCell(0).getParagraphArray(0).createRun();
		run.setFontSize(12);
		run.setBold(true);
		run.setColor("ffffff");
		run.setText("DescriÃ§Ã£o da despesa ou do Compromisso Diverso");
		
		tableRow.addNewTableCell();
		tableRow.addNewTableCell();

		tableRow.getCell(1).setParagraph(paragraph);
		tableRow.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
		tableRow.getCell(1).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(2800) ));
		tableRow.getCell(1).setColor(cor);
		run = tableRow.getCell(1).getParagraphArray(0).createRun();
		run.setFontSize(12);
		run.setBold(true);
		run.setText("Forma de Pagamento");
		run.setColor("ffffff");	
		
		tableRow.getCell(2).setParagraph(paragraph);
		tableRow.getCell(2).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(2800) ));
		tableRow.getCell(2).setColor(cor);
		tableRow.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
		run = tableRow.getCell(2).getParagraphArray(0).createRun();
		run.setFontSize(12);
		run.setBold(true);
		run.setColor("ffffff");
		run.setText("Valor");
				
		for(ContasPagar despesa : objetoCcb.getDespesasAnexo2()) {
			XWPFTableRow tableRow1 = table.createRow();
			
			tableRow1.getCell(0).setParagraph(paragraph);
			tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			
			run = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setColor("000000");
			if(CommonsUtil.mesmoValor(despesa.getDescricao(), "CartÃ³rio") || CommonsUtil.mesmoValor(despesa.getDescricao(), "Registro")) {
				run.setText("Custas CartorÃ¡rias");
			} else if(CommonsUtil.mesmoValor(despesa.getDescricao(), "CertidÃ£o de Casamento")) {
				run.setText("CertidÃ£o de estado civil");
			} else if(CommonsUtil.mesmoValor(despesa.getDescricao(), "IPTU")) {
				run.setText("IPTU em Atraso");
			} else if(CommonsUtil.mesmoValor(despesa.getDescricao(), "CondomÃ­nio")) {
				run.setText("CondomÃ­nio em Atraso");
			} else {
				run.setText(despesa.getDescricao());
			}
			
			tableRow1.getCell(1).setParagraph(paragraph);
			tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			tableRow1.getCell(1).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(2800) ));
			run = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			if(CommonsUtil.mesmoValor(despesa.getFormaTransferencia(), "TED")) {
				run.setText("Ted no "+ despesa.getBancoTed() +" AG: "+ despesa.getAgenciaTed()
				+" C/C: "+ despesa.getContaTed() + " Chave Pix:" + despesa.getPix() + " " + despesa.getNomeTed() 
				+" CPF/CNPJ: "+ despesa.getCpfTed()); 
			} else {
				run.setText(despesa.getFormaTransferencia());
			}
			run.setColor("000000");
			if(CommonsUtil.mesmoValor(despesa.getDescricao(), "CrÃ©dito CCI")) {
				run2 = tableRow1.getCell(1).getParagraphArray(0).createRun();
				run2.addBreak();
				run2.addBreak();
				run2.setText("* Credito serÃ¡ efetuado somente no registro da alienaÃ§Ã£o FiduciÃ¡ria da CCI " + objetoCcb.getNumeroCcb() 
						+ " da matricula " + objetoCcb.getNumeroImovel() + " do "+ objetoCcb.getCartorioImovel() 
						+ "Â° CartÃ³rio de Registro de ImÃ³veis de " + objetoCcb.getCidadeImovel() + " - " + objetoCcb.getUfImovel() + "* ");
				run2.setColor("FF0000");
			}
			
			tableRow1.getCell(2).setParagraph(paragraph);
			tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			tableRow1.getCell(2).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(2800) ));
			run = tableRow1.getCell(2).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setColor("000000");
			run.setText(CommonsUtil.formataValorMonetario(despesa.getValor(), "R$ "));
		}
		
		for(CcbProcessosJudiciais processo : objetoCcb.getProcessosJucidiais()) {
			ContasPagar despesa = processo.getContaPagar();
			if( !processo.isSelecionadoComite() || CommonsUtil.semValor(despesa)) {
				continue;
			}
			
			XWPFTableRow tableRow1 = table.createRow();
			
			tableRow1.getCell(0).setParagraph(paragraph);
			tableRow1.getCell(0).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			
			run = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText(despesa.getDescricao());
			run.setColor("000000");
			
			tableRow1.getCell(1).setParagraph(paragraph);
			tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			tableRow1.getCell(1).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(2800) ));
			run = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText(despesa.getFormaTransferencia());
			run.setColor("000000");
			
			tableRow1.getCell(2).setParagraph(paragraph);
			tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			tableRow1.getCell(2).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(CommonsUtil.longValue(2800) ));
			run = tableRow1.getCell(2).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setColor("000000");
			run.setText(CommonsUtil.formataValorMonetario(despesa.getValor(), "R$ "));
		}
		
		
		if (gerarAssinatura) {
			XWPFTableRow tableRow1 = table.createRow();

			tableRow1.getCell(1).setParagraph(paragraph);
			tableRow1.getCell(1).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			tableRow1.getCell(1).getCTTc().addNewTcPr().addNewTcW()
					.setW(BigInteger.valueOf(CommonsUtil.longValue(2800)));
			tableRow1.getCell(1).setColor(cor);

			run = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setBold(true);
			run.setText("Total");
			run.setColor("ffffff");

			tableRow1.getCell(2).setParagraph(paragraph);
			tableRow1.getCell(2).setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
			tableRow1.getCell(2).getCTTc().addNewTcPr().addNewTcW()
					.setW(BigInteger.valueOf(CommonsUtil.longValue(2800)));
			tableRow1.getCell(2).setColor(cor);

			run = tableRow1.getCell(2).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setColor("ffffff");
			run.setBold(true);
			run.setText(CommonsUtil.formataValorMonetario(objetoCcb.getValorDespesas(), "R$ "));

			paragraph = paragraph2;
			paragraph.setAlignment(ParagraphAlignment.CENTER);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);

			run = paragraph.createRun();
			run.addCarriageReturn();
			run.addCarriageReturn();
			run.addCarriageReturn();
			run.addCarriageReturn();
			run.addCarriageReturn();

			run.setText("_____________________________________________________________________________");
			run.setFontSize(11);
			run.setBold(false);
			run.addCarriageReturn();

			run2 = paragraph.createRun();
			run2.setColor("000000");
			run2.setFontSize(12);
			run2.setText("" + objetoCcb.getNomeEmitente().toUpperCase());
			run2.setBold(true);
			run2.addCarriageReturn();
			run2.setText(documento + objetoCcb.getCpfEmitente());
			
			if (!CommonsUtil.semValor(objetoCcb.getObjetoContratoCobranca())) {
				ContratoCobranca contrato = objetoCcb.getObjetoContratoCobranca();
				contrato.setContaPagarValorTotal(objetoCcb.getValorDespesas());
			}
		}
	}

	private void geraParagrafoPF(XWPFRun run2, CcbParticipantes participante){
		if(participante.isEmpresa())
			return;
		run2.setFontSize(12);
		String filho;
		String nacionalidade = null;
		String estadoCivilStr = "";
		String conjugeStr = "";
		PagadorRecebedor pessoa = participante.getPessoa();
		
		if(participante.isFeminino()) {
			filho = "filha";
			if (CommonsUtil.mesmoValor(participante.getNacionalidade(), "brasileiro")) 
				nacionalidade = "brasileira";
			if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "CASADO")) {
				estadoCivilStr = "casada";
			} else {
				if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SOLTEIRO"))
					estadoCivilStr = "solteira";
				else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "VIÃVO"))
					estadoCivilStr = "viÃºva";
				else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "DIVORCIADO"))
					estadoCivilStr = "divorciada";
				else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SEPARADO"))
					estadoCivilStr = "separada";
				else if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "SEPARADO JUDICIALMENTE"))
					estadoCivilStr = "separada judicialmente";
			}
		} else {
			filho = "filho";
			nacionalidade = participante.getNacionalidade();
			estadoCivilStr = pessoa.getEstadocivil().toLowerCase();
		}
		
		if (CommonsUtil.mesmoValor(pessoa.getEstadocivil(), "CASADO")) {
			if(!CommonsUtil.semValor(pessoa.getDataCasamento())) {
				estadoCivilStr = estadoCivilStr + " em " + CommonsUtil.formataData(pessoa.getDataCasamento(), "dd/MM/yyyy");
			}
			
			if(!CommonsUtil.mesmoValor(pessoa.getRegimeCasamento(), "parcial de bens")) {
				conjugeStr = ", sob o regime " + pessoa.getRegimeCasamento() + ", na vigÃªncia da lei 6.515/77 (" + 
					pessoa.getNomeConjuge() + " " + pessoa.getCpfConjuge() + "), conforme pacto antenupcial registrado no "+
					pessoa.getRegistroPactoAntenupcial() + ", sob livro " + pessoa.getLivroPactoAntenupcial() + ", folhas " + 
					pessoa.getFolhasPactoAntenupcial() + ", datada de " + CommonsUtil.formataData(pessoa.getDataPactoAntenupcial()) ;
			} else {
				conjugeStr = ", sob o regime " + pessoa.getRegimeCasamento() + ", na vigÃªncia da lei 6.515/77 (" + 
						pessoa.getNomeConjuge() + " " + pessoa.getCpfConjuge() + ")" ;
			}
		} else {
			if(participante.isUniaoEstavel()) {
				estadoCivilStr = estadoCivilStr + " convivente em uniÃ£o estÃ¡vel";
			} else {
				estadoCivilStr = estadoCivilStr + " nÃ£o convivente em uniÃ£o estÃ¡vel";
			}
		}
		String rgCnhString = "";
		if(CommonsUtil.mesmoValor(pessoa.getTipoDocumento(), "RG")){
			rgCnhString = "RG";
		} else if(CommonsUtil.mesmoValor(pessoa.getTipoDocumento(), "CNH")){
			rgCnhString = "CNH";
		}
		
		
		run2.setText( filho + " de " + pessoa.getNomeMae() + " e " + pessoa.getNomePai() + ", "
				+ nacionalidade + ", "+ pessoa.getAtividade() + ", "+ estadoCivilStr 
				+ conjugeStr + ","
				+ " portador(a) da CÃ©dula de Identidade " + rgCnhString + " nÂº "+ pessoa.getRg() + " " + pessoa.getOrgaoEmissorRG() + ","
				+ " inscrito(a) no CPF/MF sob o nÂº "+ pessoa.getCpf() +", endereÃ§o eletrÃ´nico: "+ pessoa.getEmail() +","
				+ " residente e domiciliado Ã  "+ pessoa.getEndereco() +", nÂº "+ pessoa.getNumero() +", "
				+ pessoa.getComplemento() + ", "+ pessoa.getBairro() + ", " 
				+ pessoa.getCidade()+"/"+pessoa.getEstado()+", CEP "+ pessoa.getCep()+"; ");
	}
	
	private void organizaSegurados(List<CcbParticipantes> segurados) {
		if(segurados.size() <= 0) {
			return;
		}
		BigDecimal porcentagem =  BigDecimal.valueOf(100).divide(BigDecimal.valueOf(segurados.size()), MathContext.DECIMAL128).setScale(2, BigDecimal.ROUND_HALF_UP);
		if(objetoCcb.getListSegurados().size() == segurados.size()) {
			return;
		}
		
		SeguradoDAO seguradoDAO = new SeguradoDAO();
		objetoCcb.getListSegurados().clear();
		if(objetoCcb.getObjetoContratoCobranca().getListSegurados().size() == segurados.size()) {
			for(Segurado segurado : objetoCcb.getObjetoContratoCobranca().getListSegurados()) {
				objetoCcb.getListSegurados().add(segurado);
			}
		} else {
			for(Segurado segurado : objetoCcb.getObjetoContratoCobranca().getListSegurados()) {
				objetoCcb.getObjetoContratoCobranca().getListSegurados().remove(segurado);
				segurado.setContratoCobranca(null);
				seguradoDAO.delete(segurado);
			}
			objetoCcb.getObjetoContratoCobranca().getListSegurados().clear();
		
			for(CcbParticipantes participante : segurados) {
				Segurado segurado = new Segurado();
				if(!CommonsUtil.semValor(objetoCcb.getObjetoContratoCobranca())) {
					segurado.setPessoa(participante.getPessoa());
					segurado.setPorcentagemSegurador(porcentagem);
					segurado.setPosicao(objetoCcb.getListSegurados().size() + 1);
					if(!objetoCcb.getObjetoContratoCobranca().getListSegurados().contains(segurado)) {		
						segurado.setContratoCobranca(objetoCcb.getObjetoContratoCobranca());
						objetoCcb.getObjetoContratoCobranca().getListSegurados().add(segurado);
					}
					if(!objetoCcb.getListSegurados().contains(segurado)) {	
						
						seguradoDAO.create(segurado);
						objetoCcb.getListSegurados().add(segurado);
					}
				}
			}
		}
	}

	public void populateFiles(int index) throws IOException {
		uploadedFile = filesList.get(index);
		fileName = uploadedFile.getFileName();
	    fileType = uploadedFile.getContentType();
	    if(fileType.contains("png")) {
	    	fileTypeInt = 6;
	    	fileType = "png";
	    } else if(fileType.contains("jpeg")) {
	    	fileTypeInt = 5;
	    	fileType = "jpeg";
	    }
	    
	    ByteArrayOutputStream baos = new ByteArrayOutputStream();
	    if (uploadedFile != null) {
			RenderedImage picture = ImageIO.read((uploadedFile.getInputstream()));
			ImageIO.write(picture, "png", baos);
			baos.flush();
			// InputStream is = new ByteArrayInputStream(baos.toByteArray());
			baos.close();
			this.bis = new ByteArrayInputStream(baos.toByteArray());
		}
	}
	
	public String estadoPorExtenso(String uf) {
		if(!CommonsUtil.semValor(uf)) {
			if(CommonsUtil.mesmoValor(uf, "AC")) {
				return "Acre";
			} else if(CommonsUtil.mesmoValor(uf, "AL")) {
				return "Alagoas";
			} else if(CommonsUtil.mesmoValor(uf, "AP")) {
				return "AmapÃ¡";
			} else if(CommonsUtil.mesmoValor(uf, "AM")) {
				return "Amazonas";
			} else if(CommonsUtil.mesmoValor(uf, "BA")) {
				return "Bahia";
			} else if(CommonsUtil.mesmoValor(uf, "CE")) {
				return "CearÃ¡";
			} else if(CommonsUtil.mesmoValor(uf, "DF")) {
				return "Distrito Federal";
			} else if(CommonsUtil.mesmoValor(uf, "ES")) {
				return "EspÃ­rito Santo";
			} else if(CommonsUtil.mesmoValor(uf, "GO")) {
				return "GoiÃ¡s";
			} else if(CommonsUtil.mesmoValor(uf, "MA")) {
				return "MaranhÃ£o";
			} else if(CommonsUtil.mesmoValor(uf, "MT")) {
				return "Mato Grosso";
			} else if(CommonsUtil.mesmoValor(uf, "MS")) {
				return "Mato Grosso";
			} else if(CommonsUtil.mesmoValor(uf, "MG")) {
				return "Minas Gerais";
			} else if(CommonsUtil.mesmoValor(uf, "PA")) {
				return "ParÃ¡";
			} else if(CommonsUtil.mesmoValor(uf, "PB")) {
				return "ParaÃ­ba";
			} else if(CommonsUtil.mesmoValor(uf, "PR")) {
				return "ParanÃ¡";
			} else if(CommonsUtil.mesmoValor(uf, "PE")) {
				return "Pernambuco";
			} else if(CommonsUtil.mesmoValor(uf, "PI")) {
				return "PiauÃ­";
			} else if(CommonsUtil.mesmoValor(uf, "RJ")) {
				return "Rio de Janeiro";
			} else if(CommonsUtil.mesmoValor(uf, "RN")) {
				return "Rio Grande do Norte";
			} else if(CommonsUtil.mesmoValor(uf, "RS")) {
				return "Rio Grande do Sul";
			} else if(CommonsUtil.mesmoValor(uf, "RO")) {
				return "RondÃ´nia";
			} else if(CommonsUtil.mesmoValor(uf, "RR")) {
				return "Roraima";
			} else if(CommonsUtil.mesmoValor(uf, "SC")) {
				return "Santa Catarina";
			} else if(CommonsUtil.mesmoValor(uf, "SP")) {
				return "SÃ£o Paulo";
			} else if(CommonsUtil.mesmoValor(uf, "SE")) {
				return "Sergipe";
			} else if(CommonsUtil.mesmoValor(uf, "TO")) {
				return "Tocantins";
			} else {
				return uf;
			}
		}
		return "";
	}

	public void calcularValorDespesa() {
		BigDecimal total =  BigDecimal.ZERO;
		
		if(!objetoCcb.getDespesasAnexo2().isEmpty()) {
			for(ContasPagar despesas : objetoCcb.getDespesasAnexo2()) {
				if(!CommonsUtil.semValor(despesas.getValor()))
					total = total.add(despesas.getValor());
			}
		}
		
		if(!objetoCcb.getProcessosJucidiais().isEmpty()) {
			for(CcbProcessosJudiciais processo : objetoCcb.getProcessosJucidiais()) {
				if(!CommonsUtil.semValor(processo.getValorAtualizado()))
					total = total.add(processo.getValorAtualizado());
			}
		}
		objetoCcb.setValorDespesas(total);
	}
	
	public void adicionarEnter(String text, XWPFRun r) {
		if (text != null && text.contains("\n")) {
			String[] lines = text.split("\n");
			r.setText(lines[0], 0); // set first line into XWPFRun
			for (int i = 1; i < lines.length; i++) {
				// add break and insert new text
				r.addBreak();
				r.setText(lines[i]);
			}
		} else {
			r.setText(text, 0);
		}
	}
	
	public void setTableAlign(XWPFTable table,ParagraphAlignment align) {
	    CTTblPr tblPr = table.getCTTbl().getTblPr();
	    CTJc jc = (tblPr.isSetJc() ? tblPr.getJc() : tblPr.addNewJc());
	    STJc.Enum en = STJc.Enum.forInt(align.getValue());
	    jc.setVal(en);
	}
	
	public void setTableAlignment(XWPFTable table, STJc.Enum justification) {
	    CTTblPr tblPr = table.getCTTbl().getTblPr();
	    CTJc jc = (tblPr.isSetJc() ? tblPr.getJc() : tblPr.addNewJc());
	    jc.setVal(justification);
	}

	public String trocaValoresXWPF(String text, XWPFRun r, String valorEscrito, String valorSobrescrever) {
		if (text != null && text.contains(valorEscrito)) {
			text = text.replace(valorEscrito, valorSobrescrever);
			r.setText(text, 0);
		}
		return text;
	}
	
	public String trocaValoresXWPF(String text, XWPFRun r, String valorEscrito, BigDecimal valorSobrescrever, String moeda) {
		if (text != null && text.contains(valorEscrito)) {
				text = text.replace(valorEscrito, CommonsUtil.formataValorMonetario(valorSobrescrever, moeda));
			r.setText(text, 0);
		}
		return text;
	}
	
	public String trocaValoresXWPFCci(String text, XWPFRun r, String valorEscrito, BigDecimal valorSobrescrever, String moeda) {
		if (text != null && text.contains(valorEscrito)) {
				text = text.replace(valorEscrito, CommonsUtil.formataValorMonetarioCci(valorSobrescrever, moeda) );
			r.setText(text, 0);
		}
		return text;
	}
	
	public String trocaValoresXWPF(String text, XWPFRun r, String valorEscrito, BigDecimal valorSobrescrever) {
		if (text != null && text.contains(valorEscrito)) {
			if(CommonsUtil.mesmoValor(valorEscrito, "tarifaAntecipada")) {
				text = text.replace(valorEscrito, CommonsUtil.formataValorMonetario(valorSobrescrever));
			} else {
				text = text.replace(valorEscrito, CommonsUtil.formataValorTaxa(valorSobrescrever));
			}
			r.setText(text, 0);
		}
		return text;
	}

	public String trocaValoresDinheiroExtensoXWPF(String text, XWPFRun r, String valorEscrito, BigDecimal valorSobrescrever) {
		if (text != null && text.contains("Extenso" + valorEscrito)) {
			if(CommonsUtil.semValor(valorSobrescrever)) {
				text = text.replace("Extenso" + valorEscrito , "Zero reais");
				r.setText(text, 0);
			} else {
				valorPorExtenso.setNumber(valorSobrescrever);
				text = text.replace("Extenso" + valorEscrito , valorPorExtenso.toString());
				r.setText(text, 0);	
			}	
		}
		return text;
	}
	
	public String trocaValoresTaxaExtensoXWPF(String text, XWPFRun r, String valorEscrito, BigDecimal valorSobrescrever) {
		if (text != null && text.contains("Extenso" + valorEscrito)) {
			if(CommonsUtil.semValor(valorSobrescrever)) {
				text = text.replace("Extenso" + valorEscrito, "Zero");
			} else {
				porcentagemPorExtenso.setNumber(valorSobrescrever);
				text = text.replace("Extenso" + valorEscrito, porcentagemPorExtenso.toString());
				
			}
		}
		r.setText(text, 0);
		return text;
	}
	
	public String trocaValoresNumeroExtensoXWPF(String text, XWPFRun r, String valorEscrito, String valorSobrescrever) {
		if (text != null && text.contains("Extenso" + valorEscrito )) {
			numeroPorExtenso.setNumber(BigDecimal.valueOf(CommonsUtil.doubleValue(valorSobrescrever)));
			text = text.replace("Extenso" + valorEscrito , numeroPorExtenso.toString());
			r.setText(text, 0);
		}
		return text;
	}
	
	public String trocaValoresXWPF(String text, XWPFRun r, String valorEscrito, Date valorSobrescrever) {
		if (text != null && text.contains(valorEscrito)) {
			text = text.replace(valorEscrito, CommonsUtil.formataData(valorSobrescrever, "dd/MM/yyyy"));
			r.setText(text, 0);
		}
		return text;
	}
	
	public String trocaValoresXWPF(String text, XWPFRun r, String valorEscrito, Integer valorSobrescrever) {
		if (text != null && text.contains(valorEscrito)) {
			text = text.replace(valorEscrito, CommonsUtil.stringValue(valorSobrescrever));
			r.setText(text, 0);
		}
		return text;
	}

	private void CabecalhoAnexo1(XWPFTable table, int r, int c, String text) {
		XWPFRun run;
		XWPFTableRow tableRow1;
		tableRow1 = table.getRow(r);
		run = tableRow1.getCell(c).getParagraphArray(0).createRun();
		run.setFontSize(8);
		run.setFontFamily("Calibri");
		run.setBold(true);
		run.setText(text);
	}

	/////////////////////////////////////////Daqui pra frente Ã© sÃ³ pra trÃ¡s////////////////////////////////////////////////////////////////////
    private boolean fiducianteGerado = false;
    private boolean devedorGerado = false;
	
	public byte[] geraCcbDinamica() throws IOException {
		clearDocumentosNovos();
		try {
			XWPFDocument document = new XWPFDocument();
			XWPFHeaderFooterPolicy headerFooterPolicy = document.getHeaderFooterPolicy();
			if (headerFooterPolicy == null)
				headerFooterPolicy = document.createHeaderFooterPolicy();

			XWPFHeader header = headerFooterPolicy.createHeader(XWPFHeaderFooterPolicy.DEFAULT);
			XWPFParagraph paragraphHeader = header.createParagraph();
			paragraphHeader.setAlignment(ParagraphAlignment.LEFT);
			XWPFRun runHeader = paragraphHeader.createRun();
			runHeader.addPicture(getClass().getResourceAsStream("/resource/BMP MoneyPlus.png"), 6, "BMP MoneyPlus",
					Units.toEMU(130), Units.toEMU(72));
			runHeader.addTab();
			runHeader.addTab();
			runHeader.addTab();
			runHeader.addTab();
			runHeader.addTab();
			runHeader.addTab();
			runHeader.addTab();
			runHeader.setText("VIA NEGOCIÃVEL");
			runHeader.setFontSize(12);
			runHeader.setColor("0000ff");
			runHeader.setBold(true);

			XWPFRun run;

			XWPFParagraph paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.CENTER);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("CÃDULA DE CRÃDITO BANCÃRIO");
			XWPFRun run2 = paragraph.createRun();
			XWPFRun run3 = paragraph.createRun();
			XWPFRun run4 = paragraph.createRun();
			run.addCarriageReturn();

			run.setText("NÂº " + objetoCcb.getNumeroCcb());
			run.setFontSize(14);
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();

			fazParagrafoSimples(document, paragraph, run, "1.  Partes:", true);

			geraParagrafoComposto(document, paragraph, run, run2,
					"I â CREDOR: BMP SOCIEDADE DE CRÃDITO DIRETO S.A.",
					", instituiÃ§Ã£o financeira, inscrita no CNPJ/MF sob nÂº 34.337.707/0001-00,"
						+ " com sede na Av. Paulista, 1765, 1Âº Andar, CEP 01311-200, SÃ£o Paulo, SP,"
						+ " neste ato, representada na forma do seu Estatuto Social; ",
					true, false);

			int iParticipante = 2;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.BOTH);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				paragraph.setSpacingBetween(1);

				run = paragraph.createRun();
				run.setFontSize(12);
				run.setText(RomanNumerals(iParticipante) + " â " + participante.getTipoParticipante() + ":");
				run.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
				run.setBold(true);

				run2 = paragraph.createRun();
				if (!participante.isEmpresa()) {
					geraParagrafoPF(run2, participante);
					run2.addCarriageReturn();
				} else {
					run2.setFontSize(12);
					PagadorRecebedor pessoa = participante.getPessoa();

					String socios = "";
					if (participante.getSocios().size() > 1) {
						socios = "pelos seus sÃ³cios, ";
					} else if(participante.getSocios().size() > 0){
						if (participante.getSocios().iterator().next().isFeminino()) {
							socios = "pela sua Ãºnica sÃ³cia, ";
						} else {
							socios = "pelo seu Ãºnico sÃ³cio, ";
						}
					} else {
						socios = "";
					}

					run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
							+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
							+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
							+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
							+ "; neste ato representada " + socios);

					for (CcbParticipantes sociosParticipante : participante.getSocios()) {
						XWPFRun runSocios = paragraph.createRun();
						runSocios.setFontSize(12);
						runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
						runSocios.setBold(true);
						XWPFRun runSociosNome = paragraph.createRun();
						geraParagrafoPF(runSociosNome, sociosParticipante);
						runSociosNome.addCarriageReturn();
					}
				}
				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					
					if(CommonsUtil.semValor(objetoCcb.getEmitentePrincipal().getPessoa().getCpf())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
				}
				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "TERCEIRO GARANTIDOR")) {
					objetoCcb.setTerceiroGarantidor(true);
				}

				iParticipante++;
			}

			fazParagrafoSimples(document, paragraph, run, "Considerando que: ", false);
			
			if(objetoCcb.isTerceiroGarantidor()) {
				fazParagrafoSimples(document, paragraph, run,
						"a)	O EMITENTE e o TERCEIRO(S) GARANTIDOR(ES) declara(m) e garante(m) "
						+ "que estÃ¡(Ã£o) devidamente autorizado a firmar a presente CÃ©dula de "
						+ "CrÃ©dito BancÃ¡rio (âCCBâ), e assumir todas as obrigaÃ§Ãµes aqui pactuadas"
						+ " e cumprir todos os seus termos e condiÃ§Ãµes atÃ© quitaÃ§Ã£o final de todas"
						+ " as obrigaÃ§Ãµes aqui estabelecidas, uma vez que as obrigaÃ§Ãµes pecuniÃ¡rias"
						+ " assumidas nesta CCB sÃ£o compatÃ­veis com a capacidade econÃ´mico-financeira "
						+ "do EMITENTE para honrÃ¡-las;",
						false, ParagraphAlignment.BOTH);
			} else {
				fazParagrafoSimples(document, paragraph, run,
						"a) O EMITENTE declara e garante que estÃ¡ devidamente "
								+ "autorizado a firmar a presente CÃ©dula de CrÃ©dito BancÃ¡rio (âCCBâ),"
								+ " e assumir todas as obrigaÃ§Ãµes aqui pactuadas e cumprir todos os "
								+ "seus termos e condiÃ§Ãµes atÃ© quitaÃ§Ã£o final de todas as obrigaÃ§Ãµes aqui "
								+ "estabelecidas, uma vez que as obrigaÃ§Ãµes pecuniÃ¡rias assumidas "
								+ "nesta CCB sÃ£o compatÃ­veis com a capacidade econÃ´mico-financeira do"
								+ " EMITENTE para honrÃ¡-las;",
						false, ParagraphAlignment.BOTH);
			}

			fazParagrafoSimples(document, paragraph, run, "b) O EMITENTE declara e garante que cumpre o disposto na"
					+ " legislaÃ§Ã£o referente Ã  PolÃ­tica Nacional de Meio Ambiente"
					+ " e nÃ£o aplicarÃ¡ os recursos decorrentes desta CCB no financiamento "
					+ "de qualquer atividade ou projeto que caracterize crime contra o"
					+ " meio ambiente, que cause poluiÃ§Ã£o e/ou que prejudique o ordenamento"
					+ " urbano e o patrimÃ´nio cultural, obrigando-se a respeitar integralmente"
					+ " as normas contidas nas Leis nÂº 9.605/98 e nÂº 9.985/2000 e demais"
					+ " regras complementares; e ainda que nÃ£o utilizarÃ¡ os recursos no "
					+ "desenvolvimento de suas atividades comerciais e vinculadas ao seu objeto"
					+ " social, formas nocivas ou de exploraÃ§Ã£o de trabalho forÃ§ado e/ou mÃ£o" + " de obra infantil.",
					false, ParagraphAlignment.BOTH);

			fazParagrafoSimples(document, paragraph, run,
					"Em garantia do integral cumprimento de todas as obrigaÃ§Ãµes,"
							+ " principais e acessÃ³rias, assumidas pelo EMITENTE, as Partes"
							+ " resolvem celebrar a presente CÃ©dula de CrÃ©dito BancÃ¡rio, a qual"
							+ " se regerÃ¡ pelas seguintes clÃ¡usulas e condiÃ§Ãµes: ",
					false, ParagraphAlignment.BOTH);

			fazParagrafoSimples(document, paragraph, run, "2.	DAS CARACTERÃSTICAS DA OPERAÃÃO DE CRÃDITO", true);

			valorPorExtenso.setNumber(objetoCcb.getValorCredito());
			geraParagrafoComposto(document, paragraph, run, run2, "2.1. Valor do CrÃ©dito: ",
					CommonsUtil.formataValorMonetario(objetoCcb.getValorCredito(), "R$ ") + " (" + valorPorExtenso.toString() + ");",
					true, false);

			valorPorExtenso.setNumber(objetoCcb.getCustoEmissao());
			geraParagrafoComposto(document, paragraph, run, run2, "2.1.1. Custo de EmissÃ£o: ",
					CommonsUtil.formataValorMonetario(objetoCcb.getCustoEmissao(), "R$ ") + " (" + valorPorExtenso.toString()
							+ "), e serÃ¡ pago pelo EMITENTE na data"
							+ " de emissÃ£o desta CCB, sendo o mesmo deduzido no ato da liberaÃ§Ã£o do recurso"
							+ " que entrarÃ¡ a crÃ©dito na Conta Corrente descrita no item 2.5 desta CCB, e"
							+ " serÃ¡ devido por conta da guarda, manutenÃ§Ã£o e atualizaÃ§Ã£o de dados cadastrais,"
							+ " bem como permanente e contÃ­nua geraÃ§Ã£o de dados relativos ao cumprimento dos"
							+ " direitos e obrigaÃ§Ãµes decorrentes deste instrumento;",
					true, false);

			valorPorExtenso.setNumber(objetoCcb.getValorIOF());
			geraParagrafoComposto(document, paragraph, run, run2,
					"2.1.2. Valor do Imposto sobre OperaÃ§Ãµes Financeiras (IOF): ",
					CommonsUtil.formataValorMonetario(objetoCcb.getValorIOF(), "R$ ") + " (" + valorPorExtenso.toString()
							+ "), conforme apurado na Planilha"
							+ " de CÃ¡lculo (Anexo I), calculado nos termos da legislaÃ§Ã£o vigente"
							+ " na data de ocorrÃªncia do fato gerador, tendo como base de cÃ¡lculo"
							+ " o Valor do CrÃ©dito mencionado no item 2.1;",
					true, false);

			valorPorExtenso.setNumber(objetoCcb.getValorDespesas());
			geraParagrafoComposto(document, paragraph, run, run2,
					"2.1.3. Valor destinado ao pagamento de despesas acessÃ³rias (devidas a terceiros): ",
					CommonsUtil.formataValorMonetario(objetoCcb.getValorDespesas(), "R$ ") + " (" + valorPorExtenso.toString() + ") conforme anexo II;", true,
					false);
			
			geraParagrafoComposto(document, paragraph, run, run2,
					"2.1.3.1 ", "Os valores mencionados no ANEXO II expressam estimativas,"
							+ " sendo que caso haja necessidade de complementaÃ§Ã£o para quitaÃ§Ã£o,"
							+ " o(a) EMITENTE autoriza desde jÃ¡ e independentemente de notificaÃ§Ã£o,"
							+ " que seja realizado o desconto destes valores do montante lÃ­quido a"
							+ " ser liberado, bem como, caso os valores sejam menores no momento da"
							+ " quitaÃ§Ã£o dos dÃ©bitos, o CREDOR irÃ¡ realizar o depÃ³sito da diferenÃ§a"
							+ " na Conta indicada no item 2.5.", true, false);

			valorPorExtenso.setNumber(objetoCcb.getValorLiquidoCredito());
			geraParagrafoComposto(document, paragraph, run, run2, "2.1.4. Valor LÃ­quido do CrÃ©dito: ",
					"O valor lÃ­quido do crÃ©dito concedido Ã© de "
							+ CommonsUtil.formataValorMonetario(objetoCcb.getValorLiquidoCredito(), "R$ ") + "" + " ("
							+ valorPorExtenso.toString() + "), apÃ³s o desconto do Custo de EmissÃ£o,"
							+ " IOF e Despesas AcessÃ³rias desta CCB;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.1.5.",
					" O EMITENTE estÃ¡ ciente e concorda que Ã© de sua responsabilidade"
							+ " o pagamento dos valores indicados nos itens supramencionados, bem "
							+ "como os relativos aos tributos e demais despesas que incidam ou venham"
							+ " a incidir sobre a operaÃ§Ã£o, inclusive as que faÃ§am necessÃ¡ria para o "
							+ "registro da garantia real perante a circunscriÃ§Ã£o imobiliÃ¡ria competente.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.1.6.",
					" O EMITENTE concorda que o valor relativo ao IOF serÃ¡ incorporado Ã "
							+ " sua dÃ­vida confessada, sendo pago nos mesmos termos do parcelamento"
							+ " do saldo devedor em aberto.",
					true, false);

			fazParagrafoSimplesSemReturn(document, paragraph, run, "2.2.	Encargos Financeiros:", true);

			geraParagrafoCompostoSemReturn(document, paragraph, run, run2, "(X) PrÃ©-fixado,",
					" calculado com base no ano de 365 dias;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "(X) PÃ³s-fixado: ",
					"atualizaÃ§Ã£o dos valores pela variaÃ§Ã£o mensal do Ãndice Nacional "
							+ "de PreÃ§os ao Consumidor Amplo â IPCA/IBGE, apurado a partir da data"
							+ " de emissÃ£o atÃ© a efetiva quitaÃ§Ã£o da CCB, sendo esta atualizaÃ§Ã£o "
							+ "condiÃ§Ã£o essencial do presente negÃ³cio, que o saldo devedor e o valor"
							+ " de cada uma das parcelas serÃ£o atualizados monetÃ¡ria e mensalmente, de"
							+ " acordo com o Ã­ndice de atualizaÃ§Ã£o referido;",
					true, false);

			fazParagrafoSimplesSemReturn(document, paragraph, run, "2.3. Taxa de Juros Efetiva: ", true);

			geraParagrafoCompostoSemReturn(document, paragraph, run, run2, "MÃªs: ",
					CommonsUtil.formataValorTaxa(objetoCcb.getTaxaDeJurosMes()) + "%", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "Ano: ",
					CommonsUtil.formataValorTaxa(objetoCcb.getTaxaDeJurosAno()) + "%", true, false);

			fazParagrafoSimplesSemReturn(document, paragraph, run, "2.4. Custo Efetivo Total (âCETâ):", true);

			geraParagrafoCompostoSemReturn(document, paragraph, run, run2, "MÃªs: ", CommonsUtil.formataValorTaxa(objetoCcb.getCetMes()) + "%",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "Ano: ", CommonsUtil.formataValorTaxa(objetoCcb.getCetAno()) + "%",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.5. Forma de LiberaÃ§Ã£o do CrÃ©dito: ",
					"O CREDOR realizarÃ¡ o crÃ©dito na Conta Corrente nÂº " + objetoCcb.getContaCorrente() + "," + " AgÃªncia nÂº "
							+ objetoCcb.getAgencia() + ", BANCO " + objetoCcb.getNumeroBanco() + " â " + objetoCcb.getNomeBanco() + ", em atÃ© 5 (cinco)"
							+ " dias Ãºteis apÃ³s o cumprimento das condiÃ§Ãµes precedentes estabelecidas "
							+ "na clÃ¡usula 4.4 abaixo;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.6. Forma de pagamento: ",
					"O EMITENTE realizarÃ¡ o pagamento, nos termos do Anexo "
							+ "I desta CCB, em conta corrente do CREDOR ou a quem este indicar; ",
					true, false);

			numeroPorExtenso.setNumber(CommonsUtil.bigDecimalValue(objetoCcb.getNumeroParcelasPagamento()));
			valorPorExtenso.setNumber(objetoCcb.getMontantePagamento());
			geraParagrafoComposto(document, paragraph, run, run2, "2.7. Fluxo de Pagamento (Juros e AmortizaÃ§Ã£o): ",
					objetoCcb.getNumeroParcelasPagamento() + " (" + numeroPorExtenso.toString() + ")"
							+ " parcelas mensais, sendo a 1Âª parcela com vencimento em "
							+ CommonsUtil.formataData(objetoCcb.getVencimentoPrimeiraParcelaPagamento(), "dd/MM/yyyy")
							+ " e a Ãºltima com vencimento " + "em "
							+ CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy")
							+ ", corrigidas pela variaÃ§Ã£o"
							+ " mensal do IPCA/IBGE, totalizando, na data de emissÃ£o desta CCB," + " o montante de "
							+ CommonsUtil.formataValorMonetario(objetoCcb.getMontantePagamento(), "R$ ") + " ("
							+ valorPorExtenso.toString() + "), conforme ANEXO I;",
					true, false);

			numeroPorExtenso.setNumber(CommonsUtil.bigDecimalValue(objetoCcb.getNumeroParcelasMIP()));
			valorPorExtenso.setNumber(objetoCcb.getMontanteMIP());
			geraParagrafoComposto(document, paragraph, run, run2,
					"2.7.1. Valor e Fluxo de Pagamento do Seguro de Morte e Invalidez Permanente (MIP): ",
					objetoCcb.getNumeroParcelasMIP() + " (" + numeroPorExtenso.toString() + ") parcelas mensais,"
							+ " sendo a 1Âª parcela com vencimento em "
							+ CommonsUtil.formataData(objetoCcb.getVencimentoPrimeiraParcelaMIP(), "dd/MM/yyyy") + " "
							+ "e a Ãºltima com vencimento em "
							+ CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaMIP(), "dd/MM/yyyy") + ", corrigidas"
							+ " pela variaÃ§Ã£o mensal do IPCA/IBGE, totalizando, na data de emissÃ£o "
							+ "desta CCB, o montante de " + CommonsUtil.formataValorMonetario(objetoCcb.getMontanteMIP(), "R$ ") + " ("
							+ valorPorExtenso.toString() + "), conforme ANEXO I. ",
					true, false);

			numeroPorExtenso.setNumber(CommonsUtil.bigDecimalValue(objetoCcb.getNumeroParcelasDFI()));
			valorPorExtenso.setNumber(objetoCcb.getMontanteDFI());
			geraParagrafoComposto(document, paragraph, run, run2,
					"2.7.2. Valor e Fluxo de Pagamento do Seguro de Danos FÃ­sicos ao ImÃ³vel (DFI): ",
					objetoCcb.getNumeroParcelasDFI() + " (" + numeroPorExtenso.toString() + ") parcelas"
							+ " mensais, sendo a 1Âª parcela com vencimento em "
							+ CommonsUtil.formataData(objetoCcb.getVencimentoPrimeiraParcelaDFI(), "dd/MM/yyyy") + " "
							+ "e a Ãºltima com vencimento em "
							+ CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaDFI(), "dd/MM/yyyy") + ", corrigidas pela"
							+ " variaÃ§Ã£o mensal do IPCA/IBGE, totalizando, na data de emissÃ£o desta CCB,"
							+ " o montante de " + CommonsUtil.formataValorMonetario(objetoCcb.getMontanteDFI(), "R$ ") + " ("
							+ valorPorExtenso.toString() + "), conforme ANEXO I.",
					true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2,
					"2.7.3. Tarifa mensal de administraÃ§Ã£o do contrato: ","SerÃ¡ cobrado"
							+ " mensalmente o valor de R$ 25,00 (vinte e cinco reais)"
							+ " a tÃ­tulo de tarifa para administraÃ§Ã£o do contrato.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.8. ",
					"A atualizaÃ§Ã£o pela variaÃ§Ã£o mensal do Ãndice Nacional"
							+ " de PreÃ§os ao Consumidor Amplo â IPCA/IBGE serÃ¡ devida"
							+ " desde o momento da emissÃ£o desta CCB, independentemente "
							+ "da data ajustada para o pagamento da 1Âª parcela.",
					true, false);

			porcentagemPorExtenso.setNumber(objetoCcb.getTarifaAntecipada());
			String tarifaAntecipadastr = porcentagemPorExtenso.toString();
			if(CommonsUtil.semValor(objetoCcb.getTarifaAntecipada())) {
				tarifaAntecipadastr = "Zero";
			}
			geraParagrafoComposto(document, paragraph, run, run2, "2.9. Tarifa de LiquidaÃ§Ã£o Antecipada: ",
					CommonsUtil.formataValorTaxa(objetoCcb.getTarifaAntecipada()) + "% (" + tarifaAntecipadastr + " por cento);",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.10. Data de EmissÃ£o: ",
					CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy") + ";", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.11. Data de Vencimento: ",
					CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy") + ";", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "2.12. PraÃ§a de Pagamento: ", "SÃ£o Paulo/SP.", true,
					false);

			fazParagrafoSimples(document, paragraph, run, "3. DAS GARANTIAS", true);

			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingBetween(1);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("3.1. ");
			run.setBold(true);
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			if(objetoCcb.isTerceiroGarantidor()) {
				run2.setText("Em garantia do fiel, integral e pontual cumprimento "
						+ "de todas as obrigaÃ§Ãµes assumidas na presente CCB, o(s) TERCEIRO(S)"
						+ " GARANTIDOR(ES) aliena(m) fiduciariamente ao CREDOR o(s) bem(ens) "
						+ "imÃ³vel(eis), de sua propriedade, bem(ns) com a(s) seguinte(s) "
						+ "descriÃ§Ã£o(Ãµes):");
			} else {
				run2.setText("Em garantia do fiel, integral e pontual "
						+ "cumprimento de todas as obrigaÃ§Ãµes assumidas na presente CCB,"
						+ " o EMITENTE aliena fiduciariamente ao CREDOR o(s) bem(ens)"
						+ " imÃ³vel(eis), de sua propriedade, bem(ns) com a(s) seguinte(s) "
						+ "descriÃ§Ã£o(Ãµes):");
			}
			run2.setBold(false);

			int iImagem = 0;
			for (UploadedFile imagem : filesList) {
				run3 = paragraph.createRun();
				run3.addCarriageReturn();
				this.populateFiles(iImagem);
				run3.addPicture(bis, fileTypeInt, fileName.toLowerCase(), Units.toEMU(400), Units.toEMU(300));
				run3.addCarriageReturn();
				iImagem++;
			}

			run4 = paragraph.createRun();
			run4.setFontSize(12);
			run4.removeCarriageReturn();
			run4.setText("Objeto da matrÃ­cula nÂº " + objetoCcb.getNumeroImovel() + " "
					+ "(âBem ImÃ³velâ ou âImÃ³velâ), registrada perante o " + objetoCcb.getCartorioImovel()
					+ "Â° CartÃ³rio de Registro de ImÃ³veis da " + "Comarca de " + objetoCcb.getCidadeImovel() + " â " + objetoCcb.getUfImovel()
					+ " (âRGIâ), nos termos" + " e condiÃ§Ãµes anuÃ­dos pelas Partes no Instrumento Particular "
					+ "de AlienaÃ§Ã£o FiduciÃ¡ria Bem ImÃ³vel (âTermo de Garantiaâ), o "
					+ "qual faz parte desta CCB como parte acessÃ³ria e inseparÃ¡vel.");
			run4.addCarriageReturn();

			geraParagrafoComposto(document, paragraph, run, run2, "3.2. ",
					"Se solteiro(a), viÃºvo(a), divorciado(a) ou separado(a) "
							+ "judicialmente, declara, sob responsabilidade civil e criminal, "
							+ "que o imÃ³vel aqui objetivado nÃ£o foi adquirido na constÃ¢ncia de "
							+ "uniÃ£o estÃ¡vel prevista na Lei nÂº 9.278, de 10/05/96 e no CÃ³digo Civil, "
							+ "razÃ£o pela qual Ã© seu Ãºnico e exclusivo proprietÃ¡rio.",
					true, false);

			fazParagrafoSimples(document, paragraph, run, "3.3.	Seguros:", true);

			geraParagrafoComposto(document, paragraph, run, run2, "3.3.1. ",
					"O CREDOR Fica autorizado neste ato a contratar em nome do(s) EMITENTE, os seguros para "
							+ "cobertura dos riscos de morte e invalidez permanente e de danos fÃ­sicos ao(s) ImÃ³vel(is) descrito(s) "
							+ "na clÃ¡usula 3 acima, cujos prÃªmios deverÃ£o ser pagos mensalmente. O CREDOR, ou quem vier a substituÃ­-lo, "
							+ "serÃ¡ nomeado beneficiÃ¡rio das respectivas apÃ³lices/certificados de seguro, e receberÃ¡ o capital segurado"
							+ " ou indenizaÃ§Ã£o em caso de sinistro para utilizaÃ§Ã£o dos valores daÃ­ decorrentes na liquidaÃ§Ã£o total"
							+ " ou parcial das obrigaÃ§Ãµes de pagamento oriundas do presente instrumento. O valor do prÃªmio dos"
							+ " referidos seguros serÃ¡ reajustado conforme definido em apÃ³lice e poderÃ¡ ser revisto e alterado"
							+ " desde o inÃ­cio da contrataÃ§Ã£o, ou seja, na elaboraÃ§Ã£o da proposta de emprÃ©stimo ou financiamento,"
							+ " atÃ© a liquidaÃ§Ã£o integral da CCB, de acordo com as regras estabelecidas na respectiva"
							+ " apÃ³lice de seguros que sÃ£o estipuladas pela companhia seguradora. ",
					true, false);
			
			if(objetoCcb.isTerceiroGarantidor()) {
				geraParagrafoComposto(document, paragraph, run, run2, "3.3.1.1. ",
						"Assim, declaram-se cientes o EMITENTE e o(s) TERCEIRO(S) "
						+ "GARANTIDOR(ES) que qualquer alteraÃ§Ã£o nas condiÃ§Ãµes "
						+ "inicialmente informadas para a contrataÃ§Ã£o, tais como,"
						+ " mas nÃ£o se limitando, por exemplo, a(s) idade(s) do(s) "
						+ "proponente(s), poderÃ¡ refletir em modificaÃ§Ã£o no prÃªmio dos"
						+ " seguros a serem contratados para a devida formalizaÃ§Ã£o deste"
						+ " emprÃ©stimo com garantia imobiliÃ¡ria. ",
						true, false);
			} else {
				geraParagrafoComposto(document, paragraph, run, run2, "3.3.1.1. ",
						"Assim, declara-se ciente o EMITENTE que qualquer alteraÃ§Ã£o"
								+ " nas condiÃ§Ãµes inicialmente informadas para a contrataÃ§Ã£o,"
								+ " tais como, mas nÃ£o se limitando, por exemplo, a(s) idade(s)"
								+ " do(s) proponente(s), poderÃ¡ refletir em modificaÃ§Ã£o no prÃªmio"
								+ " dos seguros a serem contratados para a devida formalizaÃ§Ã£o deste"
								+ " emprÃ©stimo com garantia imobiliÃ¡ria.",
						true, false);
			}

			geraParagrafoComposto(document, paragraph, run, run2, "3.3.1.2. ",
					"Declara ainda o EMITENTE e o(s) TERCEIROS(S) GARANTIDOR(ES) que:", true, false,
					ParagraphAlignment.LEFT);

			CTNumbering cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML);
			CTAbstractNum cTAbstractNum = cTNumbering.getAbstractNumArray(0);

			// CTAbstractNum cTAbstractNum = getAbstractNumber(STNumberFormat.LOWER_LETTER);
			XWPFAbstractNum abstractNum = new XWPFAbstractNum(cTAbstractNum);
			XWPFNumbering numbering = document.createNumbering();
			BigInteger abstractNumID = numbering.addAbstractNum(abstractNum);
			BigInteger numID = numbering.addNum(abstractNumID);

			geraParagrafoBulletList(document, paragraph, run, numID,
					"tem(tÃªm) ciÃªncia e concorda(m) integralmente com os termos das condiÃ§Ãµes gerais "
							+ "ora apresentadas com relaÃ§Ã£o ao Seguro de pessoa com cobertura de Morte e "
							+ "Invalidez Permanente por Acidente (MIP) e ao Seguro de danos com cobertura de "
							+ "Danos FÃ­sicos ao ImÃ³vel (DFI), tendo pleno conhecimento de todas as suas "
							+ "coberturas e riscos excluÃ­dos ",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID,
					"os prÃ³prios EMITENTE ou seus beneficiÃ¡rios, herdeiros ou sucessores, deverÃ£o "
							+ "comunicar ao CREDOR e a Seguradora, imediatamente e por escrito, a ocorrÃªncia "
							+ "de qualquer sinistro, bem como, qualquer evento suscetÃ­vel de agravar "
							+ "consideravelmente o risco coberto, sob pena de perder o direito Ã  indenizaÃ§Ã£o se "
							+ "for provado que silenciou de mÃ¡-fÃ©;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID,
					"autoriza(m), desde jÃ¡, de forma expressa, irrevogÃ¡vel e inequÃ­voca, que a "
							+ "Seguradora realize o levantamento de informaÃ§Ãµes mÃ©dicas em hospitais, clÃ­nicas "
							+ "e/ou consultÃ³rios, bem como, que solicite a realizaÃ§Ã£o de perÃ­cia mÃ©dica quando	necessÃ¡ria.",
					false);

			geraParagrafoComposto(document, paragraph, run, run2, "3.3.2. ",
					"Se, em decorrÃªncia de sinistro, " + "a Seguradora por qualquer motivo "
							+ "desembolsar indenizaÃ§Ã£o em valor " + "insuficiente a quitaÃ§Ã£o do saldo"
							+ " devedor do emprÃ©stimo objeto deste " + "instrumento, ficarÃ¡(Ã£o) o EMITENTE ou seu(s)"
							+ " herdeiro(s) e/ou sucessor(es) obrigado(s) a efetiva"
							+ " liquidaÃ§Ã£o do saldo devedor remanescente perante o CREDOR.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "3.3.3. ",
					"Na hipÃ³tese da clÃ¡usula acima, no caso de nÃ£o liquidaÃ§Ã£o do"
							+ " saldo remanescente pelos DEVEDOR(ES), seus herdeiros e"
							+ " sucessores a qualquer tÃ­tulo, sobre estes incidirÃ¡ os encargos"
							+ " moratÃ³rios previstos na clÃ¡usula 6, bem como a respectiva "
							+ "execuÃ§Ã£o da garantia pelo CREDOR ou quem vier a substituÃ­-lo.",
					true, false);

			fazParagrafoSimples(document, paragraph, run, "4. DA CONCESSÃO DO CRÃDITO", true);

			geraParagrafoComposto(document, paragraph, run, run2, "4.1. ",
					"O EMITENTE pagarÃ¡ por esta CCB ao CREDOR ou a quem este "
							+ "vier a indicar, em moeda corrente nacional, o Valor do "
							+ "CrÃ©dito acrescido de encargos, conforme expressamente "
							+ "indicado na clÃ¡usula 2 acima, calculados desde a data da "
							+ "emissÃ£o desta CCB pelo EMITENTE atÃ© a data do seu respectivo "
							+ "pagamento integral ao CREDOR, acrescidos, quando aplicÃ¡veis,"
							+ " dos encargos moratÃ³rios, conforme disposto na presente CCB; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "4.2. ",
					"O EMITENTE tem expresso conhecimento de que os juros"
							+ " ajustados para o emprÃ©stimo a que se refere Ã  presente"
							+ " CCB sÃ£o calculados, sempre e invariavelmente, de forma"
							+ " diÃ¡ria e capitalizada, conforme permitido pela legislaÃ§Ã£o" + " aplicÃ¡vel; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "4.3. ",
					"O EMITENTE declara que tomou conhecimento do cÃ¡lculo do CET"
							+ " indicado no item 2.4 acima, previamente Ã  operaÃ§Ã£o de "
							+ "emprÃ©stimo contratada por meio da presente CCB, atravÃ©s "
							+ "de planilha de cÃ¡lculo que lhe foi apresentada pelo CREDOR; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "4.4. ",
					"O EMITENTE concorda que a LiberaÃ§Ã£o do CrÃ©dito "
							+ "prevista na clÃ¡usula 2.5 estÃ¡ condicionada ao cumprimento"
							+ " das seguintes condiÃ§Ãµes precedentes, de forma cumulativa"
							+ " e satisfatÃ³ria para o CREDOR:",
					true, false);

			CTNumbering cTNumbering2 = CTNumbering.Factory.parse(cTAbstractNumBulletXML_NoLeft);
			CTAbstractNum cTAbstractNum2 = cTNumbering2.getAbstractNumArray(0);
			XWPFAbstractNum abstractNum2 = new XWPFAbstractNum(cTAbstractNum2);
			XWPFNumbering numbering2 = document.createNumbering();
			BigInteger abstractNumID2 = numbering2.addAbstractNum(abstractNum2);
			BigInteger numID2 = numbering2.addNum(abstractNumID2);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Entrega de todas as vias da CCB e Instrumento Particular"
							+ " de AlienaÃ§Ã£o FiduciÃ¡ria de Bem(ns) ImÃ³vel(eis) em Garantia e "
							+ "Outras AvenÃ§as, devidamente assinadas pelas Partes com todas as "
							+ "firmas reconhecidas ou mediante assinatura eletrÃ´nica compatÃ­vel"
							+ " com os padrÃµes do ICP-BRASIL;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Entrega da matrÃ­cula atualizada com o registro da alienaÃ§Ã£o "
							+ "fiduciÃ¡ria do imÃ³vel descrito na clÃ¡usula 3 dessa CCB" + " em favor do CREDOR.",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"No caso de haver processo judicial em andamento,"
							+ " a ser quitado na forma do ANEXO II da presente CCB,"
							+ " concorda o EMITENTE que a liberaÃ§Ã£o do crÃ©dito estarÃ¡"
							+ " condicionada Ã  comprovaÃ§Ã£o do protocolo do acordo "
							+ "assinado pelas partes litigantes nos autos, o qual deve"
							+ " conter obrigatoriamente a menÃ§Ã£o Ã  quitaÃ§Ã£o e o pedido" + " extinÃ§Ã£o do processo.",
					false);
			
			geraParagrafoBulletList(document, paragraph, run, numID2,
					"EmissÃ£o da CertidÃ£o Negativa de DÃ©bitos â CND Municipal atualizada, em que nÃ£o"
					+ " conste dÃ©bitos de Imposto Predial e Territorial Urbano â IPTU.",
					false);
			
			geraParagrafoBulletList(document, paragraph, run, numID2,
					"EmissÃ£o da CertidÃ£o Negativa de DÃ©bitos â CND dos dÃ©bitos condominiais.",
					false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.4.1. ",
					"Caso haja parcelamento judicial ou administrativo vigente para pagamento dos dÃ©bitos de IPTU "
					+ "ou condomÃ­nio que torne possÃ­vel a emissÃ£o da CND, pelo fato da existÃªncia da dÃ­vida ainda"
					+ " representar risco Ã  garantia, Ã© condiÃ§Ã£o necessÃ¡ria Ã  LiberaÃ§Ã£o do CrÃ©dito que toda a dÃ­vida"
					+ " seja quitada.",
					true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.4.2. ",
					"Caso existam dÃ©bitos municipais de IPTU ou condomÃ­nio, parcelados ou nÃ£o, ajuizados ou nÃ£o,"
					+ " o(a) EMITENTE autoriza o desconto destes valores para quitaÃ§Ã£o das dÃ­vidas nos termos do"
					+ " ANEXO II, caso em que se compromete a encaminhar ao CREDOR as respectivas guias para pagamento.",
					true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.4.3. ",
					"Caso a CertidÃ£o de DÃ©bitos seja positiva, a exclusivo critÃ©rio do CREDOR a operaÃ§Ã£o "
					+ "poderÃ¡ ser cancelada, devendo o EMITENTE reembolsar os valores gastos atÃ© o registro"
					+ " da garantia.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "4.5. ",
					"O(A) EMITENTE concorda que, caso as condiÃ§Ãµes precedentes "
							+ "acima nÃ£o sejam cumpridas no prazo de atÃ© 30 (trinta) "
							+ "dias corridos contados da emissÃ£o da CCB, o referido tÃ­tulo"
							+ " poderÃ¡, a critÃ©rio do CREDOR, ser considerado cancelado,"
							+ " deixando de surtir efeitos, obrigaÃ§Ãµes, direitos e deveres "
							+ "Ã s Partes, devendo o(a) EMITENTE reembolsar todos os gastos "
							+ "despendidos pelo CREDOR. ",
					true, false);

			fazParagrafoSimples(document, paragraph, run, "5. DA FORMA DE PAGAMENTO E PRAZO", true);

			geraParagrafoComposto(document, paragraph, run, run2, "5.1. DepÃ³sito em Conta Corrente: ",
					"Fica o EMITENTE instruÃ­do pelo CREDOR, em carÃ¡ter irrevogÃ¡vel e irretratÃ¡vel,"
							+ " a depositar em conta corrente nos termos da clÃ¡usula 2.6 acima,"
							+ " de titularidade do CREDOR ou a quem este vier a indicar (âConta Correnteâ),"
							+ " os valores relativos Ã s parcelas da CCB indicadas no ANEXO I, "
							+ "acrescidas dos respectivos encargos, inclusive debitar os valores"
							+ " correspondentes a mora, IOF, tarifas e demais despesas aqui previstas.",
					true, false);

			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingBetween(1);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.2. ");
			run.setBold(true);
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("O(s) EMITENTE(S) declara(m)-se ciente(s) de que o pagamento "
					+ "das parcelas mensais e os encargos, conforme valores e prazos "
					+ "estabelecidos no ANEXO I dessa CCB, ");
			run2.setBold(false);

			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("nÃ£o estÃ£o vinculados Ã  data de liberaÃ§Ã£o do Valor LÃ­quido do CrÃ©dito");
			run.setBold(true);

			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.removeCarriageReturn();
			run2.setText(", devendo tais encargos serem pagos a partir da data ajustada" + " no item ");

			run = paragraph.createRun();
			run.setFontSize(12);
			run.removeCarriageReturn();
			run.setText("2.7");
			run.setBold(true);

			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.removeCarriageReturn();
			run2.setText(
					", sob pena de incidÃªncia de atualizaÃ§Ã£o monetÃ¡ria, juros e multa, de acordo com o quanto disposto na clÃ¡usula 6.");
			run2.addCarriageReturn();

			/*
			 * XWPFRun run5 = paragraph.createRun(); run5.setFontSize(12);
			 * run5.removeCarriageReturn(); run5.setText("2.7"); run5.addCarriageReturn();
			 * 
			 * XWPFRun run6 = paragraph.createRun(); run6.setFontSize(12);
			 * run6.removeCarriageReturn(); run6.
			 * setText(", sob pena de incidÃªncia de atualizaÃ§Ã£o monetÃ¡ria, juros e multa, de acordo com o quanto disposto na clÃ¡usula 6."
			 * ); run6.addCarriageReturn();
			 */

			geraParagrafoComposto(document, paragraph, run, run2, "5.3. ",
					"Na hipÃ³tese de haver parcelas mensais vencidas e nÃ£o pagas na "
							+ "data de liberaÃ§Ã£o do Valor LÃ­quido do CrÃ©dito, o(s) DEVEDOR(ES),"
							+ " desde jÃ¡, autoriza(m) o CREDOR a descontar desse valor,"
							+ " descrito na clÃ¡usula 2.1.4, eventual montante devido em"
							+ " razÃ£o do nÃ£o pagamento das parcelas mensais ajustadas"
							+ " conforme ANEXO I, incluindo encargos moratÃ³rios conforme"
							+ " previsto na ClÃ¡usula 6 dessa CCB.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "5.4. ",
					"Os pagamentos devidos ao CREDOR, previstos na presente CCB,"
							+ " serÃ£o efetuados via boleto bancÃ¡rio a ser encaminhado ao"
							+ " endereÃ§o fÃ­sico ou eletrÃ´nico do EMITENTE constante do item"
							+ " II da clÃ¡usula 1. Fica estabelecido que a falta de recebimento "
							+ "do aviso de cobranÃ§a ou boleto bancÃ¡rio nÃ£o exime o EMITENTE de "
							+ "efetuar os pagamentos previstos nesta CCB, nem constitui justificativa"
							+ " para atraso em sua liquidaÃ§Ã£o ou isenÃ§Ã£o de penalidades moratÃ³rias,"
							+ " cabendo ao EMITENTE entrar em contato com o CREDOR, ou quem o substituir,"
							+ " em tempo hÃ¡bil, visando Ã  obtenÃ§Ã£o de boleto para pagamento.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "5.5. ",
					"Em razÃ£o do acordado nesta cÃ©dula quanto ao valor, prestaÃ§Ãµes,"
							+ " parcelas, reajustes e atualizaÃ§Ãµes, o pagamento de qualquer"
							+ " prestaÃ§Ã£o atualizada de maneira diversa da estabelecida nesta CCB,"
							+ " inclusive perante terceiros autorizados a recebÃª-las,"
							+ " nÃ£o implicarÃ¡ na quitaÃ§Ã£o do respectivo dÃ©bito ou " + "repactuaÃ§Ã£o da dÃ­vida.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "5.6. ",
					"Qualquer diferenÃ§a verificada entre os crÃ©ditos"
							+ " efetivados na conta corrente do CREDOR e a sistemÃ¡tica"
							+ " de cÃ¡lculos dos valores estabelecidos nesta CCB,"
							+ " deverÃ¡ ser imediatamente liquidada pelo EMITENTE no "
							+ "prazo mÃ¡ximo de 48 (quarenta e oito) horas, contadas"
							+ " do aviso que o CREDOR lhe dirigir neste sentido,"
							+ " caso em que, nÃ£o realizado o pagamento apÃ³s esse " + "prazo, estarÃ¡ em mora.",
					true, false);

			fazParagrafoSimples(document, paragraph, run, "6. DO ATRASO NO PAGAMENTO E ENCARGOS MORATÃRIOS", true);

			geraParagrafoComposto(document, paragraph, run, run2, "6.1. ",
					"Na hipÃ³tese de inadimplemento ou mora, o EMITENTE estarÃ¡ "
							+ "obrigado a pagar ao CREDOR ou a quem este indicar, cumulativamente,"
							+ " alÃ©m da quantia correspondente Ã  dÃ­vida em aberto, os seguintes " + "encargos: ",
					true, false);

			cTNumbering2 = CTNumbering.Factory.parse(cTAbstractNumBulletXML_NoLeft_NoHanging_bold);
			cTAbstractNum2 = cTNumbering2.getAbstractNumArray(0);
			abstractNum2 = new XWPFAbstractNum(cTAbstractNum2);
			numbering2 = document.createNumbering();
			abstractNumID2 = numbering2.addAbstractNum(abstractNum2);
			numID2 = numbering2.addNum(abstractNumID2);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Juros remuneratÃ³rios nos mesmos percentuais das taxas "
							+ "contratadas nessa CCB, calculados a partir do vencimento "
							+ "da(s) parcela(s) em aberto atÃ© a data do efetivo pagamento;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Juros de mora Ã  razÃ£o de 1% a.m. (um por cento ao mÃªs), "
							+ "calculados a partir do vencimento da(s) parcela(s) em aberto"
							+ " atÃ© a data do efetivo pagamento;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Multa contratual, de natureza nÃ£o compensatÃ³ria, de 2% (dois por cento)"
							+ " incidente sobre o montante atualizado (juros remuneratÃ³rios e juros de mora)"
							+ " total do dÃ©bito apurado e nÃ£o pago;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Na hipÃ³tese do CREDOR vir a ser compelido a recorrer"
							+ " a meios administrativos ou judiciais para receber o seu crÃ©dito,"
							+ " as despesas de cobranÃ§a, estas limitadas a 20% (vinte por cento)"
							+ " sobre o valor do saldo devedor e, havendo procedimento judicial, "
							+ "custas processuais e honorÃ¡rios advocatÃ­cios, estes fixados judicialmente.",
					false);

			fazParagrafoSimples(document, paragraph, run, "7. DO VENCIMENTO ANTECIPADO", true);

			geraParagrafoComposto(document, paragraph, run, run2, "7.1. ",
					"AlÃ©m das demais hipÃ³teses estabelecidas em lei e nesta CCB,"
							+ " a dÃ­vida aqui contraÃ­da pelo EMITENTE, a partir do primeiro "
							+ "dia Ãºtil da liberaÃ§Ã£o do Valor do CrÃ©dito, reputar-se-Ã¡ "
							+ "antecipadamente vencida, facultando-se ao credor da CCB exigir "
							+ "a imediata e integral satisfaÃ§Ã£o de seu crÃ©dito, independentemente "
							+ "de aviso ou notificaÃ§Ã£o judicial ou extrajudicial de qualquer espÃ©cie,"
							+ " na ocorrÃªncia de qualquer das hipÃ³teses previstas nos artigos 333 e "
							+ "1.425 do CÃ³digo Civil Brasileiro e, ainda, nas seguintes hipÃ³teses:",
					true, false);

			cTNumbering2 = CTNumbering.Factory.parse(cTAbstractNumBulletXML_NoLeft_NoHanging_bold2);
			cTAbstractNum2 = cTNumbering2.getAbstractNumArray(0);
			abstractNum2 = new XWPFAbstractNum(cTAbstractNum2);
			numbering2 = document.createNumbering();
			abstractNumID2 = numbering.addAbstractNum(abstractNum2);
			numID2 = numbering2.addNum(abstractNumID2);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se ocorrer inadimplemento de qualquer obrigaÃ§Ã£o assumida pelo EMITENTE, "
							+ "em consonÃ¢ncia com as clÃ¡usulas e condiÃ§Ãµes aqui estabelecidas, "
							+ "principalmente no que tange ao pagamento das parcelas devidas "
							+ "em decorrÃªncias do emprÃ©stimo a ele concedido por forÃ§a da " + "presente CCB;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2, "Se ocorrer inadimplemento "
					+ "de qualquer obrigaÃ§Ã£o assumida pelo EMITENTE, e/ou quaisquer sociedades"
					+ " direta ou indiretamente ligadas, coligadas, controladoras ou controladas"
					+ " pelo EMITENTE (doravante denominadas âAFILIADASâ), inclusive no exterior,"
					+ " de suas obrigaÃ§Ãµes decorrentes de outros contratos, emprÃ©stimos ou descontos"
					+ " celebrados com o CREDOR e/ou quaisquer sociedades, direta ou indiretamente,"
					+ " ligadas, coligadas, controladoras ou controladas pelo credor da CCB ou seu "
					+ "cessionÃ¡rio, e/ou com terceiros, e/ou rescisÃ£o ou declaraÃ§Ã£o de vencimento "
					+ "antecipado dos respectivos documentos, por culpa do EMITENTE e/ou de quaisquer " + "AFILIADAS;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se for protestado qualquer "
							+ "tÃ­tulo de responsabilidade do EMITENTE em razÃ£o do inadimplemento de obrigaÃ§Ã£o "
							+ "cujo valor individual ou em conjunto seja igual ou superior a R$ 100.000,00 "
							+ "(cem mil reais), sem que a justificativa para tal medida tenha sido apresentada"
							+ " ao credor da CCB, no prazo que lhe tiver sido solicitada ou, sendo ou tendo sido"
							+ " apresentada a justificativa, se esta nÃ£o for considerada satisfatÃ³ria pelo CREDOR,"
							+ " ressalvado o protesto tirado por erro ou mÃ¡-fÃ© do respectivo portador;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se O EMITENTE for inscrito no "
							+ "Cadastro de Emitentes de Cheques sem Fundo â CCF, ou, ainda, constem informaÃ§Ãµes "
							+ "negativas a seu respeito no Sistema de InformaÃ§Ãµes de CrÃ©dito do Banco Central,"
							+ " que, a critÃ©rio do credor da CCB, possa afetar a sua capacidade de cumprir as "
							+ "obrigaÃ§Ãµes assumidas na presente CCB ou no Termo de Garantia;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se o EMITENTE e/ou quaisquer AFILIADAS,"
							+ " inclusive no exterior, tornarem-se insolventes, requerer(em) ou tiver(em), falÃªncia, "
							+ "insolvÃªncia civil, recuperaÃ§Ã£o judicial ou extrajudicial requerida ou decretada, sofrer "
							+ "intervenÃ§Ãµes, regime de administraÃ§Ã£o especial temporÃ¡ria, ou liquidaÃ§Ã£o judicial ou"
							+ " extrajudicial;",
					false);
			if(objetoCcb.isTerceiroGarantidor()) {
				geraParagrafoBulletList(document, paragraph, run, numID2, "Se for comprovada a falsidade de qualquer"
						+ " declaraÃ§Ã£o, informaÃ§Ã£o ou documento que houver sido, respectivamente, firmada, prestada ou "
						+ "entregue pelo EMITENTE e TERCEIRO(S) GARANTIDOR(ES), ao CREDOR;", false);
			} else {
				geraParagrafoBulletList(document, paragraph, run, numID2, "Se for comprovada a falsidade de qualquer"
						+ " declaraÃ§Ã£o, informaÃ§Ã£o ou documento que houver sido, respectivamente, firmada, prestada ou"
						+ " entregue pelo EMITENTE, ao CREDOR;", false);
			}

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se o EMITENTE sofrer qualquer (quaisquer) "
							+ "medida(s) judicial(ais) ou extrajudicial(ais) que por qualquer forma, possa(m) afetar "
							+ "negativamente os crÃ©ditos do emprÃ©stimo e/ou as garantias conferidas ao credor da CCB;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se as garantias fidejussÃ³rias, "
							+ "ora e/ou que venham a ser eventualmente convencionadas, por qualquer fato atinente"
							+ " ao seu objeto ou prestador se tornar inÃ¡beis, imprÃ³prias, ou insuficientes para "
							+ "assegurar o pagamento da dÃ­vida, e desde que nÃ£o sejam substituÃ­das, ou complementadas,"
							+ " quando solicitada por escrito pelo CREDOR ou a quem este vier a indicar;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se, sem o expresso consentimento "
							+ "do credor da CCB ocorrer a transferÃªncia a terceiros dos direitos e obrigaÃ§Ãµes do"
							+ " EMITENTE previstos nesta CCB e no Termo de Garantia;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se, sem o expresso consentimento do "
							+ "credor da CCB ocorrer alienaÃ§Ã£o, cessÃ£o, doaÃ§Ã£o ou transferÃªncia, por qualquer meio, "
							+ "de bens, ativos ou direitos de propriedade do EMITENTE e/ou de quaisquer AFILIADAS, "
							+ "quando aplicÃ¡vel que, no entendimento do credor, possam levar ao descumprimento das "
							+ "obrigaÃ§Ãµes previstas na presente CCB;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se, sem o expresso consentimento do"
							+ " credor da CCB, o EMITENTE, quando aplicÃ¡vel, tiver total ou parcialmente, o seu"
							+ " controle acionÃ¡rio, direto ou indireto, cedido, transferido ou por qualquer outra"
							+ " forma alienado ou modificado;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se ocorrer mudanÃ§a ou alteraÃ§Ã£o do"
							+ " objeto social do EMITENTE, quando aplicÃ¡vel, de forma a alterar as atividades"
							+ " principais ou a agregar Ã s suas atividades novos negÃ³cios que possam representar "
							+ "desvios em relaÃ§Ã£o Ã s atividades atualmente desenvolvidas;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se, sem o expresso consentimento do"
							+ " credor da CCB, o EMITENTE sofrer, durante a vigÃªncia desta CCB, qualquer operaÃ§Ã£o"
							+ " de transformaÃ§Ã£o, incorporaÃ§Ã£o, fusÃ£o ou cisÃ£o;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID2,
					"Se a garantia real objeto do"
							+ " Instrumento Particular de AlienaÃ§Ã£o FiduciÃ¡ria de Bem ImÃ³vel nÃ£o for efetivamente"
							+ " registrada junto ao RGI no prazo de atÃ© 30(trinta) dias corridos a contar da"
							+ " emissÃ£o desta CCB; e",
					false);
			if(objetoCcb.isTerceiroGarantidor()) {
				geraParagrafoBulletList(document, paragraph, run, numID2,
						"o)	Se o Bem ImÃ³vel objeto da garantia Ã  presente CCB apresentar quaisquer caracterÃ­sticas,"
						+ " Ã´nus ou gravame ou caso ocorra qualquer ato ou omissÃ£o por parte de EMITENTE e/ou TERCEIRO(S)"
						+ " GARANTIDOR(ES), que impeÃ§a a efetiva constituiÃ§Ã£o da garantia regulada nos termos Instrumento"
						+ " Particular de AlienaÃ§Ã£o FiduciÃ¡ria de Bem ImÃ³vel.",
						false);
			} else {
				geraParagrafoBulletList(document, paragraph, run, numID2,
						"Se o Bem ImÃ³vel objeto" + " da garantia Ã  presente CCB apresentar quaisquer caracterÃ­sticas, Ã´nus "
								+ "ou gravame ou caso ocorra qualquer ato ou omissÃ£o por parte do EMITENTE,"
								+ " que impeÃ§a a efetiva constituiÃ§Ã£o da garantia regulada nos termos Instrumento"
								+ " Particular de AlienaÃ§Ã£o FiduciÃ¡ria de Bem ImÃ³vel.",
						false);
			}

			geraParagrafoComposto(document, paragraph, run, run2, "7.2. ",
					"No caso de falta de pagamento"
							+ " de qualquer parcela(s) na(s) data(s) de seu(s) respectivo(s) vencimento(s),"
							+ " o CREDOR poderÃ¡, por mera liberdade e sem que tal situaÃ§Ã£o caracterize novaÃ§Ã£o"
							+ " ou alteraÃ§Ã£o das condiÃ§Ãµes estabelecidas nesta CCB â optar pela cobranÃ§a somente"
							+ " da(s) parcela(s) devida(s) em aberto, comprometendo-se o EMITENTE,"
							+ " em contrapartida, a liquidÃ¡-la(s) imediatamente quando instado(s) para tal,"
							+ " sob pena de ultimar-se o vencimento antecipado de toda a dÃ­vida; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "7.2.1. ",
					"Declarado o vencimento "
							+ "antecipado de toda a dÃ­vida, o credor da CCB apresentarÃ¡ ao EMITENTE notificaÃ§Ã£o "
							+ "contendo o saldo devedor final, incluindo principal, juros, encargos, despesas e "
							+ "tributos, a ser pago pelo EMITENTE no dia Ãºtil imediatamente subsequente ao "
							+ "recebimento de referida notificaÃ§Ã£o, sob pena de ser considerado em mora, "
							+ "independentemente de qualquer aviso ou notificaÃ§Ã£o judicial ou extrajudicial;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "7.2.2. ", "Na declaraÃ§Ã£o de vencimento "
					+ "antecipado da dÃ­vida pelo credor da CCB, alÃ©m do valor apurado nos termos do item 7.2.1 acima,"
					+ " serÃ£o acrescidos os encargos previstos na clÃ¡usula 6 Ã s parcelas vencidas. ", true, false);

			fazParagrafoSimples(document, paragraph, run, "8. LIQUIDAÃÃO ANTECIPADA", true);

			geraParagrafoComposto(document, paragraph, run, run2, "8.1. ", "O EMITENTE poderÃ¡ liquidar"
					+ " antecipadamente, total ou parcialmente, suas obrigaÃ§Ãµes decorrentes desta CCB, "
					+ "desde que previamente acordado, de modo satisfatÃ³rio ao credor da CCB e ao EMITENTE,"
					+ " as condiÃ§Ãµes de tal liquidaÃ§Ã£o antecipada. Para tanto, o EMITENTE deverÃ¡ encaminhar"
					+ " ao credor da CCB, solicitaÃ§Ã£o por escrito, com antecedÃªncia mÃ­nima de 10 (dez) dias Ãºteis;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "8.1.1. ",
					"Se indicada a Tarifa de "
							+ "LiquidaÃ§Ã£o Antecipada no item 2.10 acima, o EMITENTE, desde jÃ¡, se obriga a pagar "
							+ "ao CREDOR, na data da liquidaÃ§Ã£o, a Tarifa de LiquidaÃ§Ã£o Antecipada sobre o valor"
							+ " efetivamente pago antecipadamente, a tÃ­tulo de indenizaÃ§Ã£o pelos custos relacionados"
							+ " com a quebra de captaÃ§Ã£o de recursos;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "8.1.2. ", "Nas situaÃ§Ãµes em que as despesas "
					+ "associadas Ã  contrataÃ§Ã£o realizada por meio desta CCB forem tambÃ©m objeto de financiamento "
					+ "ou emprÃ©stimo, essas despesas integrarÃ£o igualmente a operaÃ§Ã£o para apuraÃ§Ã£o do valor "
					+ "presente para fins de amortizaÃ§Ã£o, total ou parcial, da dÃ­vida ainda em aberto;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "8.1.3. ", "Caso haja saldo devedor a ser"
					+ " pago acrescentar-se-Ã£o, Ã s prestaÃ§Ãµes em atraso, e as penalidades previstas neste instrumento,"
					+ " bem como os juros remuneratÃ³rios calculados pro rata die e quaisquer outras despesas de "
					+ "responsabilidade do EMITENTE nos termos desta CCB;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "8.1.4. ",
					"Sempre que for necessÃ¡rio,"
							+ " a apuraÃ§Ã£o do saldo devedor do EMITENTE serÃ¡ realizada pelo CREDOR mediante planilha "
							+ "de cÃ¡lculo, que constituirÃ¡ documento integrante e inseparÃ¡vel da presente CCB. ",
					true, false);

			fazParagrafoSimples(document, paragraph, run, "9.	DECLARAÃÃES", true);

			geraParagrafoComposto(document, paragraph, run, run2, "9.1. ",
					"As Partes signatÃ¡rias, cada uma por si, declaram e garantem que: ", true, false);

			cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML_NoHanging_bold);
			cTAbstractNum = cTNumbering.getAbstractNumArray(0);
			abstractNum = new XWPFAbstractNum(cTAbstractNum);
			numbering = document.createNumbering();
			abstractNumID = numbering.addAbstractNum(abstractNum);
			numID = numbering.addNum(abstractNumID);

			geraParagrafoBulletListComposta(document, paragraph, run, run2,
					"Possui plena capacidade e "
							+ "legitimidade para celebrar a presente CCB, realizar todas as operaÃ§Ãµes e cumprir todas "
							+ "as obrigaÃ§Ãµes aqui assumidas",
					", bem como dos instrumentos de garantia, tendo tomado todas as medidas"
							+ " de natureza societÃ¡ria e outras eventualmente necessÃ¡rias para autorizar "
							+ "a sua celebraÃ§Ã£o, implementaÃ§Ã£o e cumprimento de todas as obrigaÃ§Ãµes " + "constituÃ­das;",
					true, false, numID, UnderlinePatterns.SINGLE);

			geraParagrafoBulletList(document, paragraph, run, numID, "A celebraÃ§Ã£o desta CCB e do Termo de Garantia,"
					+ " e o cumprimento das obrigaÃ§Ãµes de cada uma das Partes: (a) nÃ£o violam qualquer disposiÃ§Ã£o contida"
					+ " nos seus documentos societÃ¡rios; (b) nÃ£o violam qualquer lei, regulamento, decisÃ£o judicial, "
					+ "administrativa ou arbitral, aos quais a respectiva Parte esteja vinculada; (c) nÃ£o exigem qualquer"
					+ " consentimento, aÃ§Ã£o ou autorizaÃ§Ã£o, prÃ©via ou posterior, de terceiros;", false);

			geraParagrafoBulletList(document, paragraph, run, numID, "Esta CCB e o Termo de Garantia sÃ£o validamente "
					+ "celebrados e constituem obrigaÃ§Ã£o legal, vÃ¡lida, vinculante e exequÃ­vel contra cada uma das Partes,"
					+ " de acordo com os seus termos;", false);

			geraParagrafoBulletList(document, paragraph, run, numID, "Cada Parte estÃ¡ apta a cumprir as obrigaÃ§Ãµes ora"
					+ " previstas nesta CCB e nos instrumentos de garantia, e agirÃ¡ em relaÃ§Ã£o aos mesmos de boa-fÃ© e com"
					+ " lealdade;", false);

			geraParagrafoBulletList(document, paragraph, run, numID, "Nenhuma Parte depende economicamente da outra;",
					false);

			geraParagrafoBulletList(document, paragraph, run, numID, "Nenhuma das Partes se encontra em estado de"
					+ " necessidade ou sob coaÃ§Ã£o para celebrar esta CCB e/ou quaisquer contratos e compromissos a "
					+ "ela relacionados e acessÃ³rios ", false);

			geraParagrafoBulletList(document, paragraph, run, numID, "As discussÃµes sobre o objeto contratual, "
					+ "crÃ©dito, encargos incidentes e obrigaÃ§Ãµes acessÃ³rias, oriundos desta CCB e dos instrumentos"
					+ " de garantia, foram feitas, conduzidas e implementadas por livre iniciativa das Partes;", false);

			geraParagrafoBulletList(document, paragraph, run, numID,
					"O CREDOR e EMITENTE, sÃ£o pessoas devidamente estruturadas,"
							+ " qualificadas e capacitadas para entender a estrutura financeira e jurÃ­dica objeto desta CCB, e estÃ£o "
							+ "acostumadas a celebrar, em seus respectivos campos de atuaÃ§Ã£o, tÃ­tulos e instrumentos de garantia semelhantes"
							+ " aos previstos nesta CCB, nÃ£o havendo entre as Partes qualquer relaÃ§Ã£o de hipossuficiÃªncia ou ainda natureza de"
							+ " consumo na relaÃ§Ã£o aqui tratada.",
					false);
			
			geraParagrafoBulletList(document, paragraph, run, numID,
					"EMITENTE(S), TERCEIRO(S) GARANTIDOR(ES), AVALISTA(S) e ANUENTE(S) declaram expressamente,"
					+ " sob pena de responsabilidade civil e criminal, que nÃ£o possuem nenhum negÃ³cio jurÃ­dico"
					+ " pactuado entre si ou com terceiros que tenha relaÃ§Ã£o com emissÃ£o desta CCB ou com a garantia"
					+ " oferecida, estando cientes de que nada poderÃ¡ ser oponÃ­vel ao credor com a finalidade de "
					+ "prejudicar os pagamentos ou a execuÃ§Ã£o da garantia.",
					false);

			fazParagrafoSimples(document, paragraph, run, "10.	DAS DISPOSIÃÃES FINAIS", true);

			geraParagrafoComposto(document, paragraph, run, run2, "10.1. TolerÃ¢ncia: ",
					"A tolerÃ¢ncia nÃ£o implica perdÃ£o, renÃºncia, novaÃ§Ã£o ou alteraÃ§Ã£o da dÃ­vida ou das condiÃ§Ãµes aqui previstas e o pagamento do principal, mesmo sem ressalvas, nÃ£o serÃ¡ considerado ou presumido a quitaÃ§Ã£o dos encargos. Dessa forma, as Partes acordam que qualquer prÃ¡tica diversa da aqui pactuada, mesmo que reiterada, nÃ£o poderÃ¡ ser interpretada como novaÃ§Ã£o;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.1.1 DeclaraÃ§Ãµes EspecÃ­ficas: ",
					"O EMITENTE declara que: "
							+ "(i) estÃ¡ ciente que o surto do novo coronavÃ­rus (COVID-19), reconhecido oficialmente como pandemia pela "
							+ "OrganizaÃ§Ã£o Mundial de SaÃºde (OMS), Ã© anterior Ã  celebraÃ§Ã£o desta CCB e que a pandemia nÃ£o apresenta "
							+ "carÃ¡ter de imprevisibilidade, extraordinariedade ou superveniÃªncia no presente momento, (ii) reconhece "
							+ "que tais eventos nÃ£o configuram caso fortuito ou de forÃ§a maior, conforme definiÃ§Ã£o do artigo 393 do CÃ³digo"
							+ " Civil, e (iii) compromete-se a honrar as obrigaÃ§Ãµes assumidas nos termos desta CCB; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2,
					"10.2. ComunicaÃ§Ã£o aos ServiÃ§os de ProteÃ§Ã£o ao CrÃ©dito: ",
					"Na hipÃ³tese de ocorrer descumprimento de qualquer obrigaÃ§Ã£o ou atraso no pagamento, o CREDOR ou a quem este"
							+ " vier a indicar poderÃ¡ comunicar o fato a qualquer serviÃ§o de proteÃ§Ã£o ao crÃ©dito, como Serasa Experian ou"
							+ " qualquer outro Ã³rgÃ£o encarregado de cadastrar atraso nos pagamentos e o descumprimento de obrigaÃ§Ãµes "
							+ "contratuais, informando o nome do EMITENTE.",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.3. ReforÃ§o de Garantias: ", "O CREDOR poderÃ¡, "
					+ "a qualquer tempo, exigir reforÃ§o de garantias, ficando estipulado o prazo de 5 (cinco) dias Ãºteis "
					+ "contados da data de sua solicitaÃ§Ã£o, pelo CREDOR, por carta sob protocolo ou registro postal, para "
					+ "que o EMITENTE providencie o respectivo reforÃ§o, sob pena do imediato vencimento da presente CCB, "
					+ "independentemente de interpelaÃ§Ã£o judicial ou notificaÃ§Ã£o judicial ou extrajudicial;", true,
					false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.4. AlteraÃ§Ã£o da CCB: ",
					"A presente CCB somente poderÃ¡ "
							+ "ser alterada mediante aditivo prÃ³prio devidamente assinado pelas Partes; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2,
					"10.5. ComunicaÃ§Ã£o ao Sistema de InformaÃ§Ã£o de CrÃ©ditos " + "(âSCRâ): ",
					"O CREDOR, neste ato, comunica ao EMITENTE que a presente operaÃ§Ã£o de emprÃ©stimo, serÃ¡ "
							+ "registrada no SCR gerido pelo Banco Central do Brasil (âBACENâ), que tem por finalidade subsidiar"
							+ " o BACEN para fins de supervisÃ£o de risco de crÃ©dito a que estÃ£o expostas as instituiÃ§Ãµes"
							+ " financeiras e ainda intercambiar informaÃ§Ãµes entre as instituiÃ§Ãµes financeiras; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.5.1 ",
					"O EMITENTE poderÃ¡ ter acesso aos dados "
							+ "constantes em seu SCR, por meio de central de atendimento ao pÃºblico do BACEN;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.5.2 ",
					"Em caso de discordÃ¢ncia quanto Ã s informaÃ§Ãµes"
							+ " do SCR, bem como pedidos de correÃ§Ãµes, o EMITENTE deverÃ¡ entrar em contato com a Ouvidoria do CREDOR,"
							+ " nos termos do item 10.11 abaixo;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.5.3 ",
					"O EMITENTE autoriza o CREDOR ou a quem este "
							+ "indicar, a qualquer tempo: a: (i) efetuar consultas ao Sistema de InformaÃ§Ãµes de CrÃ©dito â SCR â do Banco"
							+ " Central do Brasil (âSCRâ), nos termos da ResoluÃ§Ã£o nÂº 3.658, do Conselho MonetÃ¡rio Nacional, de 17.12.2008,"
							+ " conforme alterada e os serviÃ§os de proteÃ§Ã£o ao crÃ©dito SPC, Serasa e outras em que o CREDOR seja "
							+ "cadastrado; (ii) fornecer ao Banco Central do Brasil informaÃ§Ãµes sobre esta CCB, para integrar o SCR; "
							+ "e (iii) proceder conforme disposiÃ§Ãµes que advierem de novas exigÃªncias feitas pelo Banco Central do Brasil"
							+ " ou autoridades. ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.6. Efeitos do CCB: ",
					"As Partes convencionam que as "
							+ "obrigaÃ§Ãµes pecuniÃ¡rias estipuladas na presente CCB passam a vigorar a partir de sua respectiva emissÃ£o;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.7. ", "Se qualquer item ou clÃ¡usula desta CCB "
					+ "vier a ser considerado ilegal, inexequÃ­vel ou, por qualquer motivo, ineficaz, todos os demais itens"
					+ " e clÃ¡usulas continuarÃ£o em vigor, plenamente vÃ¡lidos e eficazes. As Partes, desde jÃ¡, se comprometem"
					+ " a negociar, no menor prazo possÃ­vel, item ou clÃ¡usula que, conforme o caso, venha a substituir o item"
					+ " ou clÃ¡usula ilegal, inexequÃ­vel ou ineficaz. Nessa negociaÃ§Ã£o, deverÃ¡ ser considerado o objetivo das "
					+ "Partes na data de assinatura dessa CCB, bem como o contexto no qual o item ou clÃ¡usula ilegal, inexequÃ­vel"
					+ " ou ineficaz foi inserido.", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.8. Irrevogabilidade e Irretratabilidade: ",
					"A presente CCB Ã© firmada em carÃ¡ter irrevogÃ¡vel e irretratÃ¡vel, obrigando as Partes, seus "
							+ "herdeiros e/ou sucessores; ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.9. Base de Dados: ",
					"O EMITENTE declara e concorda "
							+ "expressamente que ao firmar a presente CCB passarÃ¡ a fazer parte integrante da base de clientes do CREDOR,"
							+ " ou a quem este vier a indicar, autorizando, assim atravÃ©s das informaÃ§Ãµes cadastrais que o CREDOR, ou a "
							+ "quem este vier a indicar, possui a respeito dele o oferecimento de produtos e/ou serviÃ§os;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.10. Ouvidoria: ",
					"O EMITENTE declara ter ciÃªncia de que o "
							+ "CREDOR disponibiliza um canal de Ouvidoria para que sejam feitas sugestÃµes e/ou reclamaÃ§Ãµes atravÃ©s do telefone"
							+ " (11) 3810-9333;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.11. LegislaÃ§Ã£o: ", "Aplica-se a presente CCB, as"
					+ " disposiÃ§Ãµes da Lei 10.931, de 02 de agosto de 2004, e posteriores alteraÃ§Ãµes (âLei 10.931â), declarando"
					+ " o EMITENTE ter conhecimento que a presente CCB Ã© um tÃ­tulo executivo extrajudicial e representa dÃ­vida "
					+ "em dinheiro, certa, lÃ­quida e exigÃ­vel, seja pela soma nela indicada, seja pelo saldo devedor "
					+ "demonstrado em planilha de cÃ¡lculo ou nos extratos de Conta Corrente, a serem emitidos consoante "
					+ "o que preceitua a aludida Lei 10.931;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.11.1  ", "O EMITENTE declara ter ciÃªncia que: (i)"
					+ " o CREDOR integra o Sistema Financeiro Nacional, submetendo-se Ã  disciplina e regras pelo Conselho"
					+ " MonetÃ¡rio Nacional e Banco Central do Brasil; e (ii) as taxas de juros cobradas nas operaÃ§Ãµes "
					+ "financeiras realizadas pelo CREDOR, incluindo a presente CCB, nÃ£o estÃ£o submetidas ao limite de"
					+ " 12% (doze por cento) ao ano, como jÃ¡ decidiu o Supremo Tribunal Federal, sendo legÃ­tima a "
					+ "cobranÃ§a de juros e encargos superiores a esse percentual;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.11.2 ", "A tolerÃ¢ncia, por uma das partes, "
					+ "quanto a alguma demora, atraso ou omissÃ£o da outra parte no cumprimento das obrigaÃ§Ãµes ajustadas"
					+ " neste instrumento, ou a nÃ£o aplicaÃ§Ã£o, na ocasiÃ£o oportuna, das penalidades previstas "
					+ "serÃ¡ considerada mera liberalidade, nÃ£o se configurando como precedente ou novaÃ§Ã£o "
					+ "contratual", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.11.3 ", "Se vier a tornar impossÃ­vel"
					+ " a aplicaÃ§Ã£o das regras previstas nesta CÃ©dula, seja por forÃ§a de eventual carÃ¡ter cogente"
					+ " de imperativos legais que venham a ser baixados, seja em decorrÃªncia de ausÃªncia de consenso"
					+ " entre as Partes, considerar-se-Ã¡ rescindida esta CCB e, em consequÃªncia, a dÃ­vida dela"
					+ " oriunda se considerarÃ¡ antecipadamente vencida, da mesma forma e com os mesmos efeitos "
					+ "previstos, efetivando-se a cobranÃ§a de juros âpro-rata temporisâ; ", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.12. CessÃ£o ou Endosso: ", "O CREDOR fica "
					+ "expressamente autorizado a qualquer tempo, a seu exclusivo critÃ©rio e independentemente da "
					+ "prÃ©via anuÃªncia do EMITENTE, a ceder a terceiros os direitos de crÃ©dito que detÃ©m em razÃ£o desta CCB,"
					+ " bem como a transferi-la a terceiros mediante endosso da âvia negociÃ¡velâ, sendo certo que "
					+ "a cessÃ£o ou o endosso nÃ£o caracterizarÃ£o violaÃ§Ã£o do sigilo bancÃ¡rio em relaÃ§Ã£o ao EMITENTE."
					+ " Ocorrendo a cessÃ£o ou o endosso, o cessionÃ¡rio/endossatÃ¡rio desta CCB assumirÃ¡ automaticamente"
					+ " a qualidade de credor desta CCB, passando a ser titular de todos os direitos e obrigaÃ§Ãµes dela "
					+ "decorrentes; ", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.12.1 ", "ApÃ³s o endosso pelo CREDOR desta CCB,"
					+ " o EMITENTE desde jÃ¡, reconhece a validade da emissÃ£o e do endosso desta CCB de forma fÃ­sica ou eletrÃ´nica, "
					+ "o que Ã© feito com base no art. 889, Â§3Âº, do CÃ³digo Civil. ", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.12.2",
					" Na hipÃ³tese de transferÃªncia da presente CCB,"
							+ " o seu novo titular ficarÃ¡ automaticamente sub-rogado em todos os direitos e garantias que "
							+ "cabiam ao CREDOR original, independentemente de qualquer formalidade, passando a ter acesso "
							+ "livre e direto a todas as informaÃ§Ãµes relacionadas Ã  operaÃ§Ã£o bancÃ¡ria e respectivas garantias,"
							+ " a exemplo de duplicatas e/ou direitos creditÃ³rios e/ou quaisquer outras garantias eventualmente "
							+ "constituÃ­das, reconhecendo o EMITENTE que o novo titular da CCB possui o inequÃ­voco direito de "
							+ "acompanhar detidamente todo o andamento da operaÃ§Ã£o bancÃ¡ria, motivo pelo qual, da mesma forma,"
							+ " estarÃ¡ automaticamente sub-rogado a consultar as informaÃ§Ãµes consolidadas em seu nome, no SCR, "
							+ "SERASA â CentralizaÃ§Ã£o de ServiÃ§os os Bancos S.A. e quaisquer  outros Ã³rgÃ£os, entidades ou empresas,"
							+ " julgados pertinentes pelo CREDOR, permanecendo vÃ¡lida a presente autorizaÃ§Ã£o durante todo o tempo"
							+ " em que subsistir em aberto e nÃ£o liquidadas as obrigaÃ§Ãµes decorrentes da presente CCB. ",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.12.3 ",
					"A cessÃ£o dos direitos sempre compreenderÃ¡"
							+ " os acessÃ³rios, tÃ­tulos, instrumentos que os representam e anexos. De tal forma, ao formalizar a cessÃ£o "
							+ "dos direitos de crÃ©dito, por meio de Contrato de CessÃ£o, o CREDOR estarÃ¡ cedendo, automaticamente,"
							+ " todos os direitos, privilÃ©gios, preferÃªncias, prerrogativas, garantias e aÃ§Ãµes, legal e contratualmente"
							+ " previstas, que sejam inerentes ao direito de crÃ©dito cedido, inclusive: (i) o direito de receber "
							+ "integralmente o seu valor, acrescido dos juros, das multas, da atualizaÃ§Ã£o monetÃ¡ria e/ou demais encargos"
							+ " remuneratÃ³rios e/ou moratÃ³rios; (ii) o direito de aÃ§Ã£o e o de protesto em face do respectivo EMITENTE,"
							+ " para exigir o cumprimento da obrigaÃ§Ã£o de pagamento, ou visando resguardar qualquer direito; (iii)"
							+ " as garantias eventualmente existentes, sejam reais ou pessoais; e (iv) o direito de declarar o direito "
							+ "de crÃ©dito vencido antecipadamente, nas hipÃ³teses contratadas com o EMITENTE e naquelas previstas na"
							+ " legislaÃ§Ã£o aplicÃ¡vel;",
					true, false);
			if(objetoCcb.isTerceiroGarantidor()) {
				geraParagrafoComposto(document, paragraph, run, run2, "10.12.4 ", "O EMITENTE e/ou TERCEIRO(S) GARANTIDOR(ES),"
						+ " estÃ¡(Ã£o) integralmente ciente(s) e de acordo com o seguinte: (i) qualquer litÃ­gio ou questionamento,"
						+ " judicial ou extrajudicial, que possa vir a ser ajuizado, deverÃ¡ ser ajuizado, Ã quele portador"
						+ " endossatÃ¡rio da CCB na data do ajuizamento do litÃ­gio ou questionamento; e (ii) o ajuizamento "
						+ "de qualquer aÃ§Ã£o, judicial ou extrajudicial, pelo EMITENTE e/ou TERCEIRO(S) GARANTIDOR(ES), "
						+ "contra o CREDOR, apÃ³s o mesmo ter endossado esta CCB para terceiro, o EMITENTE e/ou TERCEIRO(S)"
						+ " GARANTIDOR(ES), estarÃ¡(Ã£o) sujeito(s) ao pagamento de indenizaÃ§Ã£o por perdas e danos, e "
						+ "ressarcimento de todo e quaisquer custos e despesas que o CREDOR venha a incorrer "
						+ "(incluindo honorÃ¡rios advocatÃ­cios) para defesa de seus direitos no respectivo litÃ­gio;", true, false);
			} else {
				geraParagrafoComposto(document, paragraph, run, run2, "10.12.4 ", "O EMITENTE, estÃ¡ integralmente ciente(s)"
						+ " e de acordo com o seguinte: (i) qualquer litÃ­gio ou questionamento, judicial ou extrajudicial, que possa "
						+ "vir a ser ajuizado, deverÃ¡ ser ajuizado, Ã quele portador endossatÃ¡rio da CCB na data do ajuizamento do "
						+ "litÃ­gio ou questionamento; e (ii) o ajuizamento de qualquer aÃ§Ã£o, judicial ou extrajudicial, pelo EMITENTE,"
						+ " contra o CREDOR, apÃ³s o mesmo ter endossado esta CCB para terceiro, o EMITENTE, estarÃ¡ sujeito ao "
						+ "pagamento de indenizaÃ§Ã£o por perdas e danos, e ressarcimento de todo e quaisquer custos e despesas"
						+ " que o CREDOR venha a incorrer (incluindo honorÃ¡rios advocatÃ­cios) para defesa de seus direitos no "
						+ "respectivo litÃ­gio;", true, false);
			}

			geraParagrafoComposto(document, paragraph, run, run2, "10.13. EmissÃ£o de Certificados de CCB: ",
					"O CREDOR, "
							+ "ou a quem este vier a indicar, poderÃ¡ emitir certificados de CCB com lastro no presente tÃ­tulo, podendo"
							+ " negociÃ¡-los livremente no mercado;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.13.1 ",
					"Caso haja a emissÃ£o do certificado referido "
							+ "no item 10.13, a presente CCB ficarÃ¡ custodiada em instituiÃ§Ã£o financeira autorizada, a qual passarÃ¡ a "
							+ "proceder Ã s cobranÃ§as dos valores devidos, junto ao EMITENTE;",
					true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.13.2 ", "O EMITENTE desde jÃ¡ se declara de acordo"
					+ " com a emissÃ£o do certificado referido no item 10.13, obrigando-se a atender Ã s solicitaÃ§Ãµes da instituiÃ§Ã£o"
					+ " custodiante, bem como, aceitam a cessÃ£o de crÃ©dito, independentemente de qualquer aviso "
					+ "ou formalidade;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.14.	Foro: ", "Ajustam as Partes que serÃ¡ sempre"
					+ " competente para conhecer e dirimir qualquer questÃ£o oriunda ou decorrente da presente CCB, o foro"
					+ " da comarca de SÃ£o Paulo capital com a exclusÃ£o de qualquer outro, por mais privilegiado que seja,"
					+ " reservando-se o credor da CCB o direito de optar, a seu exclusivo critÃ©rio, pelo foro da sede"
					+ " do EMITENTE ou, ainda, pelo foro da situaÃ§Ã£o dos bens dados em garantia;", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.15. ", "Em caso de contrataÃ§Ã£o eletrÃ´nica, "
					+ "as Partes ratificam que admitem como vÃ¡lido, para fins de comprovaÃ§Ã£o de autoria e integridade,"
					+ " a assinatura e informaÃ§Ãµes constantes no presente documento, as quais foram capturadas de forma"
					+ " eletrÃ´nica e utilizadas nesta CÃ©dula, constituindo tÃ­tulo executivo extrajudicial nos termos "
					+ "do artigo 28 da Lei nÂº 10.931 2004 e para todos os fins de direito, ainda que seja estabelecida "
					+ "com assinatura eletrÃ´nica ou certificaÃ§Ã£o fora dos padrÃµes ICP-BRASIL, conforme disposto pelo art."
					+ " 10 da Medida ProvisÃ³ria nÂº 2.200/2001.", true, false);

			geraParagrafoComposto(document, paragraph, run, run2, "10.16. ", "A presente CCB Ã© emitida e firmada "
					+ "em 2 (duas) vias, constando na 1Âª via a expressÃ£o âVia NegociÃ¡velâ e nas demais, a expressÃ£o "
					+ "âVia NÃ£o NegociÃ¡velâ. ", true, false);

			fazParagrafoSimples(document, paragraph, run,
					"SÃ£o Paulo, SP, " + objetoCcb.getDataDeEmissao().getDate() + " de "
							+ CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase() + " de "
							+ (objetoCcb.getDataDeEmissao().getYear() + 1900) + ".",
					false);

			fazParagrafoSimples(document, paragraph, run,
					"(O final desta pÃ¡gina foi intencionalmente deixado em branco)", false, ParagraphAlignment.CENTER);

			paragraph = document.createParagraph();
			paragraph.setPageBreak(true);

			fazParagrafoSimples(document, paragraph, run, "(Segue a pÃ¡gina de assinaturas)", false,
					ParagraphAlignment.CENTER);

			paragraph = document.createParagraph();
			paragraph.setPageBreak(true);
			
			paragraph = document.createParagraph();	
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("(PÃ¡gina de assinaturas da CÃ©dula de CrÃ©dito "
					+ "BancÃ¡rio nÂº " + objetoCcb.getNumeroCcb() + ", emitida por "+ objetoCcb.getNomeEmitente().toUpperCase() +", CPF/MF nÂº "+ objetoCcb.getCpfEmitente() +", em favor de "
					+ "BMP SOCIEDADE DE CRÃDITO DIRETO S.A., CNPJ/ MF sob nÂº 34.337.707/0001-00,"
					+ " em "+ CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy" )+".)");
			run.setBold(false);
			run.setItalic(true);
			run.addCarriageReturn();

			XWPFTable table = document.createTable();

			paragraph = document.createParagraph();
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			paragraph.setAlignment(ParagraphAlignment.LEFT);

			table.getCTTbl().addNewTblGrid().addNewGridCol().setW(BigInteger.valueOf(6000));
			table.getCTTbl().getTblGrid().addNewGridCol().setW(BigInteger.valueOf(2500));

			// create first row
			XWPFTableRow tableRow1 = table.getRow(0);

			tableRow1.getCell(0).setParagraph(paragraph);
			run = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("____________________________________   ");
			run.setBold(false);
			run.addBreak();

			run2 = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run2.setFontSize(12);
			run2.setText("BMP SOCIEDADE DE CRÃDITO DIRETO S.A");
			run2.setBold(true);
			run2.addBreak();

			run4 = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run4.setFontSize(12);
			run4.setText("CREDOR");
			run4.setBold(false);

			tableRow1.addNewTableCell();

			tableRow1.getCell(1).setParagraph(paragraph);

			run = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("____________________________________ ");
			run.setBold(false);
			run.addBreak();

			run2 = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run2.setFontSize(12);
			run2.setText(objetoCcb.getNomeEmitente().toUpperCase());
			run2.setBold(true);
			run2.addBreak();

			run3 = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run3.setFontSize(12);
			run3.setText(" ");
			run3.setBold(true);
			run3.addBreak();

			run4 = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run4.setFontSize(12);
			run4.setText("EMITENTE");
			run4.setBold(false);

			XWPFTableRow tableRow2 = table.createRow();

			if (objetoCcb.getListaParticipantes().size() > 1) {
				tableRow2.getCell(0).setParagraph(paragraph);
				tableRow2.getCell(1).setParagraph(paragraph);
				int qtdePessoasEsquerdo = 0;
				for (int iPartTab = 0; iPartTab < objetoCcb.getListaParticipantes().size(); iPartTab++) {

					CcbParticipantes participante = objetoCcb.getListaParticipantes().get(iPartTab);
					if (iPartTab != 0) {
						if (iPartTab % 2 != 0) {

							run = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run.addBreak();
							run.setFontSize(12);
							run.setText("____________________________________   ");
							run.setBold(false);
							run.addBreak();

							run2 = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run2.setFontSize(12);
							run2.setText(participante.getPessoa().getNome());
							run2.setBold(true);
							run2.addBreak();

							run3 = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run3.setFontSize(12);
							run3.setText(participante.getTipoParticipante());
							run3.setBold(false);
							run3.addBreak();

							qtdePessoasEsquerdo++;
						} else {
							run = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run.addBreak();
							run.setFontSize(12);
							run.setText("____________________________________   ");
							run.setBold(false);
							run.addBreak();

							run2 = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run2.setFontSize(12);
							run2.setText(participante.getPessoa().getNome());
							run2.setBold(true);
							run2.addBreak();

							run3 = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run3.setFontSize(12);
							run3.setText(participante.getTipoParticipante());
							run3.setBold(false);
							run3.addBreak();
							qtdePessoasEsquerdo--;
						}
					}
				}
				run4 = tableRow2.getCell(0).getParagraphArray(0).createRun();
				run4.setFontSize(12);
				run4.addBreak();
				run4.setText("Testemunhas");
				run4.setBold(false);
				run4.addBreak();
				run4.setText("____________________________________");

				run4 = tableRow2.getCell(1).getParagraphArray(0).createRun();
				run4.setFontSize(12);
				for (int i = 0; i <= qtdePessoasEsquerdo; i++) {
					run4.addBreak();
					run4.addBreak();
					run4.addBreak();
				}
				run4.setText("____________________________________   ");
				run4.setBold(false);

			} else {
				tableRow2.getCell(0).setParagraph(paragraph);
				run = tableRow2.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.addBreak();
				run.setText("Testemunhas");
				run.setBold(false);
				run.addBreak();
				run.setText("____________________________________");

				tableRow2.getCell(1).setParagraph(paragraph);
				run = tableRow2.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.addBreak();
				run.addBreak();
				run.setText("____________________________________   ");
				run.setBold(false);
			}
			
			XWPFTableRow tableRow3 = table.createRow();
			tableRow3.getCell(0).setParagraph(paragraph);
			run = tableRow3.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("Nome:  " + objetoCcb.getNomeTestemunha1());
			run.setBold(false);

			tableRow3.getCell(1).setParagraph(paragraph);
			run = tableRow3.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("Nome:  " + objetoCcb.getNomeTestemunha2());
			run.setBold(false);

			XWPFTableRow tableRow4 = table.createRow();
			tableRow4.getCell(0).setParagraph(paragraph);
			run = tableRow4.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("RG:  " + objetoCcb.getRgTestemunha1());
			run.setBold(false);

			tableRow4.getCell(1).setParagraph(paragraph);
			run = tableRow4.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("RG:  " + objetoCcb.getRgTestemunha2());
			run.setBold(false);

			XWPFTableRow tableRow5 = table.createRow();
			tableRow5.getCell(0).setParagraph(paragraph);
			run = tableRow5.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("CPF:  " + objetoCcb.getCpfTestemunha1());
			run.setBold(false);

			tableRow5.getCell(1).setParagraph(paragraph);
			run = tableRow5.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("CPF:  " + objetoCcb.getCpfTestemunha2());
			run.setBold(false);

			CTTblPr tblpro = table.getCTTbl().getTblPr();

			CTTblBorders borders = tblpro.addNewTblBorders();
			borders.addNewBottom().setVal(STBorder.NONE);
			borders.addNewLeft().setVal(STBorder.NONE);
			borders.addNewRight().setVal(STBorder.NONE);
			borders.addNewTop().setVal(STBorder.NONE);
			// also inner borders
			borders.addNewInsideH().setVal(STBorder.NONE);
			borders.addNewInsideV().setVal(STBorder.NONE);

			paragraph = document.createParagraph();
			paragraph.setPageBreak(true);

			paragraph = document.createParagraph();
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			paragraph.setAlignment(ParagraphAlignment.CENTER);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("ANEXO I");
			run.addCarriageReturn();
			run.setText("CÃDULA DE CRÃDITO BANCÃRIO NÂº " + objetoCcb.getNumeroCcb());
			run.addCarriageReturn();
			run.setText("PLANILHA DE CÃLCULO");
			run.setBold(true);

			XWPFFooter footer = headerFooterPolicy.createFooter(XWPFHeaderFooterPolicy.DEFAULT);

			paragraph = footer.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.RIGHT);
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setColor("0000ff");
			run.setBold(true);
			run.setText("pÃ¡g. ");

			run = paragraph.createRun();
			run.setFontSize(10);
			run.setColor("0000ff");
			run.setBold(true);
			run.getCTR().addNewFldChar()
					.setFldCharType(org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType.BEGIN);

			run = paragraph.createRun();
			run.setFontSize(10);
			run.setColor("0000ff");
			run.setBold(true);
			run.getCTR().addNewInstrText().setStringValue("PAGE \\* MERGEFORMAT");

			run = paragraph.createRun();
			run.setFontSize(10);
			run.setColor("0000ff");
			run.setBold(true);
			run.getCTR().addNewFldChar()
					.setFldCharType(org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType.END);

			/*
			 * for (XWPFParagraph p : document.getParagraphs()) { List<XWPFRun> runs =
			 * p.getRuns(); if (runs != null) { for (XWPFRun r : runs) { String text =
			 * r.getText(0); adicionarEnter(text, r); } } }
			 */

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (JDBCException jdbce) {
		    jdbce.getSQLException().getNextException().printStackTrace();
		} catch (Exception e) {
			e.getCause().printStackTrace();
		} 
		return null;
	}
	
	public byte[] geraAFDinamica() throws IOException {
		clearDocumentosNovos();
		try {
			XWPFDocument document = new XWPFDocument();	
			XWPFRun run;
	
			XWPFParagraph paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.CENTER);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("INSTRUMENTO PARTICULAR DE ALIENAÃÃO FIDUCIÃRIA DE BEM(NS) IMÃVEL(EIS) EM GARANTIA E OUTRAS AVENÃAS");
			XWPFRun run2 = paragraph.createRun();
			XWPFRun run3 = paragraph.createRun();
			XWPFRun run4 = paragraph.createRun();			
			
			run.setFontSize(12);
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			fazParagrafoSimples(document, paragraph, run, "Pelo presente instrumento particular firmado"
					+ " nos termos do artigo 38 da Lei nÂº 9.514/1997, com a redaÃ§Ã£o que lhe foi dada "
					+ "pelo artigo 53 da Lei nÂº 11.076/2004, as Partes: ", false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "De um lado, na qualidade de outorgante(s) ", "FIDUCIANTE(s),", false, true);
			
			int iParticipante = 1;
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
				
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					
					if(CommonsUtil.semValor(objetoCcb.getCpfEmitente())) {
						if(!CommonsUtil.semValor(participante.getPessoa().getCpf())) {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCpf());
						} else {
							objetoCcb.setCpfEmitente(participante.getPessoa().getCnpj());
						}
					}
				}
				
				if(participante.isFiduciante()) {
					participante.setTipoParticipante("FIDUCIANTE");
				
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.BOTH);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				paragraph.setSpacingBetween(1);
	
				run = paragraph.createRun();
				run.setFontSize(12);
				run.setText(iParticipante + ")");
				run.addTab();
				run.setText(" " + participante.getPessoa().getNome().toUpperCase() + ", ");
				run.setBold(true);
	
				run2 = paragraph.createRun();
				if (!participante.isEmpresa()) {
					geraParagrafoPF(run2, participante);
					run2.addCarriageReturn();
	
				} else {
					run2.setFontSize(12);
					PagadorRecebedor pessoa = participante.getPessoa();
	
					String socios = "";
					if (participante.getSocios().size() > 1) {
						socios = "pelos seus sÃ³cios, ";
					} else {
						if (participante.getSocios().iterator().next().isFeminino()) {
							socios = "pela sua Ãºnica sÃ³cia, ";
						} else {
							socios = "pelo seu Ãºnico sÃ³cio, ";
						}
					}
	
					run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
							+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
							+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
							+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
							+ "; neste ato representada " + socios);
	
					for (CcbParticipantes sociosParticipante : participante.getSocios()) {
						XWPFRun runSocios = paragraph.createRun();
						runSocios.setFontSize(12);
						runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
						runSocios.setBold(true);
						XWPFRun runSociosNome = paragraph.createRun();
						geraParagrafoPF(runSociosNome, sociosParticipante);
						runSociosNome.addCarriageReturn();
					}
				}
	
				iParticipante++;
				} else {
					participante.setTipoParticipante("DEVEDOR");
				}
			}
			
			fazParagrafoSimples(document, paragraph, run, "De outro lado, na qualidade de outorgada fiduciÃ¡ria, ", false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(iParticipante + ")");
			run.addTab();
			run.setText("BMP SOCIEDADE DE CRÃDITO DIRETO S.A., ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("instituiÃ§Ã£o financeira, inscrita no CNPJ/MF sob"
					+ " nÂº 34.337.707/0001-00, com sede na Av. Paulista,"
					+ " 1765, 1Âº Andar, CEP 01311-200, SÃ£o Paulo, SP, neste ato,"
					+ " representada na forma do seu Estatuto Social (â");
			run2.setBold(false);
			
			iParticipante++;
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA");
			run.setUnderline(UnderlinePatterns.SINGLE); 
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("â, e quando em conjunto com o ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIANTE(S), ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("doravante denominadas â");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText( "PARTES");
			run.setUnderline(UnderlinePatterns.SINGLE); 
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("â e, isoladamente, â");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("PARTE");
			run.setUnderline(UnderlinePatterns.SINGLE); 
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("â).");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
				if(!participante.isFiduciante()) {
	
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.BOTH);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				paragraph.setSpacingBetween(1);
	
				run = paragraph.createRun();
				run.setFontSize(12);
				run.setText(iParticipante + ")");
				run.addTab();
				run.setText("DEVEDOR: " + participante.getPessoa().getNome().toUpperCase() + ", ");
				run.setBold(true);
	
				run2 = paragraph.createRun();
				if (!participante.isEmpresa()) {
					geraParagrafoPF(run2, participante);
					run2.addCarriageReturn();
	
				} else {
					run2.setFontSize(12);
					PagadorRecebedor pessoa = participante.getPessoa();
	
					String socios = "";
					if (participante.getSocios().size() > 1) {
						socios = "pelos seus sÃ³cios, ";
					} else {
						if (participante.getSocios().iterator().next().isFeminino()) {
							socios = "pela sua Ãºnica sÃ³cia, ";
						} else {
							socios = "pelo seu Ãºnico sÃ³cio, ";
						}
					}
	
					run2.setText(participante.getTipoEmpresa() + ", devidamente inscrito no CNPJ sob nÂ° "
							+ pessoa.getCnpj() + ", com sede em " + pessoa.getEndereco() + ", " + "nÂ° "
							+ pessoa.getNumero() + ", Sala " + participante.getSalaEmpresa() + ", " + pessoa.getBairro()
							+ ", " + pessoa.getCidade() + " - " + pessoa.getEstado() + ", CEP " + pessoa.getCep()
							+ "; neste ato representada " + socios);
	
					for (CcbParticipantes sociosParticipante : participante.getSocios()) {
						XWPFRun runSocios = paragraph.createRun();
						runSocios.setFontSize(12);
						runSocios.setText(" " + sociosParticipante.getPessoa().getNome().toUpperCase() + ", ");
						runSocios.setBold(true);
						XWPFRun runSociosNome = paragraph.createRun();
						geraParagrafoPF(runSociosNome, sociosParticipante);
						runSociosNome.addCarriageReturn();
					}
				}
				
				iParticipante++;
				} 
			}
			
			fazParagrafoSimples(document, paragraph, run, "CONSIDERANDO QUE: ", true);
			
			CTNumbering cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML_bold);
			CTAbstractNum cTAbstractNum = cTNumbering.getAbstractNumArray(0);
	
			// CTAbstractNum cTAbstractNum = getAbstractNumber(STNumberFormat.LOWER_LETTER);
			XWPFAbstractNum abstractNum = new XWPFAbstractNum(cTAbstractNum);
			XWPFNumbering numbering = document.createNumbering();
			BigInteger abstractNumID = numbering.addAbstractNum(abstractNum);
			BigInteger numID = numbering.addNum(abstractNumID);
			
			//criarParagrafo(document, paragraph, ParagraphAlignment.BOTH, numID);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Em ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy"));
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(" o ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("FIDUCIANTE " + objetoCcb.getNomeEmitente().toUpperCase() );
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(" emitiu a(s) CÃ©dula(s) de CrÃ©dito BancÃ¡rio nÂº ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(objetoCcb.getNumeroCcb() + " ");
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("em favor da ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("FIDUCIÃRIA");
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(", com as caracterÃ­sticas previstas na ClÃ¡usula 3Âª abaixo "
					+ "(âCCB(s)â), passando a ser devedora da totalidade do valor principal, juros "
					+ "remuneratÃ³rios e encargos, presentes e futuros, principais e acessÃ³rios "
					+ "decorrentes do referido tÃ­tulo (âObrigaÃ§Ãµes Garantidasâ);");
			run.setBold(false);
			run.addCarriageReturn();
			
			geraParagrafoBulletListComposta(document, paragraph, run, run2, "As obrigaÃ§Ãµes, pecuniÃ¡rias ou nÃ£o,"
					+ " previstas na(s) CCB(s) sÃ£o garantidas pela alienaÃ§Ã£o fiduciÃ¡ria de ImÃ³vel(eis) descrito"
					+ " abaixo bem como registrado(s) perante o "+ objetoCcb.getCartorioImovel() +"Â° CartÃ³rio de Registro de ImÃ³veis da "
					+ "Comarca de "+ objetoCcb.getCidadeImovel() +" â "+ objetoCcb.getUfImovel() +" âRGIâ, de propriedade do(s) ", "FIDUCIANTE(S).", false, true, numID, UnderlinePatterns.NONE);
			
	
			geraParagrafoBulletList(document, paragraph, run, numID , "Nos termos da(s) CCB(s), o protocolo da garantia "
					+ "de AlienaÃ§Ã£o FiduciÃ¡ria junto ao RGI Ã© condiÃ§Ã£o precedente ao seu desembolso devendo o "
					+ "registro ser concluÃ­do no prazo de atÃ© 30(trinta) dias contados da emissÃ£o da CCB sob pena"
					+ " de vencimento antecipado do referido tÃ­tulo;", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID , "A presente garantia de AlienaÃ§Ã£o FiduciÃ¡ria Ã© celebrada"
					+ " sem prejuÃ­zo das outras garantias constituÃ­das ou que venham a ser constituÃ­das em favor da(s) CCB(s);", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID , "As Partes dispuseram de tempo e condiÃ§Ãµes adequadas para "
					+ "a avaliaÃ§Ã£o e discussÃ£o de todas as clÃ¡usulas desta AlienaÃ§Ã£o FiduciÃ¡ria (abaixo definido), "
					+ "cuja celebraÃ§Ã£o, execuÃ§Ã£o e extinÃ§Ã£o sÃ£o pautadas pelos princÃ­pios da igualdade, probidade,"
					+ " lealdade e boa-fÃ©.", false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Resolvem, na melhor forma de direito, celebrar o presente ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Instrumento Particular de AlienaÃ§Ã£o FiduciÃ¡ria de Bens ImÃ³veis em Garantia e Outras AvenÃ§as ");
			run2.setBold(false);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("(â");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Contrato de AlienaÃ§Ã£o FiduciÃ¡ria");
			run2.setBold(false);
			run2.setItalic(false);
			run2.setUnderline(UnderlinePatterns.SINGLE); 
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("â), que se regerÃ¡ pelas clÃ¡usulas a seguir redigidas e demais disposiÃ§Ãµes,"
					+ " contratuais e legais, aplicÃ¡veis. ");
			run.setBold(false);
			run.addCarriageReturn();
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA PRIMEIRA â DO OBJETO", true);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("1.1 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Em garantia do cumprimento das ObrigaÃ§Ãµes Garantidas, "
					+ "nesta data representadas pela(s) CCB nÂº ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(objetoCcb.getNumeroCcb() + " ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("melhor descritas na clausula 2Âª abaixo, o(s) ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIANTE(S) ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("aliena(m) fiduciariamente, em favor da ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA, ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("o(s) ImÃ³vel(eis) de sua titularidade e de seguinte descriÃ§Ã£o: ");
			run2.setBold(false);
			
			int iImagem = 0;
			for (UploadedFile imagem : filesList) {
				run3 = paragraph.createRun();
				run3.addCarriageReturn();
				this.populateFiles(iImagem);
				run3.addPicture(bis, fileTypeInt, fileName.toLowerCase(), Units.toEMU(400), Units.toEMU(300));
				run3.addCarriageReturn();
				iImagem++;
			}
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Objeto da matrÃ­cula nÂº "+ objetoCcb.getNumeroImovel() +" (âBem ImÃ³velâ ou âImÃ³velâ), "
					+ "registrada perante o "+ objetoCcb.getCartorioImovel() +"Â° CartÃ³rio de Registro de ImÃ³veis da "
					+ "Comarca de "+ objetoCcb.getCidadeImovel() +" â "+ objetoCcb.getUfImovel() +" (");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("âRGIâ");
			run.setBold(false);
			run.setItalic(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("(âBem(ns) ImÃ³vel(eis) ou ImÃ³vel(eis)â) bem conforme identificado no ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Anexo I ");
			run.setBold(true);
			run.setItalic(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("ao presente (â");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("AlienaÃ§Ã£o FiduciÃ¡ria");
			run.setUnderline(UnderlinePatterns.SINGLE); 
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("â). ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "1.2 ", "Se solteiro(a), viÃºvo(a), divorciado(a)"
					+ " ou separado(a) judicialmente, declara, sob responsabilidade civil e criminal, que o imÃ³vel "
					+ "aqui objetivado nÃ£o foi adquirido na constÃ¢ncia de uniÃ£o estÃ¡vel prevista na Lei nÂº 9.278,"
					+ " de 10/05/96 e no CÃ³digo Civil, razÃ£o pela qual Ã© seu Ãºnico e exclusivo proprietÃ¡rio.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "1.3 ", "O(s) FIDUCIANTE(S), declara(m), "
					+ "sob as penas da lei, que nÃ£o estÃ¡(Ã£o) vinculado(s) como empregador(es) ao INSS - Instituto"
					+ " Nacional do Seguro Social, bem como nÃ£o ser(em) produtor(es) rural(is), nÃ£o estando, assim,"
					+ " incurso(s) nas restriÃ§Ãµes da legislaÃ§Ã£o pertinente, dispensando a apresentaÃ§Ã£o de CertidÃ£o "
					+ "Negativa de DÃ©bitos â CND. Todavia, na hipÃ³tese de ser(em) contribuinte(s) desse Ã³rgÃ£o,"
					+ " declara(m) ciente(s) e responsÃ¡vel(eis) pela apresentaÃ§Ã£o da CND-INSS ao CartÃ³rio de "
					+ "Registro de ImÃ³veis.", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("1.4 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("A transferÃªncia da propriedade fiduciÃ¡ria do(s) ImÃ³vel(eis), pelo(s) ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIANTE(S) ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Ã  ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("se opera com o registro desta AlienaÃ§Ã£o FiduciÃ¡ria no "
					+ "competente CartÃ³rio de Registro de ImÃ³veis indicado na "
					+ "descriÃ§Ã£o acima e subsistirÃ¡, durante seu prazo de vigÃªncia,"
					+ " atÃ© o cumprimento vÃ¡lido e eficaz da totalidade das"
					+ " ObrigaÃ§Ãµes Garantidas. ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "1.5 ", "Obriga(m)-se o(s) FIDUCIANTE(S),"
					+ " seus herdeiros e sucessores a qualquer tÃ­tulo das Partes a providenciar o "
					+ "registro do presente instrumento, com a constituiÃ§Ã£o da AlienaÃ§Ã£o FiduciÃ¡ria "
					+ "aqui prevista, e averbaÃ§Ã£o da CCB na matrÃ­cula do ImÃ³vel objeto da garantia,"
					+ " no prazo de 30 (trinta) dias a contar de sua assinatura, sob pena deste"
					+ " CONTRATO ser considerado automaticamente resolvido, independentemente"
					+ " de qualquer notificaÃ§Ã£o prÃ©via ou outra formalidade, hipÃ³tese em que "
					+ "nÃ£o serÃ£o devidas quaisquer indenizaÃ§Ãµes ao(s) EMITENTE(S). Nesta hipÃ³tese,"
					+ " o(s) EMITENTE(S) deverÃ¡(Ã£o) ressarcir o CREDOR das despesas de custo de"
					+ " emissÃ£o da CCB e outras despesas decorrentes desta no prazo mÃ¡ximo de "
					+ "48 (quarenta e oito) horas contadas da data em que for(em) notificado(s) "
					+ "para tanto, sob pena de sofrer(em) execuÃ§Ã£o especÃ­fica.", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("1.6 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Em ocorrendo a cessÃ£o, endosso ou qualquer outra forma de transferÃªncia"
					+ " da(s) CCB(s) e/ou dos crÃ©ditos dela oriundos Ã  terceiros(â");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Sucessores");
			run.setBold(false);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("â), referidos Sucessores passarÃ£o a ser os legÃ­timos titulares e beneficiÃ¡rios"
					+ " da presente AlienaÃ§Ã£o FiduciÃ¡ria, de forma que toda menÃ§Ã£o Ã  ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA ");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.NONE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("deverÃ¡ ser interpretada como referindo-se aos Sucessores"
					+ " (efetivos titulares dos crÃ©ditos, conforme constante do SNA da CETIP)"
					+ " e sendo certo, ainda, que todas as disposiÃ§Ãµes do presente contrato"
					+ " serÃ£o mantidas.");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA SEGUNDA â DOS REQUISITOS DO ARTIGO 24Âº DA LEI 9514/1997", true);
			
			geraParagrafoComposto(document, paragraph, run, run2, "2.1 ", "As Partes declaram, para os fins do artigo 24 da Lei nÂº 9.514/1997, "
					+ "que as ObrigaÃ§Ãµes Garantidas apresentam as exatas caracterÃ­sticas principais indicadas na abaixo: ", true, false);
			
			
			cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML_bold_Roman);
			cTAbstractNum = cTNumbering.getAbstractNumArray(0);
	
			// CTAbstractNum cTAbstractNum = getAbstractNumber(STNumberFormat.LOWER_LETTER);
			abstractNum = new XWPFAbstractNum(cTAbstractNum);
			numbering = document.createNumbering();
			abstractNumID = numbering.addAbstractNum(abstractNum);
			numID = numbering.addNum(abstractNumID);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("ObrigaÃ§Ã£o Garantida:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" CÃ©dula de CrÃ©dito BancÃ¡rio nÂº " + objetoCcb.getNumeroCcb() + " ");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Valor do Principal da DÃ­vida:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" a soma do saldo devedor das ObrigaÃ§Ãµes Garantidas,"
					+ " na data do leilÃ£o, nele incluÃ­dos os juros convencionais, "
					+ "as penalidades e os demais encargos contratuais conforme"
					+ " termos da clausula 5.7 deste instrumento; ");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Valor do CrÃ©dito:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			valorPorExtenso.setNumber(objetoCcb.getValorCredito()); 
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" "+ CommonsUtil.formataValorMonetario(objetoCcb.getValorCredito(), "R$ ") + " ("+ valorPorExtenso.toString() +");");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("CondiÃ§Ãµes de Pagamento:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			numeroPorExtenso.setNumber(CommonsUtil.bigDecimalValue(objetoCcb.getNumeroParcelasPagamento()));
			valorPorExtenso.setNumber(objetoCcb.getMontantePagamento()); 
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" "+ objetoCcb.getNumeroParcelasPagamento() +" ("+ numeroPorExtenso.toString() +") parcelas,"
					+ " sendo a 1Âª. parcela com vencimento em "+ CommonsUtil.formataData(objetoCcb.getVencimentoPrimeiraParcelaPagamento(), "dd/MM/yyyy")  +""
					+ " e a Ãºltima parcela com vencimento em "+ CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy")  +","
					+ " totalizando o montante de "+ CommonsUtil.formataValorMonetario(objetoCcb.getMontantePagamento(), "R$ ") +" ("+ valorPorExtenso.toString() +");");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Encargos Financeiros:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
	
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("(X) ");
			run2.setBold(false);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("PrÃ©-fixado");
			run.setBold(true);
			run.setItalic(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", calculado com base no ano de 365 dias;");
			run2.setBold(false);
			run2.setItalic(true);
			run2.addCarriageReturn();
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("(X) ");
			run2.setBold(false);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("PÃ³s-fixado");
			run.setBold(true);
			run.setItalic(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(": atualizaÃ§Ã£o dos valores pela variaÃ§Ã£o mensal do Ãndice "
					+ "Nacional de PreÃ§os ao Consumidor Amplo â IPCA/IBGE, apurado "
					+ "a partir da data de emissÃ£o atÃ© a efetiva quitaÃ§Ã£o da CCB;");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Taxa de Juros Efetiva: ");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Mes: ");
			run2.setBold(true);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(CommonsUtil.formataValorTaxa(objetoCcb.getTaxaDeJurosMes()) + "%");
			run.setBold(false);
			run.setItalic(true);
			run.addTab();
			run.setUnderline(UnderlinePatterns.NONE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Ano: ");
			run2.setBold(true);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(CommonsUtil.formataValorTaxa(objetoCcb.getTaxaDeJurosAno()) + "%");
			run.setBold(false);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.NONE);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Custo Efetivo Total (âCETâ)");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Mes: ");
			run2.setBold(true);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(CommonsUtil.formataValorTaxa(objetoCcb.getCetMes()) + "%");
			run.setBold(false);
			run.setItalic(true);
			run.addTab();
			run.setUnderline(UnderlinePatterns.NONE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Ano: ");
			run2.setBold(true);
			run2.setItalic(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(CommonsUtil.formataValorTaxa(objetoCcb.getCetAno()) + "%");
			run.setBold(false);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.NONE);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Data de EmissÃ£o:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" "+ CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy") +";");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Data de Vencimento:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" "+CommonsUtil.formataData(objetoCcb.getVencimentoUltimaParcelaPagamento(), "dd/MM/yyyy")+"." );
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Clausula de ConstituiÃ§Ã£o da Propriedade FiduciÃ¡ria:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" vide clausula 1.1 deste instrumento;");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Clausula assegurando o Fiduciante â enquanto adimplente - ao uso do Bem(ns) ImÃ³vel(eis):");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" vide clausula 3.9. deste instrumento;");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("IndicaÃ§Ã£o, para efeito de venda em pÃºblico leilÃ£o, do valor do imÃ³vel -");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" vide clausula 6.1 deste instrumento e");
			run2.setBold(false);
			run2.setItalic(true);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("ClÃ¡usula dispondo sobre os procedimentos de que trata o art. 27 da Lei 9514/97:");
			run.setBold(true);
			run.setItalic(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" vide clausula 5Âª deste instrumento");
			run2.setBold(false);
			run2.setItalic(true);
			run2.addCarriageReturn();
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA TERCEIRA â DAS CARACTERÃSTICAS DA GARANTIA FIDUCIÃRIA", true);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.1. ", "Inicialmente as Partes fazem constar que a"
					+ " presente garantia Ã© constituÃ­da nos termos da Lei 9514/97 e suas atualizaÃ§Ãµes e que, com base "
					+ "na autorizaÃ§Ã£o constante no parÃ¡grafo primeiro do artigo 22 da referida lei, nÃ£o Ã© firmada no "
					+ "Ã¢mbito de operaÃ§Ã£o de financiamento imobiliÃ¡rio operado pelo SFI. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.2. ", "As Partes anuem e o(s) FIDUCIANTE(s) "
					+ "ratificam que, entende-se por ObrigaÃ§Ãµes Garantidas a totalidade da(s) cÃ©dula(s) de crÃ©dito"
					+ " bancÃ¡rio que contenham a presente garantia fiduciÃ¡ria constituÃ­da em garantia"
					+ " (âGarantia FiduciÃ¡riaâ).", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("3.3. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("FicarÃ¡ a cargo do FIDUCIANTE(S) realizar o "
					+ "registro da AlienaÃ§Ã£o FiduciÃ¡ria do ImÃ³vel(eis) na(s) respectiva(s) matrÃ­cula(s) do(s)"
					+ " ImÃ³vel(eis) perante o CartÃ³rio de Registro de ImÃ³veis competente nos prazos estabelecidos "
					+ "entre as Partes ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setBold(false);
			run.setText("sendo tal descumprimento considerado como hipÃ³tese de vencimento antecipado das ObrigaÃ§Ãµes Garantidas.");
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("3.4. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("As Partes desde jÃ¡ se obrigam a disponibilizar, "
					+ "apresentar documentos e praticar os atos que vierem a ser"
					+ " necessÃ¡rios para formalizar o registro da AlienaÃ§Ã£o FiduciÃ¡ria"
					+ " (âObrigaÃ§Ãµes para Registroâ) e, nesse sentido ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setBold(false);
			run.setText("declaram anuÃªncia de que qualquer aÃ§Ã£o ou omissÃ£o realizada no sentindo "
					+ "de prejudicar a efetiva constituiÃ§Ã£o da Garantia FiduciÃ¡ria serÃ¡ considerada "
					+ "tambÃ©m como hipÃ³tese de vencimento antecipado das ObrigaÃ§Ãµes Garantidas.");
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.5. ", "A presente Garantia FiduciÃ¡ria "
					+ "compreende a propriedade fiduciÃ¡ria do ImÃ³vel(eis) e todas as acessÃµes, "
					+ "melhorias e benfeitorias existentes. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.6. ", "O(s) FIDUCIANTE(S) se obriga(m) "
					+ "a manter o ImÃ³vel(eis) ora alienado fiduciariamente nos termos deste instrumento,"
					+ " em perfeito estado de seguranÃ§a e utilizaÃ§Ã£o, alÃ©m de realizar todas as obras,"
					+ " reparos e benfeitorias necessÃ¡rias. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.7. ", "Mediante o registro da presente"
					+ " AlienaÃ§Ã£o FiduciÃ¡ria na(s) matrÃ­cula(s) do(s) ImÃ³vel(eis), estarÃ¡ constituÃ­da a"
					+ " propriedade fiduciÃ¡ria sobre o(s) ImÃ³vel(eis) em nome do FIDUCIÃRIA, efetivando-se"
					+ " o desdobramento da posse e tornando-se o(s) FIDUCIANTE(S) possuidor(es) direto(s)"
					+ " com direito Ã  utilizaÃ§Ã£o do(s) ImÃ³vel(eis) e a FIDUCIÃRIA, ou os Sucessores,"
					+ " conforme o caso, possuidores indiretos do(s) ImÃ³vel(eis).", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.8. ", "A posse direta de que fica "
					+ "investida o(s) FIDUCIANTE(S) manter-se-Ã£o atÃ© o adimplemento total das ObrigaÃ§Ãµes "
					+ "Garantidas e enquanto estas permanecerem adimplidas, obrigando-se o(s) FIDUCIANTE(S)"
					+ " a manter, conservar e guardar o(s) ImÃ³vel(eis), pagar pontualmente todos os tributos,"
					+ " taxas e quaisquer outras contribuiÃ§Ãµes ou encargos que incidam ou venham "
					+ "a incidir sobre estes ou que sejam inerentes Ã  Garantia FiduciÃ¡ria..", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("3.9. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Para fins de atendimento ao inciso V do artigo 24Âº da Lei 9.514/97,"
					+ " as Partes anuem que Ã© assegurado ao(s) FIDUCIANTE(S) titular do(s) ImÃ³vel(eis),"
					+ " enquanto adimplente(s), a livre utilizaÃ§Ã£o, por sua conta e risco do(s) ImÃ³vel(eis). ");
			run2.setUnderline(UnderlinePatterns.SINGLE);
			run2.setBold(true);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.10. ", "Caso o(s) FIDUCIANTE(S) nÃ£o pague(m)"
					+ " pontualmente todos os tributos, despesas e encargos relativos ao(s) ImÃ³vel(eis), a FIDUCIÃRIA,"
					+ " ou os Sucessores, conforme o caso, poderÃ£o, a seu critÃ©rio, pagar tais tributos,"
					+ " despesas e encargos e solicitar o correspondente reembolso, que deverÃ¡ ser feito dentro "
					+ "de 15 (quinze) dias de solicitaÃ§Ã£o neste sentido, sob pena de, sobre o valor em atraso, "
					+ "incidirem juros moratÃ³rios de 1% (um por cento) ao mÃªs, ou fraÃ§Ã£o de mÃªs em atraso, mais "
					+ "correÃ§Ã£o monetÃ¡ria de acordo com o IPCA/IBGE, tudo calculado desde a data de vencimento "
					+ "atÃ© a data do respectivo pagamento, alÃ©m de multa nÃ£o compensatÃ³ria de 2% (dois por cento)"
					+ " sobre o valor em atraso.  ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.11. ", "A FIDUCIÃRIA, ou os Sucessores, "
					+ "conforme o caso, reservam-se ao direito de, a qualquer tempo, com periodicidade nÃ£o"
					+ " inferior Ã  trimestral e mediante aviso com 5 (cinco) dias de antecedÃªncia, exigir "
					+ "comprovantes de pagamento dos referidos encargos fiscais e/ou tributÃ¡rios, ou de quaisquer "
					+ "outras contribuiÃ§Ãµes, ou ainda, conforme o caso, a comprovaÃ§Ã£o de questionamentos"
					+ " administrativo e/ou judicial referentes a valores eventualmente nÃ£o pagos, relacionados"
					+ " com os tributos incidentes. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.12. ", "O(s) FIDUCIANTE(S) titular(es)"
					+ " do(s) ImÃ³vel(eis) declara(m) e informa(m) que o(s) Bem(ns) ImÃ³vel(eis) outorgado(s) "
					+ "em garantia nÃ£o Ã©(sÃ£o) nem faz(em) parte de bem de famÃ­lia de maneira que ratificam que,"
					+ " caso em algum momento da vigÃªncia das ObrigaÃ§Ãµes Garantidas tal condiÃ§Ã£o venha a ser "
					+ "contestada, servirÃ¡ a presente clausula como RENÃNCIA aos benefÃ­cios de tal natureza. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "3.13. ", "O(s) FIDUCIANTE(S) titular(es) do(s) "
					+ "ImÃ³vel(eis) tambÃ©m declaram que o(s) Bem(ns) ImÃ³vel(eis) nÃ£o conta(m) com usufruto em nome "
					+ "de terceiros se responsabilizando pelas penas impostas, inclusive indenizatÃ³rias, aos"
					+ " que declaram condiÃ§Ãµes que nÃ£o contemplam a realidade dos fatos.", true, false);
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA QUARTA â DA CONSTITUIÃÃO DA MORA E DO INADIMPLEMENTO â "
					+ "PROCEDIMENTOS DO ARTIGO 26Âº DA LEI 9514/1997", true);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.1. ", "Nos termos do artigo 26 da Lei nÂº 9.514/1997, "
					+ "vencida e nÃ£o paga, no todo ou em parte as ObrigaÃ§Ãµes Garantidas, consolidar-se-Ã¡, a propriedade do(s) "
					+ "ImÃ³vel(eis) em nome da FIDUCIÃRIA, observadas as disposiÃ§Ãµes a seguir. ", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("4.2. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Para fins do parÃ¡grafo 3Âº mesmo artigo, as Partes convencionam que, ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("decorrido o prazo de 15(quinze) dias corridos da data de vencimento"
					+ " parcial ou total de qualquer dos tÃ­tulos representativos das ObrigaÃ§Ãµes"
					+ " Garantidas (âPrazo de CarÃªnciaâ),");
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" a FIDUCIÃRIA, ou os eventuais sucessores, conforme o caso, "
					+ "poderÃ¡, a seu critÃ©rio, iniciar o procedimento de excussÃ£o da presente"
					+ " Garantia FiduciÃ¡ria atravÃ©s da intimaÃ§Ã£o do(s) FIDUCIANTE(S) nos "
					+ "termos do artigo 26, Â§ 1Âº da Lei nÂº 9.514/1997.");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.3. ", "O simples pagamento "
					+ "do principal ou de parte dos valores atrasados, sem encargos pactuados, "
					+ "nÃ£o exonerarÃ¡ o(s) FIDUCIANTE(S) OU DEVEDOR, da responsabilidade de "
					+ "liquidar(em) tais obrigaÃ§Ãµes, continuando em mora para todos os efeitos "
					+ "legais, contratuais e da excussÃ£o iniciada;", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.4. ", "O procedimento de "
					+ "intimaÃ§Ã£o para pagamento obedecerÃ¡ aos seguintes requisitos:", true, false);
			
			cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML_bold2);
			cTAbstractNum = cTNumbering.getAbstractNumArray(0);
			// CTAbstractNum cTAbstractNum = getAbstractNumber(STNumberFormat.LOWER_LETTER);
			abstractNum = new XWPFAbstractNum(cTAbstractNum);
			numbering = document.createNumbering();
			abstractNumID = numbering.addAbstractNum(abstractNum);
			numID = numbering.addNum(abstractNumID);
			
			geraParagrafoBulletList(document, paragraph, run, numID, "A intimaÃ§Ã£o serÃ¡ requerida pela FIDUCIÃRIA, "
					+ "ou por seu sucessor conforme o caso, ao Oficial do ServiÃ§o de Registro de ImÃ³veis competente,"
					+ " indicando o valor total das obrigaÃ§Ãµes garantidas decorrentes da(s) CCB(s) vencidas e nÃ£o pagas;", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID, "A intimaÃ§Ã£o far-se-Ã¡ pessoalmente ao(s) FIDUCIANTE(S)"
					+ " e serÃ¡ realizada pelo Oficial do ServiÃ§o de Registro de ImÃ³veis da circunscriÃ§Ã£o imobiliÃ¡ria onde "
					+ "se localizar o ImÃ³vel(eis), podendo, a critÃ©rio do Oficial, vir a ser realizada por seu preposto ou"
					+ " por meio do ServiÃ§o de Registro de TÃ­tulos e Documentos da respectiva comarca da situaÃ§Ã£o do ImÃ³vel(eis),"
					+ " ou, a critÃ©rio da FIDUCIÃRIA por meio do ServiÃ§o de Registro de TÃ­tulos e Documentos  do domicÃ­lio de"
					+ " quem deva recebÃª-la, ou, ainda, pelo correio, com aviso de recebimento a ser firmado pelo(s) FIDUCIANTE(S),"
					+ " ou por quem deva receber a intimaÃ§Ã£o;", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID, "Quando se tratar de pessoa jurÃ­dica, a intimaÃ§Ã£o serÃ¡ feita"
					+ " ao(s) representantes ou a procuradores regularmente constituÃ­dos pelo(s) FIDUCIANTE(S);", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID, "Nos termos da Lei nÂº 13.465/2017, quando, por duas vezes,"
					+ " o Oficial de Registro de ImÃ³veis ou de Registro de TÃ­tulos e Documentos ou o serventuÃ¡rio por eles"
					+ " credenciado ou o Oficial Registro de TÃ­tulos e Documentos  do domicilio do(s) FIDUCIANTE(S) "
					+ "houver procurado o(s) FIDUCIANTE(S) titular(es) do(s) ImÃ³vel(eis) em seu domicÃ­lio ou residÃªncia "
					+ "sem o encontrar, deverÃ¡, havendo suspeita motivada de ocultaÃ§Ã£o, intimar qualquer pessoa da famÃ­lia "
					+ "ou, em sua falta, qualquer vizinho de que, no dia Ãºtil imediato, retornarÃ¡ ao imÃ³vel, a fim de efetuar"
					+ " a intimaÃ§Ã£o, na hora que designar, aplicando-se subsidiariamente o disposto nos arts. 252, 253 e 254 "
					+ "da Lei no 13.105, de 16 de marÃ§o de 2015 (CÃ³digo de Processo Civil);", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID, "Nos condomÃ­nios edilÃ­cios ou outras espÃ©cies de "
					+ "conjuntos imobiliÃ¡rios com controle de acesso, a intimaÃ§Ã£o poderÃ¡ ser feita ao funcionÃ¡rio da"
					+ " portaria responsÃ¡vel pelo recebimento de correspondÃªncia; e", false);
			
			geraParagrafoBulletList(document, paragraph, run, numID, "Quando o(s) FIDUCIANTE(ES), ou seu representante"
					+ " legal ou procurador encontrar-se em local ignorado, incerto ou inacessÃ­vel, o fato serÃ¡ "
					+ "certificado pelo serventuÃ¡rio encarregado da diligÃªncia e informado ao oficial de Registro "
					+ "de ImÃ³veis, que, Ã  vista da certidÃ£o, promoverÃ¡ a intimaÃ§Ã£o por edital publicado durante 3 "
					+ "(trÃªs) dias, pelo menos, em um dos jornais de maior circulaÃ§Ã£o local ou noutro de comarca "
					+ "de fÃ¡cil acesso, se no local nÃ£o houver imprensa diÃ¡ria, contado o prazo para purgaÃ§Ã£o da"
					+ " mora da data da Ãºltima publicaÃ§Ã£o do edital;", false);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Os FIDUCIANTES constituem-se bastantes procuradores, uns dos outros, "
					+ "outorgando-se mutuamente poderes gerais, podendo qualquer um deles receber citaÃ§Ãµes,"
					+ " intimaÃ§Ãµes, comunicaÃ§Ãµes, notificaÃ§Ãµes, acordar, negociar, quitar, dar e receber,"
					+ " em nome um do outro, encarregando-se de dar ciÃªncia Ã  outra parte de quaisquer"
					+ " obrigaÃ§Ãµes decorrentes da CCB e da presente garantia");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", nÃ£o podendo qualquer um deles alegar desconhecimento do que a outra parte"
					+ " fez e/ou realizou em relaÃ§Ã£o ao presente instrumento e em especial receber "
					+ "todas as intimaÃ§Ãµes decorrentes da Lei 9514/97, promovidas dor CartÃ³rio de Registro "
					+ "de ImÃ³veis ou outro autorizado em lei, sem exceÃ§Ã£o.â;");
			run2.setBold(true);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.5. ", "Purgada a mora, perante o"
					+ " CartÃ³rio de Registro de ImÃ³vel(eis) competente, a presente AlienaÃ§Ã£o FiduciÃ¡ria"
					+ " se restabelecerÃ¡, caso ainda exista(m) ObrigaÃ§Ãµes Garantidas. Nesta hipÃ³tese, "
					+ "nos 3 (trÃªs) dias seguintes, o Oficial entregarÃ¡ Ã  FIDUCIÃRIA, ou aos Sucessores,"
					+ " conforme o caso, as importÃ¢ncias recebidas, deduzidas as despesas de cobranÃ§a e"
					+ " de intimaÃ§Ã£o.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.6. ", "O nÃ£o pagamento, pelo(s) FIDUCIANTE(S)"
					+ " de qualquer valor devido pelas ObrigaÃ§Ãµes Garantidas vencidas e nÃ£o pagas, depois de"
					+ " devidamente comunicada nos termos da intimaÃ§Ã£o tratada acima, bastarÃ¡ para a configuraÃ§Ã£o"
					+ " da nÃ£o purgaÃ§Ã£o da mora. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.7. ", "NÃ£o havendo purgaÃ§Ã£o da mora, "
					+ "o Oficial do CartÃ³rio de Registro de ImÃ³vel(eis) certificarÃ¡ o fato e promoverÃ¡ a "
					+ "averbaÃ§Ã£o, na matrÃ­cula do(s) ImÃ³vel(eis), da consolidaÃ§Ã£o da propriedade do(s) "
					+ "ImÃ³vel(eis) em nome da FIDUCIÃRIA, cabendo a esta, apresentar o comprovante de"
					+ " recolhimento do respectivo Imposto sobre TransmissÃ£o de Bens ImÃ³veis â ITBI e,"
					+ " se for o caso, do laudÃªmio.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.7.1 ", "O(s) FIDUCIANTE(s) pode(rÃ£o),"
					+ " com a anuÃªncia da FIDUCIÃRIA, dar seu direito eventual ao imÃ³vel em pagamento da dÃ­vida,"
					+ " dispensados os procedimentos previstos no art. 27Âº da Lei 9.514/1997.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "4.7.2 ", "AtÃ© a data da averbaÃ§Ã£o"
					+ " da consolidaÃ§Ã£o da propriedade fiduciÃ¡ria, Ã© assegurado ao(s) FIDUCIANTE(S) ou DEVEDOR,"
					+ " quando aplicÃ¡vel, pagar as parcelas da dÃ­vida vencidas e as despesas de que trata o"
					+ " inciso II do Â§ 3o do art. 27, hipÃ³tese em que convalescerÃ¡ o contrato de AlienaÃ§Ã£o"
					+ " FiduciÃ¡ria.", true, false);
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA QUINTA â DOS LEILÃES PÃBLICOS EXTRAJUDICIAIS E PROCEDIMENTOS DO ARTIGO 27Âº DA LEI 9514/97 ", true);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.1. ", "Consolidada a propriedade do(s)"
					+ " ImÃ³vel(eis) em nome da FIDUCIÃRIA, esta promoverÃ¡ os pÃºblicos leilÃµes, extrajudicialmente,"
					+ " para alienaÃ§Ã£o em questÃ£o, no prazo de 30 (trinta) dias contados do registro da referida"
					+ " consolidaÃ§Ã£o. ", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.2. ");
			run.setBold(true);
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Se no primeiro pÃºblico leilÃ£o, o maior "
					+ "lance oferecido for inferior ao ");
			run2.setBold(false);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Valor do ImÃ³vel");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" leiloado, conforme definiÃ§Ã£o na clausula 6Âª abaixo, serÃ¡ realizado o segundo leilÃ£o,"
					+ " nos 15 (quinze) dias seguintes.");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.3. ");
			run.setBold(true);
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("No segundo leilÃ£o, serÃ¡ aceito o maior lance oferecido, desde que igual ou superior ao ");
			run2.setBold(false);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Valor da DÃ­vida");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", das despesas, dos prÃªmios de seguro, dos encargos legais, inclusive tributos,"
					+ " e das contribuiÃ§Ãµes condominiais. ");
			run2.setBold(false);
			run2.addCarriageReturn();			
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.4. ", "Os leilÃµes pÃºblicos extrajudiciais"
					+ " (primeiro e segundo) serÃ£o anunciados em edital Ãºnico, resumido,"
					+ " por trÃªs vezes em jornal de ampla circulaÃ§Ã£o na Comarca da situaÃ§Ã£o do(s)"
					+ " ImÃ³vel(eis) ou em outro de comarca de fÃ¡cil acesso, se, no local do(s) ImÃ³vel(eis) "
					+ "nÃ£o houver imprensa com circulaÃ§Ã£o diÃ¡ria; ", true, false);
			
			geraParagrafoCompostoSemReturn(document, paragraph, run, run2, "5.4.1. ", "Diante do acima exposto obriga-se o"
					+ " FIDUCIANTE a manter seus dados de notificaÃ§Ã£o atualizados de forma que, caso nÃ£o o faÃ§a,"
					+ " as notificaÃ§Ãµes serÃ£o endereÃ§adas aos seguintes endereÃ§os abaixo:", true, false);
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
				if(participante.isFiduciante()) {
					if(!fiducianteGerado) {
						paragraph = document.createParagraph();
						paragraph.setAlignment(ParagraphAlignment.BOTH);
						paragraph.setSpacingBefore(0);
						paragraph.setSpacingAfter(0);
						paragraph.setSpacingBetween(1);
	
						run = paragraph.createRun();
						run.setFontSize(12);
						run.addCarriageReturn();
						run.setText("Pelo FIDUCIANTE:");
						run.setBold(false);
						run.setUnderline(UnderlinePatterns.SINGLE);
						fiducianteGerado = true;
					}
		
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.BOTH);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				paragraph.setSpacingBetween(1);
	
				run = paragraph.createRun();
				run.addCarriageReturn();
				run.setFontSize(12);
				run.setText(participante.getPessoa().getNome());
				run.setBold(true);
				run.addCarriageReturn();
				
				run2 = paragraph.createRun();
				run2.setFontSize(12);
				run2.setText(participante.getPessoa().getEndereco() + ", nÂ° " + participante.getPessoa().getNumero() + ", " + participante.getPessoa().getCidade() + " - " + participante.getPessoa().getEstado());
				run2.setBold(false);
				run2.addCarriageReturn();
				
				run2 = paragraph.createRun();
				run2.setFontSize(12);
				run2.setText("CEP " + participante.getPessoa().getCep());
				run2.setBold(false);
				run2.addCarriageReturn();
				
				run2 = paragraph.createRun();
				run2.setFontSize(12);
				run2.setText("E-mail: " + participante.getPessoa().getEmail());
				run2.setBold(false);
				
				} else {
					if(!devedorGerado) {
						paragraph = document.createParagraph();
						paragraph.setAlignment(ParagraphAlignment.BOTH);
						paragraph.setSpacingBefore(0);
						paragraph.setSpacingAfter(0);
						paragraph.setSpacingBetween(1);
	
						run = paragraph.createRun();
						run.setFontSize(12);
						run.addCarriageReturn();
						run.setText("Pelo DEVEDOR:");
						run.setBold(false);
						run.setUnderline(UnderlinePatterns.SINGLE);
						devedorGerado = true;
					}
		
				paragraph = document.createParagraph();
				paragraph.setAlignment(ParagraphAlignment.BOTH);
				paragraph.setSpacingBefore(0);
				paragraph.setSpacingAfter(0);
				paragraph.setSpacingBetween(1);
	
				run = paragraph.createRun();
				run.addCarriageReturn();
				run.setFontSize(12);
				run.setText(participante.getPessoa().getNome());
				run.setBold(true);
				run.addCarriageReturn();
				
				run2 = paragraph.createRun();
				run2.setFontSize(12);
				run2.setText(participante.getPessoa().getEndereco() + ", nÂ° " + participante.getPessoa().getNumero() + ", " + participante.getPessoa().getCidade() + " - " + participante.getPessoa().getEstado());
				run2.setBold(false);
				run2.addCarriageReturn();
				
				run2 = paragraph.createRun();
				run2.setFontSize(12);
				run2.setText("CEP " + participante.getPessoa().getCep());
				run2.setBold(false);
				run2.addCarriageReturn();
				
				run2 = paragraph.createRun();
				run2.setFontSize(12);
				run2.setText("E-mail: " + participante.getPessoa().getEmail());
				run2.setBold(false);
				}
			}
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.addCarriageReturn();
			run.setFontSize(12);
			run.setText("Pela FIDUCIÃRIA:");
			run.setBold(false);
			run.setUnderline(UnderlinePatterns.SINGLE);
			fiducianteGerado = true;
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.addCarriageReturn();
			run.setFontSize(12);
			run.setText("BMP SOCIEDADE DE CRÃDITO DIRETO S.A. ");
			run.setBold(true);
			run.addCarriageReturn();
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Av. Paulista, 1765, 1Âº Andar, CEP 01311-200, SÃ£o Paulo, SP ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("E-mail: ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("cb@moneyp.com.br");
			run.setBold(false);
			run.setColor("0000ff");
			run.setUnderline(UnderlinePatterns.SINGLE);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.5. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("ApÃ³s a averbaÃ§Ã£o da consolidaÃ§Ã£o da propriedade fiduciÃ¡ria no "
					+ "patrimÃ´nio da FIDUCIÃRIA e atÃ© a data da realizaÃ§Ã£o do segundo leilÃ£o,"
					+ " Ã© assegurado aos FIDUCIANTE(S) o direito de preferÃªncia para adquirir"
					+ " o(s) ImÃ³vel(eis) por preÃ§o correspondente ao ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Valor da DÃ­vida");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", somado aos encargos, dos prÃªmios de seguro, dos encargos legais,"
					+ " inclusive tributos, e das contribuiÃ§Ãµes condominiais, aos valores "
					+ "correspondentes ao imposto sobre transmissÃ£o inter vivos e ao laudÃªmio,"
					+ " se for o caso, pagos para efeito de consolidaÃ§Ã£o da propriedade "
					+ "fiduciÃ¡ria no patrimÃ´nio da FIDUCIÃRIA, e Ã s ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Despesas ");
			run.setBold(true);
	
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("inerentes ao procedimento de cobranÃ§a e leilÃ£o, incumbindo,"
					+ " tambÃ©m, ao(s) FIDUCIANTE(S) o pagamento dos encargos tributÃ¡rios"
					+ " e despesas exigÃ­veis para a nova aquisiÃ§Ã£o do(s) ImÃ³vel(eis), de "
					+ "que trata este parÃ¡grafo, inclusive custas, impostos e emolumentos. ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.6. ", "Para os fins do disposto na clÃ¡usula 5.5."
					+ " deste instrumento, as datas, horÃ¡rios e locais dos leilÃµes serÃ£o comunicados ao devedor "
					+ "mediante correspondÃªncia dirigida aos endereÃ§os constantes do contrato, inclusive ao endereÃ§o"
					+ " eletrÃ´nico.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.7. ", "Para os fins do disposto no artigo 27Âº"
					+ " da Lei 9.514/1997, entende-se por: ", true, false);
			
			cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML_bold_Roman_NoLeft_NoHanging);
			cTAbstractNum = cTNumbering.getAbstractNumArray(0);
			// CTAbstractNum cTAbstractNum = getAbstractNumber(STNumberFormat.LOWER_LETTER);
			abstractNum = new XWPFAbstractNum(cTAbstractNum);
			numbering = document.createNumbering();
			abstractNumID = numbering.addAbstractNum(abstractNum);
			numID = numbering.addNum(abstractNumID);
			
			geraParagrafoBulletListComposta(document, paragraph, run, run2, "â Valor da DÃ­vida: ", "a soma do saldo devedor das"
					+ " operaÃ§Ãµes representativas das ObrigaÃ§Ãµes Garantidas, na data do leilÃ£o, nele incluÃ­dos os juros "
					+ "convencionais, as penalidades e os demais encargos contratuais; ", true, false, numID, UnderlinePatterns.NONE);
			
			geraParagrafoBulletListComposta(document, paragraph, run, run2, "â Despesas: ", "a soma das importÃ¢ncias correspondentes aos"
					+ " encargos e custas de intimaÃ§Ã£o, e as necessÃ¡rias Ã  realizaÃ§Ã£o do pÃºblico leilÃ£o, nestas compreendidas"
					+ " as relativas aos anÃºncios, publicaÃ§Ãµes de editais, Ã  comissÃ£o do leiloeiro, avaliaÃ§Ãµes e perÃ­cias,"
					+ " Imposto sob transmissÃ£o recolhido para fins de consolidaÃ§Ã£o da propriedade bem como, adicionalmente,"
					+ " honorÃ¡rios advocatÃ­cios extrajudiciais no importe de 20%(vinte por cento) sob o Valor da DÃ­vida"
					+ " relacionados aos procedimentos de cobranÃ§a.  ", true, false, numID, UnderlinePatterns.NONE);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.8. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Nos ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("cinco dias que se seguirem Ã  venda do(s) ImÃ³vel(eis)");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" no leilÃ£o, a FIDUCIÃRIA entregarÃ¡ ao(s) FIDUCIANTE(S) a importÃ¢ncia que sobejar, "
					+ "considerando-se nela compreendido o valor da indenizaÃ§Ã£o de benfeitorias, depois de deduzidos"
					+ " o Valor da DÃ­vida e das Despesas e encargos aplicÃ¡veis, fato esse que importarÃ¡ em recÃ­proca "
					+ "quitaÃ§Ã£o, nÃ£o se aplicando o disposto na parte final do art. 516 do CÃ³digo Civil.");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.9. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Se, no segundo leilÃ£o, o maior lance oferecido nÃ£o for igual ou superior ao ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Valor da DÃ­vida");
			run.setBold(true);
			run.setUnderline(UnderlinePatterns.SINGLE);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" somado Ã s Despesas e dos Encargos, considerar-se-Ã¡ extinta a dÃ­vida "
					+ "e exonerada a FIDUCIÃRIA da obrigaÃ§Ã£o de entregar ao(s) FIDUCIANTE(S) o sobejo"
					+ " retratado na clausula acima. ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.9.1. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Na hipÃ³tese dessa clausula, a FIDUCIÃRIA, ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("no prazo de cinco dias a contar da data do segundo leilÃ£o");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", darÃ¡ ao(s) FIDUCIANTE(S) quitaÃ§Ã£o da dÃ­vida, mediante termo prÃ³prio.");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.10. ", "Se o(s) ImÃ³vel (eis) estiver(em) locado(s),"
					+ " a locaÃ§Ã£o poderÃ¡ ser denunciada com o prazo de 30(trinta) dias para desocupaÃ§Ã£o, salvo se"
					+ " tiver havido aquiescÃªncia por escrito da FIDUCIÃRIA, devendo a denÃºncia ser realizada no "
					+ "prazo de 90(noventa) dias a contar da data da consolidaÃ§Ã£o da propriedade na FIDUCIÃRIA, "
					+ "devendo essa condiÃ§Ã£o constar expressamente em clÃ¡usula contratual especÃ­fica, destacando-se"
					+ " das demais por sua apresentaÃ§Ã£o grÃ¡fica.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.11. ", "A critÃ©rio do CREDOR,"
					+ " poderÃ¡ ser realizada a alteraÃ§Ã£o de propriedade do imÃ³vel no contrato de aluguel,"
					+ " mediante aditivo prÃ³prio que independerÃ¡ de notificaÃ§Ã£o ou anuÃªncia do DEVEDOR, "
					+ "caso em que os alugueis serÃ£o devidos ao CREDOR desde a consolidaÃ§Ã£o.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.12. ", "Responde o(s) FIDUCIANTE(S)"
					+ " pelo pagamento dos impostos, taxas, contribuiÃ§Ãµes condominiais e quaisquer outros "
					+ "encargos que recaiam ou venham a recair sobre o(s) ImÃ³vel(eis), cuja posse tenha sido "
					+ "transferida para a FIDUCIÃRIA, atÃ© a data em que a FIDUCIÃRIA vier "
					+ "a ser imitida na posse.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.13. ", "A cessÃ£o de quaisquer das ObrigaÃ§Ãµes Garantidas"
					+ " implicarÃ¡ a transferÃªncia, ao cessionÃ¡rio, de todos os direitos e obrigaÃ§Ãµes inerentes Ã  propriedade"
					+ " fiduciÃ¡ria em garantia. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.14. ", "O(s) FIDUCIANTE(S), com anuÃªncia expressa da "
					+ "FIDUCIÃRIA, poderÃ¡ transmitir os direitos de que seja titular sobre o(s) ImÃ³vel(eis) objeto da "
					+ "alienaÃ§Ã£o fiduciÃ¡ria em garantia, assumindo o adquirente as respectivas obrigaÃ§Ãµes. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.15. ", "O(s) FIDUCIANTE(S) deverÃ¡(Ã£o) desocupar"
					+ " o imÃ³vel atÃ© a data da realizaÃ§Ã£o do primeiro pÃºblico leilÃ£o, deixando-o livre e desimpedido de "
					+ "pessoas e coisas. ", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("5.16. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("NÃ£o ocorrendo a desocupaÃ§Ã£o do(s) ImÃ³vel(eis), no prazo e forma ajustados, a FIDUCIÃRIA,"
					+ " ou seus Sucessores, inclusive o adquirente do ImÃ³vel(eis) em leilÃ£o ou posteriormente, "
					+ "poderÃ¡ requerer a reintegraÃ§Ã£o de sua posse cumulada com cobranÃ§a do valor da Taxa de OcupaÃ§Ã£o"
					+ " desde a data da consolidaÃ§Ã£o (observado o limite mÃ¡ximo mensal ou por fraÃ§Ã£o de 1% acima estabelecido)"
					+ " e demais despesas previstas neste Instrumento de AlienaÃ§Ã£o, sendo concedida, liminarmente, a ordem "
					+ "judicial de desocupaÃ§Ã£o no prazo mÃ¡ximo de 60 (sessenta) dias, desde que comprovada, mediante certidÃ£o"
					+ " da matrÃ­cula do ImÃ³vel(eis) a consolidaÃ§Ã£o da plena propriedade em nome da ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", ou do registro do contrato celebrado em decorrÃªncia do leilÃ£o, "
					+ "conforme quem seja o autor da aÃ§Ã£o de reintegraÃ§Ã£o de posse. ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.17. ", "O fiador ou terceiro"
					+ " interessado que pagar a dÃ­vida ficarÃ¡ sub-rogado, de pleno direito, no crÃ©dito e na propriedade "
					+ "fiduciÃ¡ria. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.18. ", "Na hipÃ³tese de insolvÃªncia do(s)"
					+ " FIDUCIANTE(S) fica assegurada Ã  FIDUCIÃRIA a restituiÃ§Ã£o do(s) ImÃ³vel(eis) alienado(s) "
					+ "fiduciariamente, na forma da legislaÃ§Ã£o pertinente.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.19. ", "Aplicam-se Ã  propriedade fiduciÃ¡ria regida"
					+ " por este instrumento, no que couber, as disposiÃ§Ãµes dos arts. 647 e 648 do CÃ³digo Civil.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "5.20. ", "Na hipÃ³tese de desapropriaÃ§Ã£o, total ou parcial,"
					+ " do(s) ImÃ³vel(eis), a FIDUCIÃRIA, como proprietÃ¡ria, ainda que em carÃ¡ter resolÃºvel, serÃ¡ o Ãºnico e exclusivo"
					+ " beneficiÃ¡rio da justa e prÃ©via indenizaÃ§Ã£o paga pelo poder expropriante.", true, false);
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA SEXTA â DO VALOR DE VENDA DO(S) IMÃVEL(EIS) PARA FINS DE LEILÃO ", true);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("6.1. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("As Partes convencionam que o valor de venda total do(s) ImÃ³vel(eis) para fins de leilÃ£o, Ã© de  ");
			run2.setBold(false);
			
			valorPorExtenso.setNumber(objetoCcb.getVendaLeilao());
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(CommonsUtil.formataValorMonetario( objetoCcb.getVendaLeilao(), "R$ ") + " ("+ valorPorExtenso.toString() +"),");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("conforme Laudo de AvaliaÃ§Ã£o (anexo) elaborado por ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(objetoCcb.getElaboradorNome() +" - CREA "+ objetoCcb.getElaboradorCrea());
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" e responsÃ¡vel ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(objetoCcb.getResponsavelNome() +" - CREA "+ objetoCcb.getResponsavelCrea() +", ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("o qual deverÃ¡ ser devidamente atualizado pelo IGP-M/FGV, desde a data base do"
					+ " Laudo atÃ© a data de realizaÃ§Ã£o de cada leilÃ£o (âValor de Venda do ImÃ³vel(eis) em "
					+ "LeilÃ£oâ ou âValor do ImÃ³vel(eis)â).  (novo)");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("6.2. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("AtÃ© o pagamento integral da(s) CCB(s), a qualquer momento e "
					+ "independentemente do devido cumprimento das demais obrigaÃ§Ãµes da ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIANTE "+ objetoCcb.getNomeEmitente().toUpperCase() +" ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("contratadas no Ã¢mbito da CCB, o valor do ImÃ³vel(eis) deverÃ¡ ser equivalente a, pelo menos, ");
			run2.setBold(false);
			
			porcentagemPorExtenso.setNumber(objetoCcb.getPorcentagemImovel());
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(CommonsUtil.formataValorTaxa(objetoCcb.getPorcentagemImovel()) +"% ("+ porcentagemPorExtenso.toString() +" por cento) ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("do saldo devedor da CCB, acrescido dos juros remuneratÃ³rios e, conforme o caso, encargos moratÃ³rios (âRazÃ£o MÃ­nimaâ).");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("6.3. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Na hipÃ³tese de a RazÃ£o MÃ­nima nÃ£o ser observada, a qualquer momento, ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("o(s) FIDUCIANTE(S) ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("deverÃ¡(Ã£o), no prazo de atÃ© 10 (dez) dias contados do recebimento de comunicaÃ§Ã£o nesse sentido, oferecer Ã  ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("outra garantia que este considere aceitÃ¡vel,"
					+ " a seu exclusivo critÃ©rio, para reforÃ§o das garantias nos termos da(s) CCBs. ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("6.4. ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Nos termos do parÃ¡grafo Ãºnico do artigo 24Âº da Lei 9.514/1997 "
					+ "atualizado pela Lei nÂº 13.465/2017, anuem as Partes que, ");
			run2.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("caso o Valor do ImÃ³vel indicado na clausula 6.1 seja inferior"
					+ " ao utilizado pelo Ã³rgÃ£o competente como base de cÃ¡lculo para a apuraÃ§Ã£o"
					+ " do imposto sobre transmissÃ£o inter vivos, exigÃ­vel por forÃ§a da "
					+ "consolidaÃ§Ã£o da propriedade em nome do credor fiduciÃ¡rio, o Valor "
					+ "MÃ­nimo de Venda do ImÃ³vel(eis) em LeilÃ£o deverÃ¡ automaticamente "
					+ "corresponder ao valor de tal apuraÃ§Ã£o.");
			run2.setBold(false);
			run2.setUnderline(UnderlinePatterns.SINGLE);
			run2.addCarriageReturn();
			
			fazParagrafoSimples(document, paragraph, run, "CLAUSULA SÃTIMA - DAS DISPOSIÃÃES GERAIS", true);
			
			geraParagrafoComposto(document, paragraph, run, run2, "7.1 ", "A tolerÃ¢ncia por qualquer das "
					+ "Partes quanto a alguma demora, atraso ou omissÃ£o das outras no cumprimento das "
					+ "obrigaÃ§Ãµes ajustadas nesta AlienaÃ§Ã£o FiduciÃ¡ria, ou a nÃ£o aplicaÃ§Ã£o, na ocasiÃ£o "
					+ "oportuna, das cominaÃ§Ãµes aqui constantes, nÃ£o acarretarÃ¡ o cancelamento das penalidades,"
					+ " nem dos poderes ora conferidos, podendo ser aplicadas aquelas e exercidos estes,"
					+ " a qualquer tempo, caso permaneÃ§am as causas. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "7.1.1 ", "O disposto no item 7.1, acima,"
					+ " prevalecerÃ¡ ainda que a tolerÃ¢ncia ou a nÃ£o aplicaÃ§Ã£o das cominaÃ§Ãµes ocorra repetidas vezes,"
					+ " consecutiva ou alternadamente. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "7.2 ", "A ocorrÃªncia de uma ou mais hipÃ³teses referidas"
					+ " acima nÃ£o implicarÃ¡ novaÃ§Ã£o ou modificaÃ§Ã£o de quaisquer disposiÃ§Ãµes	desta AlienaÃ§Ã£o FiduciÃ¡ria,"
					+ " as quais permanecerÃ£o Ã­ntegras e em pleno vigor, como se nenhum favor houvesse ocorrido.", true, false);
						
			geraParagrafoComposto(document, paragraph, run, run2, "7.3 ", "As obrigaÃ§Ãµes constituÃ­das por "
					+ "esta AlienaÃ§Ã£o FiduciÃ¡ria sÃ£o extensivas e obrigatÃ³rias aos cessionÃ¡rios,"
					+ " promissÃ¡rios-cessionÃ¡rios, herdeiros e sucessores a qualquer tÃ­tulo"
					+ " das Partes.  ", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("7.4 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Na hipÃ³tese de desapropriaÃ§Ã£o total ou parcial do ImÃ³vel(eis), a ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", ou os Sucessores, conforme o caso, como proprietÃ¡rios do ImÃ³vel(eis),"
					+ " ainda que em carÃ¡ter fiduciÃ¡rio, serÃ£o os Ãºnicos e exclusivos beneficiÃ¡rios"
					+ " da justa e prÃ©via indenizaÃ§Ã£o paga pelo poder expropriante, atÃ© o limite do"
					+ " saldo devedor das ObrigaÃ§Ãµes Garantidas Ã  Ã©poca, sendo tais valores"
					+ " amortizados das ObrigaÃ§Ãµes Garantidas.");
			run2.setBold(false);
			run2.addCarriageReturn();
	
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
	
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("7.4.1 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Se, no dia de seu recebimento pela ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(", ou pelos Sucessores, conforme o caso, a proporÃ§Ã£o da indenizaÃ§Ã£o conforme item 7.4, acima, for: ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			cTNumbering = CTNumbering.Factory.parse(cTAbstractNumBulletXML);
			cTAbstractNum = cTNumbering.getAbstractNumArray(0);
			// CTAbstractNum cTAbstractNum = getAbstractNumber(STNumberFormat.LOWER_LETTER);
			abstractNum = new XWPFAbstractNum(cTAbstractNum);
			numbering = document.createNumbering();
			abstractNumID = numbering.addAbstractNum(abstractNum);
			numID = numbering.addNum(abstractNumID);
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Superior ao saldo devedor das ObrigaÃ§Ãµes Garantidas Ã  Ã©poca,"
					+ " a importÃ¢ncia que sobejar serÃ¡ entregue aos ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("FIDUCIANTE(S)");
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("; ou");
			run.setBold(false);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setNumID(numID);
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Inferior ao saldo devedor das ObrigaÃ§Ãµes Garantidas Ã  Ã©poca, a ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("FIDUCIÃRIA");
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(", ou os Sucessores, conforme o caso,"
					+ " ficarÃ£o exonerados da obrigaÃ§Ã£o de restituiÃ§Ã£o de qualquer quantia, a que tÃ­tulo for, em favor dos ");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("FIDUCIANTE(S)");
			run2.setBold(true);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText(", pela integral liquidaÃ§Ã£o das ObrigaÃ§Ãµes Garantidas.");
			run.setBold(false);
			run.addCarriageReturn();
			
			geraParagrafoComposto(document, paragraph, run, run2, "7.5 ", "As Partes autorizam e determinam,"
					+ " desde jÃ¡, que o Sr. Oficial do ServiÃ§o de Registro de ImÃ³veis competente proceda,"
					+ " total ou parcialmente, a todos os assentamentos, registros e averbaÃ§Ãµes necessÃ¡rios"
					+ " decorrentes da presente AlienaÃ§Ã£o FiduciÃ¡ria, isentando-os de qualquer responsabilidade "
					+ "pelo devido cumprimento do disposto neste instrumento.", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "7.6 ", "Fica desde logo estipulado que"
					+ " a presente AlienaÃ§Ã£o FiduciÃ¡ria revoga e substitui todo e qualquer entendimento havido"
					+ " entre as Partes anteriormente a esta data sobre o mesmo objeto. ", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "7.7 ", "Todas as comunicaÃ§Ãµes entre as Partes "
					+ "serÃ£o consideradas vÃ¡lidas quando enviadas nos endereÃ§os constantes da clÃ¡usula 5.4.1 desta"
					+ " AlienaÃ§Ã£o FiduciÃ¡ria, observado, inclusive o disposto no item 4.4. alÃ­nea âgâ, ou em outros"
					+ " que venham a indicar, por escrito, no curso desta relaÃ§Ã£o. Cada Parte deverÃ¡ comunicar "
					+ "imediatamente a outra sobre a mudanÃ§a de seu endereÃ§o.", true, false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("7.8 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Neste ato e como condiÃ§Ã£o de celebraÃ§Ã£o do presente instrumento, o(s) ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIANTE(S)");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" nomeia(m) a ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIÃRIA ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("de forma irrevogÃ¡vel e irretratÃ¡vel, para representÃ¡-lo(s) na celebraÃ§Ã£o de"
					+ " escrituras de registro da presente que eventualmente se faÃ§am necessÃ¡rias por"
					+ " exigÃªncia do competente Oficial de Registro de ImÃ³veis, podendo este descrever "
					+ "e caracterizar o(s) ImÃ³vel(eis), suas benfeitorias, perÃ­metro e confrontantes, "
					+ "bem como cumprir alterar todo e qualquer outro item que se faÃ§a necessÃ¡rio, desde"
					+ " que mantidas as condiÃ§Ãµes comerciais ora pactuadas, podendo inclusive substabelecer,"
					+ " com reservas os poderes ora conferidos. Ainda, o(s) ");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("FIDUCIANTE(S)");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText(" compromete-se neste ato a fornecer toda a documentaÃ§Ã£o necessÃ¡ria para tanto. ");
			run2.setBold(false);
			run2.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("7.9 ");
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("Os â");
			run2.setBold(false);
			
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("Considerandos");
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setFontSize(12);
			run2.setText("â e os Anexos constituem partes integrantes e inseparÃ¡veis da"
					+ " presente AlienaÃ§Ã£o FiduciÃ¡ria, e serÃ£o considerados meios vÃ¡lidos"
					+ " e eficazes para fins de interpretaÃ§Ã£o das ClÃ¡usulas deste. ");
			run2.setBold(false);
			
			fazParagrafoSimples(document, paragraph, run, "CLÃUSULA OITAVA â DA LEI DE REGÃNCIA E DO FORO DE ELEIÃÃO ", true);
			
			geraParagrafoComposto(document, paragraph, run, run2, "8.1 ", "A presente AlienaÃ§Ã£o FiduciÃ¡ria Ã© regida,"
					+ " material e processualmente, pelas leis da RepÃºblica Federativa do Brasil e faz parte"
					+ " acessÃ³ria da(s) CCB(s).", true, false);
			
			geraParagrafoComposto(document, paragraph, run, run2, "8.2 ", "Todo litÃ­gio ou controvÃ©rsia originÃ¡rio"
					+ " ou decorrente desta AlienaÃ§Ã£o FiduciÃ¡ria e dos demais Documentos da OperaÃ§Ã£o serÃ¡ submetido"
					+ " ao Foro da Comarca de SÃ£o Paulo, Estado de SÃ£o Paulo, Ãºnico competente para conhecer e "
					+ "dirimir quaisquer questÃµes ou litÃ­gios, com renÃºncia expressa a qualquer outro, por mais"
					+ " privilegiado que seja ou venha a ser. ", true, false);
			
			fazParagrafoSimples(document, paragraph, run, "E, por estarem assim, justas e contratadas, as Partes assinam"
					+ " a presente AlienaÃ§Ã£o FiduciÃ¡ria em 2 (duas) vias, de igual teor e forma, na presenÃ§a das 2 (duas)"
					+ " testemunhas abaixo identificadas. ", false);
			
			fazParagrafoSimples(document, paragraph, run,
					"SÃ£o Paulo, SP, " + objetoCcb.getDataDeEmissao().getDate() + " de "
							+ CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase() + " de "
							+ (objetoCcb.getDataDeEmissao().getYear() + 1900) + ".",
					false);
			
			paragraph = document.createParagraph();		
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setAlignment(ParagraphAlignment.CENTER);
			paragraph.setSpacingBetween(1);
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setText("(O final desta pÃ¡gina foi intencionalmente deixado em branco)");
			run.setBold(false);
			run.setItalic(true);
			run.addCarriageReturn();
			run.setText("(Segue a pÃ¡gina de assinaturas)");
	
			paragraph = document.createParagraph();
			paragraph.setPageBreak(true);
			
			paragraph = document.createParagraph();	
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			run = paragraph.createRun();
			run.setFontSize(12);
			run.setText("(PÃ¡gina de assinaturas do INSTRUMENTO PARTICULAR DE ALIENAÃÃO FIDUCIÃRIA DE BEM(NS) IMÃVEL(EIS) EM GARANTIA E OUTRAS AVENÃAS "
					+ "nÂº " + objetoCcb.getNumeroCcb() + ", emitida por "+ objetoCcb.getNomeEmitente().toUpperCase() +", CPF/MF nÂº "+ objetoCcb.getCpfEmitente() +", em favor de "
					+ "BMP SOCIEDADE DE CRÃDITO DIRETO S.A., CNPJ/ MF sob nÂº 34.337.707/0001-00,"
					+ " em "+ CommonsUtil.formataData(objetoCcb.getDataDeEmissao(), "dd/MM/yyyy" )+".)");
			run.setBold(false);
			run.setItalic(true);
			run.addCarriageReturn();
	
			XWPFTable table = document.createTable();
	
			paragraph = document.createParagraph();
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			paragraph.setSpacingBetween(1);
			paragraph.setAlignment(ParagraphAlignment.LEFT);
	
			table.getCTTbl().addNewTblGrid().addNewGridCol().setW(BigInteger.valueOf(6000));
			table.getCTTbl().getTblGrid().addNewGridCol().setW(BigInteger.valueOf(2500));
	
			// create first row
			XWPFTableRow tableRow1 = table.getRow(0);
	
			tableRow1.getCell(0).setParagraph(paragraph);
			run = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("__________________________________");
			run.setBold(false);
			run.addBreak();
	
			run2 = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run2.setFontSize(12);
			run2.setText("BMP SOCIEDADE DE CRÃDITO DIRETO S.A");
			run2.setBold(true);
			run2.addBreak();
	
			run4 = tableRow1.getCell(0).getParagraphArray(0).createRun();
			run4.setFontSize(12);
			run4.setText("FIDUCIÃRIA");
			run4.setBold(false);
	
			tableRow1.addNewTableCell();
	
			tableRow1.getCell(1).setParagraph(paragraph);
	
			run = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("__________________________________");
			run.setBold(false);
			run.addBreak();
	
			run2 = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run2.setFontSize(12);
			run2.setText(objetoCcb.getNomeEmitente().toUpperCase());
			run2.setBold(true);
			run2.addBreak();
	
			run3 = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run3.setFontSize(12);
			run3.setText(" ");
			run3.setBold(true);
			run3.addBreak();
	
			run4 = tableRow1.getCell(1).getParagraphArray(0).createRun();
			run4.setFontSize(12);
			run4.setText("EMITENTE");
			run4.setBold(false);
	
			XWPFTableRow tableRow2 = table.createRow();
	
			if (objetoCcb.getListaParticipantes().size() > 1) {
				tableRow2.getCell(0).setParagraph(paragraph);
				tableRow2.getCell(1).setParagraph(paragraph);
				int qtdePessoasEsquerdo = 0;
				for (int iPartTab = 0; iPartTab < objetoCcb.getListaParticipantes().size(); iPartTab++) {
	
					CcbParticipantes participante = objetoCcb.getListaParticipantes().get(iPartTab);
					if (iPartTab != 0) {
						if (iPartTab % 2 != 0) {
	
							run = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run.addBreak();
							run.setFontSize(12);
							run.setText("__________________________________");
							run.setBold(false);
							run.addBreak();
	
							run2 = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run2.setFontSize(12);
							run2.setText(participante.getPessoa().getNome());
							run2.setBold(true);
							run2.addBreak();
	
							run3 = tableRow2.getCell(0).getParagraphArray(0).createRun();
							run3.setFontSize(12);
							run3.setText(participante.getTipoParticipante());
							run3.setBold(false);
							run3.addBreak();
	
							qtdePessoasEsquerdo++;
						} else {
							run = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run.addBreak();
							run.setFontSize(12);
							run.setText("__________________________________");
							run.setBold(false);
							run.addBreak();
	
							run2 = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run2.setFontSize(12);
							run2.setText(participante.getPessoa().getNome());
							run2.setBold(true);
							run2.addBreak();
	
							run3 = tableRow2.getCell(1).getParagraphArray(0).createRun();
							run3.setFontSize(12);
							run3.setText(participante.getTipoParticipante());
							run3.setBold(false);
							run3.addBreak();
							
							qtdePessoasEsquerdo--;
						}
					}
				}
				run4 = tableRow2.getCell(0).getParagraphArray(0).createRun();
				run4.setFontSize(12);
				run4.addBreak();
				run4.setText("Testemunhas");
				run4.setBold(false);
				run4.addBreak();
				run4.setText("__________________________________");
	
				run4 = tableRow2.getCell(1).getParagraphArray(0).createRun();
				run4.setFontSize(12);
				for (int i = 0; i <= qtdePessoasEsquerdo; i++) {
					run4.addBreak();
					run4.addBreak();
					run4.addBreak();
				}
				run4.setText("__________________________________");
				run4.setBold(false);
	
			} else {
				tableRow2.getCell(0).setParagraph(paragraph);
				run = tableRow2.getCell(0).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.addBreak();
				run.setText("Testemunhas");
				run.setBold(false);
				run.addBreak();
				run.setText("__________________________________ ");
	
				tableRow2.getCell(1).setParagraph(paragraph);
				run = tableRow2.getCell(1).getParagraphArray(0).createRun();
				run.setFontSize(12);
				run.addBreak();
				run.addBreak();
				run.setText("__________________________________ ");
				run.setBold(false);
			}
	
			// create third row
			XWPFTableRow tableRow3 = table.createRow();
			tableRow3.getCell(0).setParagraph(paragraph);
			run = tableRow3.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("Nome:  " + objetoCcb.getNomeTestemunha1());
			run.setBold(false);
	
			tableRow3.getCell(1).setParagraph(paragraph);
			run = tableRow3.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("Nome:  " + objetoCcb.getNomeTestemunha2());
			run.setBold(false);
	
			XWPFTableRow tableRow4 = table.createRow();
			tableRow4.getCell(0).setParagraph(paragraph);
			run = tableRow4.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("RG:  " + objetoCcb.getRgTestemunha1());
			run.setBold(false);
	
			tableRow4.getCell(1).setParagraph(paragraph);
			run = tableRow4.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("RG:  " + objetoCcb.getRgTestemunha2());
			run.setBold(false);
	
			XWPFTableRow tableRow5 = table.createRow();
			tableRow5.getCell(0).setParagraph(paragraph);
			run = tableRow5.getCell(0).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("CPF:  " + objetoCcb.getCpfTestemunha1());
			run.setBold(false);
	
			tableRow5.getCell(1).setParagraph(paragraph);
			run = tableRow5.getCell(1).getParagraphArray(0).createRun();
			run.setFontSize(12);
			run.setText("CPF:  " + objetoCcb.getCpfTestemunha2());
			run.setBold(false);
	
			CTTblPr tblpro = table.getCTTbl().getTblPr();
	
			CTTblBorders borders = tblpro.addNewTblBorders();
			borders.addNewBottom().setVal(STBorder.NONE);
			borders.addNewLeft().setVal(STBorder.NONE);
			borders.addNewRight().setVal(STBorder.NONE);
			borders.addNewTop().setVal(STBorder.NONE);
			// also inner borders
			borders.addNewInsideH().setVal(STBorder.NONE);
			borders.addNewInsideV().setVal(STBorder.NONE);		
			
			XWPFHeaderFooterPolicy headerFooterPolicy = document.getHeaderFooterPolicy();
			if (headerFooterPolicy == null) {
				headerFooterPolicy = document.createHeaderFooterPolicy();
			}
			
			XWPFFooter footer = headerFooterPolicy.createFooter(XWPFHeaderFooterPolicy.DEFAULT);
	
			paragraph = footer.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.CENTER);
	
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setBold(true);
			run.getCTR().addNewFldChar()
					.setFldCharType(org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType.BEGIN);
	
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setBold(true);
			run.getCTR().addNewInstrText().setStringValue("PAGE \\* MERGEFORMAT");
			
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setBold(true);
			run.getCTR().addNewFldChar().setFldCharType(org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType.END);
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public byte[] geraNCDinamica() throws IOException{
		try {
			XWPFDocument document = new XWPFDocument();	
			
			XWPFHeaderFooterPolicy headerFooterPolicy = document.getHeaderFooterPolicy();
			if (headerFooterPolicy == null)
				headerFooterPolicy = document.createHeaderFooterPolicy();
	
			XWPFHeader header = headerFooterPolicy.createHeader(XWPFHeaderFooterPolicy.DEFAULT);
			XWPFParagraph paragraphHeader = header.createParagraph();
			paragraphHeader.setAlignment(ParagraphAlignment.LEFT);
			XWPFRun runHeader = paragraphHeader.createRun();
			runHeader.addPicture(getClass().getResourceAsStream("/resource/BMP MoneyPlus.png"), 6, "BMP MoneyPlus",
					Units.toEMU(130), Units.toEMU(72));
	
			XWPFRun run;
			XWPFParagraph paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("SÃ£o Paulo, SP, " + objetoCcb.getDataDeEmissao().getDate() + " de "
							+ CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase() + " de "
							+ (objetoCcb.getDataDeEmissao().getYear() + 1900) + ".");
			run.setFontSize(10);
			run.setBold(false);
			run.addCarriageReturn();
			XWPFRun run2 = paragraph.createRun();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Ã");
			run.setFontSize(10);
			run.setBold(false);
			
			for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
				if (CommonsUtil.mesmoValor(participante.getTipoParticipante(), "EMITENTE")) {
					if(CommonsUtil.semValor(objetoCcb.getNomeEmitente())) {
						objetoCcb.setNomeEmitente(participante.getPessoa().getNome());
					}
					
				}
			}
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText(objetoCcb.getNomeEmitente().toUpperCase());
			run.setFontSize(10);
			run.setBold(true);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText(objetoCcb.getEmitentePrincipal().getPessoa().getEndereco() +", nÂº "+ objetoCcb.getEmitentePrincipal().getPessoa().getNumero() +", "+ objetoCcb.getEmitentePrincipal().getPessoa().getComplemento());
			run.setFontSize(10);
			run.setBold(false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText(objetoCcb.getEmitentePrincipal().getPessoa().getBairro());
			run.setFontSize(10);
			run.setBold(false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText(objetoCcb.getEmitentePrincipal().getPessoa().getCidade() +" â " + objetoCcb.getEmitentePrincipal().getPessoa().getEstado());
			run.setFontSize(10);
			run.setBold(false);
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("CEP "+ objetoCcb.getEmitentePrincipal().getPessoa().getEstado() +";");
			run.setFontSize(10);
			run.setBold(false);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("REF.: Contrato de CCI nÂº " + objetoCcb.getNumeroCcb());
			run.setFontSize(10);
			run.setBold(true);
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Prezado(s) Cliente(s) ");
			run.setFontSize(10);
			run.setBold(false);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Pela presente, levamos ao seu conhecimento que, nesta data,"
					+ " o GALLERIA FINANÃAS SECURITIZADORA S.A., inscrito no CNPJ/MF "
					+ "sob nÂº 34.425.347/0001-06, adquiriu da BMP SOCIEDADE "
					+ "DE CRÃDITO DIRETO S.A. os direitos de crÃ©dito, decorrentes da(s) "
					+ "CÃ©dula(s) de CrÃ©dito ImobiliÃ¡rio (âCCIâ) em referÃªncia, celebrado por"
					+ " V. Sa(s), dos vencimentos a partir de ");
			run.setFontSize(10);
			run.setBold(false);
			
			run2 = paragraph.createRun();
			run2.setText(objetoCcb.getDataDeEmissao().getDate()+"");
			run2.setFontSize(10);
			run2.setBold(true);
			run2.setUnderline(UnderlinePatterns.SINGLE);
			
			run = paragraph.createRun();
			run.setText(" de ");
			run.setFontSize(10);
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setText(CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase());
			run2.setFontSize(10);
			run2.setBold(true);
			run2.setUnderline(UnderlinePatterns.SINGLE);
			
			run = paragraph.createRun();
			run.setText(" de ");
			run.setFontSize(10);
			run.setBold(true);
			
			run2 = paragraph.createRun();
			run2.setText( (objetoCcb.getDataDeEmissao().getYear() + 1900)  + ",");
			run2.setFontSize(10);
			run2.setBold(true);
			run2.setUnderline(UnderlinePatterns.SINGLE);
			
			run = paragraph.createRun();
			run.setText(" (inclusive).");
			run.setFontSize(10);
			run.setBold(false);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run = paragraph.createRun();
			run.setText("Assim, em face da operaÃ§Ã£o contratada, fica(m) V. "
					+ "Sa(s) notificadas que a partir de "+ objetoCcb.getDataDeEmissao().getDate() +" de "+
					CommonsUtil.formataMesExtenso(objetoCcb.getDataDeEmissao()).toLowerCase() +" de "+ (objetoCcb.getDataDeEmissao().getYear() + 1900) +","
					+ " (inclusive), o pagamento das parcelas referentes a(s) CCI ");
			run.setFontSize(10);
			run.setBold(false);
							
			run2 = paragraph.createRun();
			run2.setText("NÂº " + objetoCcb.getNumeroCcb());
			run2.setFontSize(10);
			run2.setBold(true);
			run = paragraph.createRun();
			run.setText(" deverÃ£o ser efetuados diretamente ao GALLERIA FINANÃAS SECURITIZADORA S.A.,"
					+ " na conta de nÂº 300793-6, mantida na agÃªncia nÂº 1515-6, Banco 001 - Banco do Brasil S.A.,"
					+ " ou Ã  sua ordem.");
			run.setFontSize(10);
			run.setBold(false);
			
			
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("Qualquer alteraÃ§Ã£o dos procedimentos acima descritos dependerÃ¡"
					+ " de prÃ©via e expressa autorizaÃ§Ã£o do BMP SOCIEDADE DE CRÃDITO DIRETO S.A. ");
			run.setFontSize(10);
			run.setBold(false);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("Atenciosamente, ");
			run.setFontSize(10);
			run.setBold(false);
			run.addCarriageReturn();
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("___________________________________________________________");
			run.setFontSize(9);
			run.setBold(false);
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("BMP SOCIEDADE DE CRÃDITO DIRETO S.A");
			run.setFontSize(11);
			run.setBold(true);
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("CEDENTE");
			run.setFontSize(9);
			run.setBold(false);
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("Ciente: ");
			run.setFontSize(9);
			run.setBold(false);
			run.addCarriageReturn();
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("___________________________________________________________");
			run.setFontSize(9);
			run.setBold(false);
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText(objetoCcb.getNomeEmitente().toUpperCase());
			run.setFontSize(11);
			run.setBold(true);
			run.addCarriageReturn();
			
			paragraph = document.createParagraph();
			run = paragraph.createRun();
			paragraph.setAlignment(ParagraphAlignment.BOTH);
			paragraph.setSpacingBefore(0);
			paragraph.setSpacingAfter(0);
			run.setText("EMITENTE");
			run.setFontSize(9);
			run.setBold(false);
			
			headerFooterPolicy = document.getHeaderFooterPolicy();
			if (headerFooterPolicy == null) {
				headerFooterPolicy = document.createHeaderFooterPolicy();
			}
			
			XWPFFooter footer = headerFooterPolicy.createFooter(XWPFHeaderFooterPolicy.DEFAULT);
	
			paragraph = footer.createParagraph();
			paragraph.setAlignment(ParagraphAlignment.CENTER);
	
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setBold(true);
			run.getCTR().addNewFldChar()
					.setFldCharType(org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType.BEGIN);
	
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setBold(true);
			run.getCTR().addNewInstrText().setStringValue("PAGE \\* MERGEFORMAT");
			
			run = paragraph.createRun();
			run.setFontSize(10);
			run.setBold(true);
			run.getCTR().addNewFldChar().setFldCharType(org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType.END);
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			document.write(out);
			document.close();
			return out.toByteArray();			
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public void clearDocumentosNovos() {
		fiducianteGerado = false;
		devedorGerado = false;
		
		for (CcbParticipantes participante : objetoCcb.getListaParticipantes()) {
			if(CommonsUtil.semValor(participante.getTipoOriginal())) {
				participante.setTipoOriginal(participante.getTipoParticipante());
			} else {
				participante.setTipoParticipante(participante.getTipoOriginal());
			}
		}
	}
	
	public void fazParagrafoSimples(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, String texto, boolean bold) {
		paragraph = document.createParagraph();		
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run.addCarriageReturn();
	}
	
	public void fazParagrafoSimplesSemReturn(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, String texto, boolean bold) {
		paragraph = document.createParagraph();		
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
	}
	
	public void fazParagrafoSimples(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, String texto, boolean bold, ParagraphAlignment alinhamento) {
		paragraph = document.createParagraph();	
		paragraph.setAlignment(alinhamento);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run.addCarriageReturn();
	}
	
	public void geraParagrafoComposto(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, XWPFRun run2, String texto, 
			String texto2, boolean bold, boolean bold2) {
		paragraph = document.createParagraph();
		paragraph.setAlignment(ParagraphAlignment.BOTH);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run2 = paragraph.createRun();
		run2.setFontSize(12);
		run2.setText(texto2);
		run2.setBold(bold2);
		run2.addCarriageReturn();
	}
	
	public void geraParagrafoCompostoSemReturn(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, XWPFRun run2, String texto, 
			String texto2, boolean bold, boolean bold2) {
		paragraph = document.createParagraph();
		paragraph.setAlignment(ParagraphAlignment.BOTH);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run2 = paragraph.createRun();
		run2.setFontSize(12);
		run2.setText(texto2);
		run2.setBold(bold2);
	}
	
	public void geraParagrafoComposto(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, XWPFRun run2, String texto, 
			String texto2, boolean bold, boolean bold2, ParagraphAlignment alinhamento) {
		paragraph = document.createParagraph();
		paragraph.setAlignment(alinhamento);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run2 = paragraph.createRun();
		run2.setFontSize(12);
		run2.setText(texto2);
		run2.setBold(bold2);
		run2.addCarriageReturn();
	}
	
	public void geraParagrafoBulletList(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, BigInteger numID, String texto, boolean bold) {
		paragraph = document.createParagraph();
		paragraph.setNumID(numID);
		paragraph.setSpacingBetween(1);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setAlignment(ParagraphAlignment.BOTH);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run.addCarriageReturn();
	}
	
	public void geraParagrafoBulletListSemReturn(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, BigInteger numID, String texto, boolean bold) {
		paragraph = document.createParagraph();
		paragraph.setNumID(numID);
		paragraph.setSpacingBetween(1);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setAlignment(ParagraphAlignment.BOTH);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
	}
	
	public void geraParagrafoBulletListComposta(XWPFDocument document, XWPFParagraph paragraph, XWPFRun run, XWPFRun run2, String texto, 
			String texto2, boolean bold, boolean bold2, BigInteger numID, UnderlinePatterns underline) {
		paragraph = document.createParagraph();
		paragraph.setNumID(numID);
		paragraph.setAlignment(ParagraphAlignment.BOTH);
		paragraph.setSpacingBefore(0);
		paragraph.setSpacingAfter(0);
		paragraph.setSpacingBetween(1);
		run = paragraph.createRun();
		run.setFontSize(12);
		run.setText(texto);
		run.setBold(bold);
		run.setUnderline(underline);
		run2 = paragraph.createRun();
		run2.setFontSize(12);
		run2.setText(texto2);
		run2.setBold(bold2);
		run2.addCarriageReturn();
	}
	
	public static String RomanNumerals(int Int) {
		LinkedHashMap<String, Integer> roman_numerals = new LinkedHashMap<String, Integer>();
		roman_numerals.put("M", 1000);
		roman_numerals.put("CM", 900);
		roman_numerals.put("D", 500);
		roman_numerals.put("CD", 400);
		roman_numerals.put("C", 100);
		roman_numerals.put("XC", 90);
		roman_numerals.put("L", 50);
		roman_numerals.put("XL", 40);
		roman_numerals.put("X", 10);
		roman_numerals.put("IX", 9);
		roman_numerals.put("V", 5);
		roman_numerals.put("IV", 4);
		roman_numerals.put("I", 1);
		String res = "";
		for (Map.Entry<String, Integer> entry : roman_numerals.entrySet()) {
			int matches = Int / entry.getValue();
			res += repeat(entry.getKey(), matches);
			Int = Int % entry.getValue();
		}
		return res;
	}
	
	public static String repeat(String s, int n) {
		if (s == null) {
			return null;
		}
		final StringBuilder sb = new StringBuilder();
		for (int i = 0; i < n; i++) {
			sb.append(s);
		}
		return sb.toString();
	}
	
	static String cTAbstractNumBulletXML = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"0\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"360\"/></w:pPr><w:rPr><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"2160\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_NoLeft = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"1\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"360\" w:hanging=\"360\"/></w:pPr><w:rPr><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_NoLeft_NoHanging_bold = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"2\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"0\" w:hanging=\"0\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"0\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"0\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_NoLeft_NoHanging_bold2 = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"3\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"0\" w:hanging=\"0\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"0\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"0\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_NoHanging_bold = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"4\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"360\" w:hanging=\"0\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"2160\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_bold = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"5\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"360\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"2160\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_bold_Roman = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"6\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"upperRoman\"/><w:lvlText w:val=\"%1-\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1080\" w:hanging=\"720\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:i w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"upperRoman\"/><w:lvlText w:val=\"%1-.%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"2160\" w:hanging=\"720\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"upperRoman\"/><w:lvlText w:val=\"%1-.%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"2880\" w:hanging=\"720\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_bold2 = "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"7\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1)\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"360\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"lowerLetter\"/><w:lvlText w:val=\"%1).%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"2160\" w:hanging=\"360\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
	
	static String cTAbstractNumBulletXML_bold_Roman_NoLeft_NoHanging= "<w:abstractNum xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" w:abstractNumId=\"8\">"
			+ "<w:multiLevelType w:val=\"hybridMultilevel\"/>"
			+ "<w:lvl w:ilvl=\"0\"><w:start w:val=\"1\"/><w:numFmt w:val=\"upperRoman\"/><w:lvlText w:val=\"%1\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"0\" w:hanging=\"0\"/></w:pPr><w:rPr><w:b w:val=\"true\"/><w:sz w:val=\"24\"/></w:rPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"1\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"upperRoman\"/><w:lvlText w:val=\"%1.%2\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"720\" w:hanging=\"720\"/></w:pPr></w:lvl>"
			+ "<w:lvl w:ilvl=\"2\" w:tentative=\"1\"><w:start w:val=\"1\"/><w:numFmt w:val=\"upperRoman\"/><w:lvlText w:val=\"%1.%2.%3\"/><w:lvlJc w:val=\"left\"/><w:pPr><w:ind w:left=\"1440\" w:hanging=\"720\"/></w:pPr></w:lvl>"
			+ "</w:abstractNum>";
}
